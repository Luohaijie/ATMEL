
USART_EXAMPLE21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00008000  00008000  000027ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000026d2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000068  00802000  000026d2  00002786  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000027  00802068  00802068  00002832  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002832  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003f8  00000000  00000000  000028d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001250a  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003f47  00000000  00000000  000151d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007932  00000000  00000000  00019119  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bd0  00000000  00000000  00020a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002f3d5  00000000  00000000  0002161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004d8f  00000000  00000000  000509f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c0  00000000  00000000  00055780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000bda9  00000000  00000000  00055b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00008000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
    8000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
    8002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
    8004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
    8006:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
    800a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
    800e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
    8010:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
    8014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
    8016:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
    801a:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
    801c:	08 95       	ret

0000801e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
    801e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
    8022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
    8024:	fc cf       	rjmp	.-8      	; 0x801e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
    8026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
    8028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
    802a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
    802c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
    8030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
    8032:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
    8036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
    8038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
    803a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
    803c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
    8040:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
    8042:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
       6:	00 00       	nop
       8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
       a:	00 00       	nop
       c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
       e:	00 00       	nop
      10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
      12:	00 00       	nop
      14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
      16:	00 00       	nop
      18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
      22:	00 00       	nop
      24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
      26:	00 00       	nop
      28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
      32:	00 00       	nop
      34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
      36:	00 00       	nop
      38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
      42:	00 00       	nop
      44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
      46:	00 00       	nop
      48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
      52:	00 00       	nop
      54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
      56:	00 00       	nop
      58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
      62:	00 00       	nop
      64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
      66:	00 00       	nop
      68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
      72:	00 00       	nop
      74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
      76:	00 00       	nop
      78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
      82:	00 00       	nop
      84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
      86:	00 00       	nop
      88:	d4 c1       	rjmp	.+936    	; 0x432 <__vector_34>
      8a:	00 00       	nop
      8c:	2c c0       	rjmp	.+88     	; 0xe6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2a c0       	rjmp	.+84     	; 0xe6 <__bad_interrupt>
      92:	00 00       	nop
      94:	28 c0       	rjmp	.+80     	; 0xe6 <__bad_interrupt>
      96:	00 00       	nop
      98:	26 c0       	rjmp	.+76     	; 0xe6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	24 c0       	rjmp	.+72     	; 0xe6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_40>
      a4:	20 c0       	rjmp	.+64     	; 0xe6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1e c0       	rjmp	.+60     	; 0xe6 <__bad_interrupt>
	...

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	e2 ed       	ldi	r30, 0xD2	; 210
      c0:	f6 e2       	ldi	r31, 0x26	; 38
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a8 36       	cpi	r26, 0x68	; 104
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	a8 e6       	ldi	r26, 0x68	; 104
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	af 38       	cpi	r26, 0x8F	; 143
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 85 09 	call	0x130a	; 0x130a <main>
      e2:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <_exit>

000000e6 <__bad_interrupt>:
      e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <nvm_init>:
	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	10 f4       	brcc	.+4      	; 0xf0 <nvm_init+0x8>
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	08 95       	ret
      f0:	88 ef       	ldi	r24, 0xF8	; 248
      f2:	08 95       	ret

000000f4 <nvm_write_char>:

status_code_t nvm_write_char(mem_type_t mem, uint32_t address, uint8_t data)
{
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	1f 92       	push	r1
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	38 2f       	mov	r19, r24
     100:	db 01       	movw	r26, r22
     102:	ca 01       	movw	r24, r20
     104:	29 83       	std	Y+1, r18	; 0x01
	switch (mem) {
     106:	31 30       	cpi	r19, 0x01	; 1
     108:	69 f0       	breq	.+26     	; 0x124 <nvm_write_char+0x30>
     10a:	18 f0       	brcs	.+6      	; 0x112 <nvm_write_char+0x1e>
     10c:	32 30       	cpi	r19, 0x02	; 2
     10e:	99 f0       	breq	.+38     	; 0x136 <nvm_write_char+0x42>
     110:	16 c0       	rjmp	.+44     	; 0x13e <nvm_write_char+0x4a>
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	41 e0       	ldi	r20, 0x01	; 1
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	be 01       	movw	r22, r28
     11a:	6f 5f       	subi	r22, 0xFF	; 255
     11c:	7f 4f       	sbci	r23, 0xFF	; 255
     11e:	d2 d4       	rcall	.+2468   	; 0xac4 <nvm_flash_erase_and_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
     120:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
				(const void *)&data, 1, true);
		break;
     122:	0e c0       	rjmp	.+28     	; 0x140 <nvm_write_char+0x4c>

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	41 e0       	ldi	r20, 0x01	; 1
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	be 01       	movw	r22, r28
     12c:	6f 5f       	subi	r22, 0xFF	; 255
     12e:	7f 4f       	sbci	r23, 0xFF	; 255
     130:	20 d4       	rcall	.+2112   	; 0x972 <nvm_user_sig_write_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
     132:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
				(const void *)&data, 1, true);
		break;
     134:	05 c0       	rjmp	.+10     	; 0x140 <nvm_write_char+0x4c>

	case INT_EEPROM:
		nvm_eeprom_write_byte((eeprom_addr_t)address, data);
     136:	69 81       	ldd	r22, Y+1	; 0x01
     138:	be d3       	rcall	.+1916   	; 0x8b6 <nvm_eeprom_write_byte>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
     13a:	80 e0       	ldi	r24, 0x00	; 0
				(const void *)&data, 1, true);
		break;

	case INT_EEPROM:
		nvm_eeprom_write_byte((eeprom_addr_t)address, data);
		break;
     13c:	01 c0       	rjmp	.+2      	; 0x140 <nvm_write_char+0x4c>
		at45dbx_write_close();
		break;
#endif

	default:
		return ERR_INVALID_ARG;
     13e:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
     140:	0f 90       	pop	r0
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <nvm_read>:

status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	e8 2f       	mov	r30, r24
     152:	db 01       	movw	r26, r22
     154:	ca 01       	movw	r24, r20
	switch (mem) {
     156:	e1 30       	cpi	r30, 0x01	; 1
     158:	49 f0       	breq	.+18     	; 0x16c <nvm_read+0x24>
     15a:	18 f0       	brcs	.+6      	; 0x162 <nvm_read+0x1a>
     15c:	e2 30       	cpi	r30, 0x02	; 2
     15e:	59 f0       	breq	.+22     	; 0x176 <nvm_read+0x2e>
     160:	0f c0       	rjmp	.+30     	; 0x180 <nvm_read+0x38>
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
     162:	a7 01       	movw	r20, r14
     164:	b9 01       	movw	r22, r18
     166:	cc d3       	rcall	.+1944   	; 0x900 <nvm_flash_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
     168:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (mem) {
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
     16a:	0b c0       	rjmp	.+22     	; 0x182 <nvm_read+0x3a>

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
     16c:	a7 01       	movw	r20, r14
     16e:	b9 01       	movw	r22, r18
     170:	e2 d3       	rcall	.+1988   	; 0x936 <nvm_user_sig_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
     172:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
				(uint16_t)len);
		break;
     174:	06 c0       	rjmp	.+12     	; 0x182 <nvm_read+0x3a>

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
     176:	a7 01       	movw	r20, r14
     178:	b9 01       	movw	r22, r18
     17a:	75 d3       	rcall	.+1770   	; 0x866 <nvm_eeprom_read_buffer>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
     17c:	80 e0       	ldi	r24, 0x00	; 0
		break;

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
				(uint16_t)len);
		break;
     17e:	01 c0       	rjmp	.+2      	; 0x182 <nvm_read+0x3a>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
     180:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return STATUS_OK;
}
     182:	1f 91       	pop	r17
     184:	0f 91       	pop	r16
     186:	ff 90       	pop	r15
     188:	ef 90       	pop	r14
     18a:	08 95       	ret

0000018c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	00 d0       	rcall	.+0      	; 0x192 <sysclk_init+0x6>
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     19c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     1a0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     1a4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     1a8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     1ac:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     1b0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     1b4:	8f b7       	in	r24, 0x3f	; 63
     1b6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     1b8:	f8 94       	cli
	return flags;
     1ba:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     1bc:	e0 e5       	ldi	r30, 0x50	; 80
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	80 62       	ori	r24, 0x20	; 32
     1c4:	80 83       	st	Z, r24
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     1cc:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     1ce:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     1d0:	85 ff       	sbrs	r24, 5
     1d2:	fd cf       	rjmp	.-6      	; 0x1ce <sysclk_init+0x42>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     1d4:	65 e0       	ldi	r22, 0x05	; 5
     1d6:	80 e4       	ldi	r24, 0x40	; 64
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	6f d2       	rcall	.+1246   	; 0x6ba <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     1dc:	8f b7       	in	r24, 0x3f	; 63
     1de:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     1e0:	f8 94       	cli
	return flags;
     1e2:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     1e4:	e0 e5       	ldi	r30, 0x50	; 80
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	8e 7f       	andi	r24, 0xFE	; 254
     1ec:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     1ee:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	1f 92       	push	r1
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     204:	9f b7       	in	r25, 0x3f	; 63
     206:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     208:	f8 94       	cli
	return flags;
     20a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     20c:	e8 2f       	mov	r30, r24
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	e0 59       	subi	r30, 0x90	; 144
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	60 95       	com	r22
     216:	80 81       	ld	r24, Z
     218:	68 23       	and	r22, r24
     21a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     21c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     21e:	0f 90       	pop	r0
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	1f 92       	push	r1
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     230:	9f b7       	in	r25, 0x3f	; 63
     232:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     234:	f8 94       	cli
	return flags;
     236:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     238:	e8 2f       	mov	r30, r24
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	e0 59       	subi	r30, 0x90	; 144
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	68 2b       	or	r22, r24
     244:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     246:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	fc 01       	movw	r30, r24
     256:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     25c:	c6 2f       	mov	r28, r22
     25e:	d0 e0       	ldi	r29, 0x00	; 0
     260:	de 01       	movw	r26, r28
     262:	02 2e       	mov	r0, r18
     264:	02 c0       	rjmp	.+4      	; 0x26a <ioport_configure_port_pin+0x1a>
     266:	b5 95       	asr	r27
     268:	a7 95       	ror	r26
     26a:	0a 94       	dec	r0
     26c:	e2 f7       	brpl	.-8      	; 0x266 <ioport_configure_port_pin+0x16>
     26e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     270:	50 83       	st	Z, r21
     272:	2f 5f       	subi	r18, 0xFF	; 255
     274:	3f 4f       	sbci	r19, 0xFF	; 255
     276:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     278:	28 30       	cpi	r18, 0x08	; 8
     27a:	31 05       	cpc	r19, r1
     27c:	89 f7       	brne	.-30     	; 0x260 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     27e:	40 ff       	sbrs	r20, 0
     280:	0a c0       	rjmp	.+20     	; 0x296 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     282:	41 ff       	sbrs	r20, 1
     284:	03 c0       	rjmp	.+6      	; 0x28c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     286:	fc 01       	movw	r30, r24
     288:	65 83       	std	Z+5, r22	; 0x05
     28a:	02 c0       	rjmp	.+4      	; 0x290 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     28c:	fc 01       	movw	r30, r24
     28e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     290:	fc 01       	movw	r30, r24
     292:	61 83       	std	Z+1, r22	; 0x01
     294:	02 c0       	rjmp	.+4      	; 0x29a <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     296:	fc 01       	movw	r30, r24
     298:	62 83       	std	Z+2, r22	; 0x02
	}
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	1f 92       	push	r1
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2aa:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <stdio_base>
     2ae:	90 91 82 20 	lds	r25, 0x2082	; 0x802082 <stdio_base+0x1>
     2b2:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <ptr_get>
     2b6:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <ptr_get+0x1>
     2ba:	be 01       	movw	r22, r28
     2bc:	6f 5f       	subi	r22, 0xFF	; 255
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	09 95       	icall
	return c;
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c4:	08 2e       	mov	r0, r24
     2c6:	00 0c       	add	r0, r0
     2c8:	99 0b       	sbc	r25, r25
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2d2:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     2d4:	80 91 81 20 	lds	r24, 0x2081	; 0x802081 <stdio_base>
     2d8:	90 91 82 20 	lds	r25, 0x2082	; 0x802082 <stdio_base+0x1>
     2dc:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <ptr_put>
     2e0:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <ptr_put+0x1>
     2e4:	09 95       	icall
     2e6:	99 23       	and	r25, r25
     2e8:	1c f0       	brlt	.+6      	; 0x2f0 <_write+0x1e>
		return -1;
	}
	return 1;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     2f4:	08 95       	ret

000002f6 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     2f6:	41 e0       	ldi	r20, 0x01	; 1
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	60 e1       	ldi	r22, 0x10	; 16
     2fc:	80 e6       	ldi	r24, 0x60	; 96
     2fe:	96 e0       	ldi	r25, 0x06	; 6
     300:	a7 df       	rcall	.-178    	; 0x250 <ioport_configure_port_pin>
     302:	43 e0       	ldi	r20, 0x03	; 3
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	60 e2       	ldi	r22, 0x20	; 32
     308:	80 e6       	ldi	r24, 0x60	; 96
     30a:	96 e0       	ldi	r25, 0x06	; 6
     30c:	a1 df       	rcall	.-190    	; 0x250 <ioport_configure_port_pin>
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	5b e1       	ldi	r21, 0x1B	; 27
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	80 e6       	ldi	r24, 0x60	; 96
     316:	96 e0       	ldi	r25, 0x06	; 6
     318:	9b df       	rcall	.-202    	; 0x250 <ioport_configure_port_pin>
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	5b e1       	ldi	r21, 0x1B	; 27
     31e:	64 e0       	ldi	r22, 0x04	; 4
     320:	80 e6       	ldi	r24, 0x60	; 96
     322:	96 e0       	ldi	r25, 0x06	; 6
     324:	95 df       	rcall	.-214    	; 0x250 <ioport_configure_port_pin>
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	5b e1       	ldi	r21, 0x1B	; 27
     32a:	60 e2       	ldi	r22, 0x20	; 32
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	96 e0       	ldi	r25, 0x06	; 6
     330:	8f df       	rcall	.-226    	; 0x250 <ioport_configure_port_pin>
     332:	43 e0       	ldi	r20, 0x03	; 3
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	62 e0       	ldi	r22, 0x02	; 2
     338:	80 ee       	ldi	r24, 0xE0	; 224
     33a:	97 e0       	ldi	r25, 0x07	; 7
     33c:	89 df       	rcall	.-238    	; 0x250 <ioport_configure_port_pin>
     33e:	43 e0       	ldi	r20, 0x03	; 3
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	68 e0       	ldi	r22, 0x08	; 8
     344:	80 e6       	ldi	r24, 0x60	; 96
     346:	96 e0       	ldi	r25, 0x06	; 6
     348:	83 df       	rcall	.-250    	; 0x250 <ioport_configure_port_pin>
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	64 e0       	ldi	r22, 0x04	; 4
     350:	80 e6       	ldi	r24, 0x60	; 96
     352:	96 e0       	ldi	r25, 0x06	; 6
     354:	7d cf       	rjmp	.-262    	; 0x250 <ioport_configure_port_pin>
     356:	08 95       	ret

00000358 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     358:	81 15       	cp	r24, r1
     35a:	92 40       	sbci	r25, 0x02	; 2
     35c:	59 f4       	brne	.+22     	; 0x374 <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     35e:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	98 0f       	add	r25, r24
     366:	90 93 68 20 	sts	0x2068, r25	; 0x802068 <__data_end>
     36a:	81 11       	cpse	r24, r1
     36c:	03 c0       	rjmp	.+6      	; 0x374 <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     36e:	62 e0       	ldi	r22, 0x02	; 2
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	43 cf       	rjmp	.-378    	; 0x1fa <sysclk_enable_module>
     374:	08 95       	ret

00000376 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     376:	81 15       	cp	r24, r1
     378:	92 40       	sbci	r25, 0x02	; 2
     37a:	51 f4       	brne	.+20     	; 0x390 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     37c:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__data_end>
     380:	81 50       	subi	r24, 0x01	; 1
     382:	80 93 68 20 	sts	0x2068, r24	; 0x802068 <__data_end>
     386:	81 11       	cpse	r24, r1
     388:	03 c0       	rjmp	.+6      	; 0x390 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     38a:	62 e0       	ldi	r22, 0x02	; 2
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	4b cf       	rjmp	.-362    	; 0x226 <sysclk_disable_module>
     390:	08 95       	ret

00000392 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <adc_enable+0xc>
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3a4:	8f b7       	in	r24, 0x3f	; 63
     3a6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3a8:	f8 94       	cli
	return flags;
     3aa:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     3ac:	c7 01       	movw	r24, r14
     3ae:	d4 df       	rcall	.-88     	; 0x358 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     3b0:	f7 01       	movw	r30, r14
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3b8:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     3ba:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <sleepmgr_locks+0x1>
     3be:	8f 3f       	cpi	r24, 0xFF	; 255
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <adc_enable+0x32>
     3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <adc_enable+0x30>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3c4:	8f b7       	in	r24, 0x3f	; 63
     3c6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3c8:	f8 94       	cli
	return flags;
     3ca:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     3cc:	e7 e7       	ldi	r30, 0x77	; 119
     3ce:	f0 e2       	ldi	r31, 0x20	; 32
     3d0:	81 81       	ldd	r24, Z+1	; 0x01
     3d2:	8f 5f       	subi	r24, 0xFF	; 255
     3d4:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3d6:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <adc_disable+0x8>
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3f4:	2f b7       	in	r18, 0x3f	; 63
     3f6:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
     3f8:	f8 94       	cli
	return flags;
     3fa:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 81       	ld	r18, Z
     400:	2e 7f       	andi	r18, 0xFE	; 254
     402:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     404:	b8 df       	rcall	.-144    	; 0x376 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     406:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     408:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <sleepmgr_locks+0x1>
     40c:	81 11       	cpse	r24, r1
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	ff cf       	rjmp	.-2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     412:	8f b7       	in	r24, 0x3f	; 63
     414:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     416:	f8 94       	cli
	return flags;
     418:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     41a:	e7 e7       	ldi	r30, 0x77	; 119
     41c:	f0 e2       	ldi	r31, 0x20	; 32
     41e:	81 81       	ldd	r24, Z+1	; 0x01
     420:	81 50       	subi	r24, 0x01	; 1
     422:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     424:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	08 95       	ret

00000432 <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     432:	1f 92       	push	r1
     434:	0f 92       	push	r0
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	0f 92       	push	r0
     43a:	11 24       	eor	r1, r1
     43c:	2f 93       	push	r18
     43e:	3f 93       	push	r19
     440:	4f 93       	push	r20
     442:	5f 93       	push	r21
     444:	6f 93       	push	r22
     446:	7f 93       	push	r23
     448:	8f 93       	push	r24
     44a:	9f 93       	push	r25
     44c:	af 93       	push	r26
     44e:	bf 93       	push	r27
     450:	ef 93       	push	r30
     452:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     454:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     458:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     45c:	e0 91 83 20 	lds	r30, 0x2083	; 0x802083 <adca_callback>
     460:	f0 91 84 20 	lds	r31, 0x2084	; 0x802084 <adca_callback+0x1>
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	09 95       	icall
}
     46c:	ff 91       	pop	r31
     46e:	ef 91       	pop	r30
     470:	bf 91       	pop	r27
     472:	af 91       	pop	r26
     474:	9f 91       	pop	r25
     476:	8f 91       	pop	r24
     478:	7f 91       	pop	r23
     47a:	6f 91       	pop	r22
     47c:	5f 91       	pop	r21
     47e:	4f 91       	pop	r20
     480:	3f 91       	pop	r19
     482:	2f 91       	pop	r18
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	1f 92       	push	r1
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     4a4:	81 15       	cp	r24, r1
     4a6:	22 e0       	ldi	r18, 0x02	; 2
     4a8:	92 07       	cpc	r25, r18
     4aa:	c9 f5       	brne	.+114    	; 0x51e <adc_write_configuration+0x90>
     4ac:	7b 01       	movw	r14, r22
     4ae:	8c 01       	movw	r16, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     4b0:	61 e2       	ldi	r22, 0x21	; 33
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	c0 d3       	rcall	.+1920   	; 0xc38 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     4b8:	c8 2e       	mov	r12, r24
     4ba:	d1 2c       	mov	r13, r1
     4bc:	60 e2       	ldi	r22, 0x20	; 32
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	ba d3       	rcall	.+1908   	; 0xc38 <nvm_read_byte>
		data <<= 8;
     4c4:	dc 2c       	mov	r13, r12
     4c6:	cc 24       	eor	r12, r12
		data |= nvm_read_production_signature_row(ADCACAL0);
     4c8:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4ca:	8f b7       	in	r24, 0x3f	; 63
     4cc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     4ce:	f8 94       	cli
	return flags;
     4d0:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     4d2:	c8 01       	movw	r24, r16
     4d4:	41 df       	rcall	.-382    	; 0x358 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     4d6:	f8 01       	movw	r30, r16
     4d8:	80 81       	ld	r24, Z
     4da:	81 70       	andi	r24, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	90 83       	st	Z, r25
	adc->CAL = cal;
     4e0:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
     4e2:	f7 01       	movw	r30, r14
     4e4:	24 81       	ldd	r18, Z+4	; 0x04
     4e6:	35 81       	ldd	r19, Z+5	; 0x05
     4e8:	f8 01       	movw	r30, r16
     4ea:	20 8f       	std	Z+24, r18	; 0x18
     4ec:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     4ee:	f7 01       	movw	r30, r14
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	f8 01       	movw	r30, r16
     4f4:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     4f6:	f7 01       	movw	r30, r14
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	f8 01       	movw	r30, r16
     4fc:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     4fe:	f7 01       	movw	r30, r14
     500:	92 81       	ldd	r25, Z+2	; 0x02
     502:	f8 01       	movw	r30, r16
     504:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     506:	f7 01       	movw	r30, r14
     508:	90 81       	ld	r25, Z
     50a:	f8 01       	movw	r30, r16
     50c:	91 83       	std	Z+1, r25	; 0x01
	adc->SAMPCTRL = conf->sampctrl;
     50e:	f7 01       	movw	r30, r14
     510:	96 81       	ldd	r25, Z+6	; 0x06
     512:	f8 01       	movw	r30, r16
     514:	90 87       	std	Z+8, r25	; 0x08

	adc->CTRLA = enable;
     516:	80 83       	st	Z, r24

	adc_disable_clock(adc);
     518:	c8 01       	movw	r24, r16
     51a:	2d df       	rcall	.-422    	; 0x376 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     51c:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     51e:	0f 90       	pop	r0
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	df 90       	pop	r13
     52e:	cf 90       	pop	r12
     530:	08 95       	ret

00000532 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	1f 92       	push	r1
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	8c 01       	movw	r16, r24
     548:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     54a:	8f b7       	in	r24, 0x3f	; 63
     54c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     54e:	f8 94       	cli
	return flags;
     550:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     552:	c8 01       	movw	r24, r16
     554:	01 df       	rcall	.-510    	; 0x358 <adc_enable_clock>

	conf->cmp = adc->CMP;
     556:	f8 01       	movw	r30, r16
     558:	80 8d       	ldd	r24, Z+24	; 0x18
     55a:	91 8d       	ldd	r25, Z+25	; 0x19
     55c:	f7 01       	movw	r30, r14
     55e:	84 83       	std	Z+4, r24	; 0x04
     560:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
     562:	f8 01       	movw	r30, r16
     564:	82 81       	ldd	r24, Z+2	; 0x02
     566:	f7 01       	movw	r30, r14
     568:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
     56a:	f8 01       	movw	r30, r16
     56c:	84 81       	ldd	r24, Z+4	; 0x04
     56e:	f7 01       	movw	r30, r14
     570:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
     572:	f8 01       	movw	r30, r16
     574:	83 81       	ldd	r24, Z+3	; 0x03
     576:	f7 01       	movw	r30, r14
     578:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
     57a:	f8 01       	movw	r30, r16
     57c:	81 81       	ldd	r24, Z+1	; 0x01
     57e:	f7 01       	movw	r30, r14
     580:	80 83       	st	Z, r24
	conf->sampctrl = adc->SAMPCTRL;
     582:	f8 01       	movw	r30, r16
     584:	80 85       	ldd	r24, Z+8	; 0x08
     586:	f7 01       	movw	r30, r14
     588:	86 83       	std	Z+6, r24	; 0x06

	adc_disable_clock(adc);
     58a:	c8 01       	movw	r24, r16
     58c:	f4 de       	rcall	.-536    	; 0x376 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     58e:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     590:	0f 90       	pop	r0
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	08 95       	ret

000005a2 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	1f 92       	push	r1
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	8c 01       	movw	r16, r24
     5b8:	7a 01       	movw	r14, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     5ba:	8f b7       	in	r24, 0x3f	; 63
     5bc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     5be:	f8 94       	cli
	return flags;
     5c0:	d9 80       	ldd	r13, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     5c2:	c8 01       	movw	r24, r16
     5c4:	c9 de       	rcall	.-622    	; 0x358 <adc_enable_clock>

	adc_ch->CTRL = ch_conf->ctrl;
     5c6:	f7 01       	movw	r30, r14
     5c8:	80 81       	ld	r24, Z
     5ca:	f8 01       	movw	r30, r16
     5cc:	80 a3       	std	Z+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
     5ce:	f7 01       	movw	r30, r14
     5d0:	82 81       	ldd	r24, Z+2	; 0x02
     5d2:	f8 01       	movw	r30, r16
     5d4:	82 a3       	std	Z+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     5d6:	f7 01       	movw	r30, r14
     5d8:	81 81       	ldd	r24, Z+1	; 0x01
     5da:	f8 01       	movw	r30, r16
     5dc:	81 a3       	std	Z+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
     5de:	f7 01       	movw	r30, r14
     5e0:	83 81       	ldd	r24, Z+3	; 0x03
     5e2:	f8 01       	movw	r30, r16
     5e4:	86 a3       	std	Z+38, r24	; 0x26
	adc_ch->CORRCTRL = ch_conf->corrctrl;
     5e6:	f7 01       	movw	r30, r14
     5e8:	84 81       	ldd	r24, Z+4	; 0x04
     5ea:	f8 01       	movw	r30, r16
     5ec:	87 a3       	std	Z+39, r24	; 0x27
	adc_ch->OFFSETCORR0 = ch_conf->offsetcorr0;
     5ee:	f7 01       	movw	r30, r14
     5f0:	85 81       	ldd	r24, Z+5	; 0x05
     5f2:	f8 01       	movw	r30, r16
     5f4:	80 a7       	std	Z+40, r24	; 0x28
	adc_ch->OFFSETCORR1 = ch_conf->offsetcorr1;
     5f6:	f7 01       	movw	r30, r14
     5f8:	86 81       	ldd	r24, Z+6	; 0x06
     5fa:	f8 01       	movw	r30, r16
     5fc:	81 a7       	std	Z+41, r24	; 0x29
	adc_ch->GAINCORR0 = ch_conf->gaincorr0;
     5fe:	f7 01       	movw	r30, r14
     600:	87 81       	ldd	r24, Z+7	; 0x07
     602:	f8 01       	movw	r30, r16
     604:	82 a7       	std	Z+42, r24	; 0x2a
	adc_ch->GAINCORR1 = ch_conf->gaincorr1;
     606:	f7 01       	movw	r30, r14
     608:	80 85       	ldd	r24, Z+8	; 0x08
     60a:	f8 01       	movw	r30, r16
     60c:	83 a7       	std	Z+43, r24	; 0x2b
	adc_ch->AVGCTRL = ch_conf->avgctrl;
     60e:	f7 01       	movw	r30, r14
     610:	81 85       	ldd	r24, Z+9	; 0x09
     612:	f8 01       	movw	r30, r16
     614:	84 a7       	std	Z+44, r24	; 0x2c

	adc_disable_clock(adc);
     616:	c8 01       	movw	r24, r16
     618:	ae de       	rcall	.-676    	; 0x376 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     61a:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	08 95       	ret

0000062e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	1f 92       	push	r1
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	8c 01       	movw	r16, r24
     644:	7a 01       	movw	r14, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     646:	8f b7       	in	r24, 0x3f	; 63
     648:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     64a:	f8 94       	cli
	return flags;
     64c:	d9 80       	ldd	r13, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     64e:	c8 01       	movw	r24, r16
     650:	83 de       	rcall	.-762    	; 0x358 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     652:	f8 01       	movw	r30, r16
     654:	80 a1       	ldd	r24, Z+32	; 0x20
     656:	f7 01       	movw	r30, r14
     658:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     65a:	f8 01       	movw	r30, r16
     65c:	82 a1       	ldd	r24, Z+34	; 0x22
     65e:	f7 01       	movw	r30, r14
     660:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     662:	f8 01       	movw	r30, r16
     664:	81 a1       	ldd	r24, Z+33	; 0x21
     666:	f7 01       	movw	r30, r14
     668:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
     66a:	f8 01       	movw	r30, r16
     66c:	86 a1       	ldd	r24, Z+38	; 0x26
     66e:	f7 01       	movw	r30, r14
     670:	83 83       	std	Z+3, r24	; 0x03
	ch_conf->corrctrl = adc_ch->CORRCTRL;
     672:	f8 01       	movw	r30, r16
     674:	87 a1       	ldd	r24, Z+39	; 0x27
     676:	f7 01       	movw	r30, r14
     678:	84 83       	std	Z+4, r24	; 0x04
	ch_conf->offsetcorr0 = adc_ch->OFFSETCORR0;
     67a:	f8 01       	movw	r30, r16
     67c:	80 a5       	ldd	r24, Z+40	; 0x28
     67e:	f7 01       	movw	r30, r14
     680:	85 83       	std	Z+5, r24	; 0x05
	ch_conf->offsetcorr1 = adc_ch->OFFSETCORR1;
     682:	f8 01       	movw	r30, r16
     684:	81 a5       	ldd	r24, Z+41	; 0x29
     686:	f7 01       	movw	r30, r14
     688:	86 83       	std	Z+6, r24	; 0x06
	ch_conf->gaincorr0 = adc_ch->GAINCORR0;
     68a:	f8 01       	movw	r30, r16
     68c:	82 a5       	ldd	r24, Z+42	; 0x2a
     68e:	f7 01       	movw	r30, r14
     690:	87 83       	std	Z+7, r24	; 0x07
	ch_conf->gaincorr1 = adc_ch->GAINCORR1;
     692:	f8 01       	movw	r30, r16
     694:	83 a5       	ldd	r24, Z+43	; 0x2b
     696:	f7 01       	movw	r30, r14
     698:	80 87       	std	Z+8, r24	; 0x08
	ch_conf->avgctrl = adc_ch->AVGCTRL;
     69a:	f8 01       	movw	r30, r16
     69c:	84 a5       	ldd	r24, Z+44	; 0x2c
     69e:	f7 01       	movw	r30, r14
     6a0:	81 87       	std	Z+9, r24	; 0x09
	adc_disable_clock(adc);
     6a2:	c8 01       	movw	r24, r16
     6a4:	68 de       	rcall	.-816    	; 0x376 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6a6:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     6a8:	0f 90       	pop	r0
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	df 90       	pop	r13
     6b8:	08 95       	ret

000006ba <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     6ba:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     6bc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     6be:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     6c0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     6c2:	60 83       	st	Z, r22
	ret                             // Return to caller
     6c4:	08 95       	ret

000006c6 <dac_enable_clock>:

	{
		Assert(0);
		return false;
	}
}
     6c6:	81 15       	cp	r24, r1
     6c8:	93 40       	sbci	r25, 0x03	; 3
     6ca:	59 f4       	brne	.+22     	; 0x6e2 <dac_enable_clock+0x1c>
     6cc:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <daca_enable_count>
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	98 0f       	add	r25, r24
     6d4:	90 93 69 20 	sts	0x2069, r25	; 0x802069 <daca_enable_count>
     6d8:	81 11       	cpse	r24, r1
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <dac_enable_clock+0x1c>
     6dc:	64 e0       	ldi	r22, 0x04	; 4
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	8c cd       	rjmp	.-1256   	; 0x1fa <sysclk_enable_module>
     6e2:	08 95       	ret

000006e4 <dac_disable_clock>:
     6e4:	81 15       	cp	r24, r1
     6e6:	93 40       	sbci	r25, 0x03	; 3
     6e8:	51 f4       	brne	.+20     	; 0x6fe <dac_disable_clock+0x1a>
     6ea:	80 91 69 20 	lds	r24, 0x2069	; 0x802069 <daca_enable_count>
     6ee:	81 50       	subi	r24, 0x01	; 1
     6f0:	80 93 69 20 	sts	0x2069, r24	; 0x802069 <daca_enable_count>
     6f4:	81 11       	cpse	r24, r1
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <dac_disable_clock+0x1a>
     6f8:	64 e0       	ldi	r22, 0x04	; 4
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	94 cd       	rjmp	.-1240   	; 0x226 <sysclk_disable_module>
     6fe:	08 95       	ret

00000700 <dac_enable>:
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <dac_enable+0xc>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	2f b7       	in	r18, 0x3f	; 63
     712:	2a 83       	std	Y+2, r18	; 0x02
     714:	f8 94       	cli
     716:	1a 81       	ldd	r17, Y+2	; 0x02
     718:	20 91 78 20 	lds	r18, 0x2078	; 0x802078 <sleepmgr_locks+0x1>
     71c:	2f 3f       	cpi	r18, 0xFF	; 255
     71e:	09 f4       	brne	.+2      	; 0x722 <dac_enable+0x22>
     720:	ff cf       	rjmp	.-2      	; 0x720 <dac_enable+0x20>
     722:	7c 01       	movw	r14, r24
     724:	8f b7       	in	r24, 0x3f	; 63
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	f8 94       	cli
     72a:	99 81       	ldd	r25, Y+1	; 0x01
     72c:	e7 e7       	ldi	r30, 0x77	; 119
     72e:	f0 e2       	ldi	r31, 0x20	; 32
     730:	81 81       	ldd	r24, Z+1	; 0x01
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	81 83       	std	Z+1, r24	; 0x01
     736:	9f bf       	out	0x3f, r25	; 63
     738:	c7 01       	movw	r24, r14
     73a:	c5 df       	rcall	.-118    	; 0x6c6 <dac_enable_clock>
     73c:	f7 01       	movw	r30, r14
     73e:	80 81       	ld	r24, Z
     740:	81 60       	ori	r24, 0x01	; 1
     742:	80 83       	st	Z, r24
     744:	1f bf       	out	0x3f, r17	; 63
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	08 95       	ret

00000756 <dac_write_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_write_configuration(DAC_t *dac, struct dac_config *conf)
{
     756:	9f 92       	push	r9
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	1f 92       	push	r1
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
	uint8_t    gaincal1;
	uint8_t    offsetcal1;
#endif

#if defined(DACA)
	if ((uintptr_t)dac == (uintptr_t)&DACA) {
     772:	81 15       	cp	r24, r1
     774:	23 e0       	ldi	r18, 0x03	; 3
     776:	92 07       	cpc	r25, r18
     778:	09 f0       	breq	.+2      	; 0x77c <dac_write_configuration+0x26>
     77a:	39 c0       	rjmp	.+114    	; 0x7ee <dac_write_configuration+0x98>
     77c:	7b 01       	movw	r14, r22
     77e:	8c 01       	movw	r16, r24
     780:	61 e3       	ldi	r22, 0x31	; 49
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	58 d2       	rcall	.+1200   	; 0xc38 <nvm_read_byte>
     788:	98 2e       	mov	r9, r24
     78a:	60 e3       	ldi	r22, 0x30	; 48
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	53 d2       	rcall	.+1190   	; 0xc38 <nvm_read_byte>
     792:	a8 2e       	mov	r10, r24
     794:	65 e3       	ldi	r22, 0x35	; 53
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	4e d2       	rcall	.+1180   	; 0xc38 <nvm_read_byte>
     79c:	b8 2e       	mov	r11, r24
     79e:	64 e3       	ldi	r22, 0x34	; 52
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	49 d2       	rcall	.+1170   	; 0xc38 <nvm_read_byte>
     7a6:	c8 2e       	mov	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7a8:	8f b7       	in	r24, 0x3f	; 63
     7aa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7ac:	f8 94       	cli
	return flags;
     7ae:	d9 80       	ldd	r13, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     7b0:	c8 01       	movw	r24, r16
     7b2:	89 df       	rcall	.-238    	; 0x6c6 <dac_enable_clock>

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     7b4:	f8 01       	movw	r30, r16
     7b6:	90 81       	ld	r25, Z
	dac->CTRLA = 0;
     7b8:	10 82       	st	Z, r1

	dac->CTRLB = conf->ctrlb;
     7ba:	f7 01       	movw	r30, r14
     7bc:	81 81       	ldd	r24, Z+1	; 0x01
     7be:	f8 01       	movw	r30, r16
     7c0:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = conf->ctrlc;
     7c2:	f7 01       	movw	r30, r14
     7c4:	82 81       	ldd	r24, Z+2	; 0x02
     7c6:	f8 01       	movw	r30, r16
     7c8:	82 83       	std	Z+2, r24	; 0x02
	dac->EVCTRL = conf->evctrl;
     7ca:	f7 01       	movw	r30, r14
     7cc:	83 81       	ldd	r24, Z+3	; 0x03
     7ce:	f8 01       	movw	r30, r16
     7d0:	83 83       	std	Z+3, r24	; 0x03
	dac->TIMCTRL = conf->timctrl;

	dac->GAINCAL = gaincal0;
	dac->OFFSETCAL = offsetcal0;
#elif XMEGA_DAC_VERSION_2
	dac->CH0GAINCAL = gaincal0;
     7d2:	90 86       	std	Z+8, r9	; 0x08
	dac->CH0OFFSETCAL = offsetcal0;
     7d4:	a1 86       	std	Z+9, r10	; 0x09
	dac->CH1GAINCAL = gaincal1;
     7d6:	b2 86       	std	Z+10, r11	; 0x0a
	dac->CH1OFFSETCAL = offsetcal1;
     7d8:	c3 86       	std	Z+11, r12	; 0x0b

	flags = cpu_irq_save();
	dac_enable_clock(dac);

	// Temporarily disable the DAC, remember if it was enabled.
	enable = dac->CTRLA & DAC_ENABLE_bm;
     7da:	89 2f       	mov	r24, r25
     7dc:	81 70       	andi	r24, 0x01	; 1
	dac->CH0OFFSETCAL = offsetcal0;
	dac->CH1GAINCAL = gaincal1;
	dac->CH1OFFSETCAL = offsetcal1;
#endif

	dac->CTRLA = conf->ctrla | enable;
     7de:	f7 01       	movw	r30, r14
     7e0:	90 81       	ld	r25, Z
     7e2:	89 2b       	or	r24, r25
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 83       	st	Z, r24

	dac_disable_clock(dac);
     7e8:	c8 01       	movw	r24, r16
     7ea:	7c df       	rcall	.-264    	; 0x6e4 <dac_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7ec:	df be       	out	0x3f, r13	; 63
	cpu_irq_restore(flags);
}
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	af 90       	pop	r10
     804:	9f 90       	pop	r9
     806:	08 95       	ret

00000808 <dac_read_configuration>:
 *
 * \param dac Pointer to DAC module.
 * \param conf Pointer to DAC configuration.
 */
void dac_read_configuration(DAC_t *dac, struct dac_config *conf)
{
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	8c 01       	movw	r16, r24
     81e:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     820:	8f b7       	in	r24, 0x3f	; 63
     822:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     824:	f8 94       	cli
	return flags;
     826:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags;

	flags = cpu_irq_save();
	dac_enable_clock(dac);
     828:	c8 01       	movw	r24, r16
     82a:	4d df       	rcall	.-358    	; 0x6c6 <dac_enable_clock>

	conf->ctrla = dac->CTRLA & ~DAC_ENABLE_bm;
     82c:	f8 01       	movw	r30, r16
     82e:	80 81       	ld	r24, Z
     830:	8e 7f       	andi	r24, 0xFE	; 254
     832:	f7 01       	movw	r30, r14
     834:	80 83       	st	Z, r24
	conf->ctrlb = dac->CTRLB;
     836:	f8 01       	movw	r30, r16
     838:	81 81       	ldd	r24, Z+1	; 0x01
     83a:	f7 01       	movw	r30, r14
     83c:	81 83       	std	Z+1, r24	; 0x01
	conf->ctrlc = dac->CTRLC;
     83e:	f8 01       	movw	r30, r16
     840:	82 81       	ldd	r24, Z+2	; 0x02
     842:	f7 01       	movw	r30, r14
     844:	82 83       	std	Z+2, r24	; 0x02
	conf->evctrl = dac->EVCTRL;
     846:	f8 01       	movw	r30, r16
     848:	83 81       	ldd	r24, Z+3	; 0x03
     84a:	f7 01       	movw	r30, r14
     84c:	83 83       	std	Z+3, r24	; 0x03

#if XMEGA_DAC_VERSION_1
	conf->timctrl = dac->TIMCTRL;
#endif

	dac_disable_clock(dac);
     84e:	c8 01       	movw	r24, r16
     850:	49 df       	rcall	.-366    	; 0x6e4 <dac_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     852:	df be       	out	0x3f, r13	; 63
	cpu_irq_restore(flags);
}
     854:	0f 90       	pop	r0
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	08 95       	ret

00000866 <nvm_eeprom_read_buffer>:
	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);

	// Restore command register
	NVM.CMD = old_cmd;
}
     866:	9c 01       	movw	r18, r24
     868:	db 01       	movw	r26, r22
     86a:	e0 ec       	ldi	r30, 0xC0	; 192
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	97 85       	ldd	r25, Z+15	; 0x0f
     870:	99 23       	and	r25, r25
     872:	ec f3       	brlt	.-6      	; 0x86e <nvm_eeprom_read_buffer+0x8>
     874:	b9 01       	movw	r22, r18
     876:	70 5f       	subi	r23, 0xF0	; 240
     878:	cd 01       	movw	r24, r26
     87a:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <memcpy>
     87e:	08 95       	ret

00000880 <nvm_eeprom_flush_buffer>:
     880:	e0 ec       	ldi	r30, 0xC0	; 192
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	87 85       	ldd	r24, Z+15	; 0x0f
     886:	88 23       	and	r24, r24
     888:	ec f3       	brlt	.-6      	; 0x884 <nvm_eeprom_flush_buffer+0x4>
     88a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
     88e:	81 ff       	sbrs	r24, 1
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <nvm_eeprom_flush_buffer+0x20>
     892:	86 e3       	ldi	r24, 0x36	; 54
     894:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	8b ec       	ldi	r24, 0xCB	; 203
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0d cf       	rjmp	.-486    	; 0x6ba <ccp_write_io>
     8a0:	08 95       	ret

000008a2 <nvm_eeprom_load_byte_to_buffer>:
     8a2:	e0 ec       	ldi	r30, 0xC0	; 192
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	97 85       	ldd	r25, Z+15	; 0x0f
     8a8:	99 23       	and	r25, r25
     8aa:	ec f3       	brlt	.-6      	; 0x8a6 <nvm_eeprom_load_byte_to_buffer+0x4>
     8ac:	e8 2f       	mov	r30, r24
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	f0 5f       	subi	r31, 0xF0	; 240
     8b2:	60 83       	st	Z, r22
     8b4:	08 95       	ret

000008b6 <nvm_eeprom_write_byte>:
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	18 2f       	mov	r17, r24
     8c2:	f9 2e       	mov	r15, r25
     8c4:	c6 2f       	mov	r28, r22
     8c6:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     8ca:	da df       	rcall	.-76     	; 0x880 <nvm_eeprom_flush_buffer>
     8cc:	e0 ec       	ldi	r30, 0xC0	; 192
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	27 85       	ldd	r18, Z+15	; 0x0f
     8d2:	22 23       	and	r18, r18
     8d4:	ec f3       	brlt	.-6      	; 0x8d0 <nvm_eeprom_write_byte+0x1a>
     8d6:	6c 2f       	mov	r22, r28
     8d8:	81 2f       	mov	r24, r17
     8da:	e3 df       	rcall	.-58     	; 0x8a2 <nvm_eeprom_load_byte_to_buffer>
     8dc:	c0 ec       	ldi	r28, 0xC0	; 192
     8de:	d1 e0       	ldi	r29, 0x01	; 1
     8e0:	1a 82       	std	Y+2, r1	; 0x02
     8e2:	f9 82       	std	Y+1, r15	; 0x01
     8e4:	18 83       	st	Y, r17
     8e6:	85 e3       	ldi	r24, 0x35	; 53
     8e8:	8a 87       	std	Y+10, r24	; 0x0a
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	8b ec       	ldi	r24, 0xCB	; 203
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	e4 de       	rcall	.-568    	; 0x6ba <ccp_write_io>
     8f2:	0a 87       	std	Y+10, r16	; 0x0a
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	08 95       	ret

00000900 <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	db 01       	movw	r26, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     906:	e0 ec       	ldi	r30, 0xC0	; 192
     908:	f1 e0       	ldi	r31, 0x01	; 1
     90a:	27 85       	ldd	r18, Z+15	; 0x0f
     90c:	22 23       	and	r18, r18
     90e:	ec f3       	brlt	.-6      	; 0x90a <nvm_flash_read_buffer+0xa>
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
     910:	41 15       	cp	r20, r1
     912:	51 05       	cpc	r21, r1
     914:	69 f0       	breq	.+26     	; 0x930 <nvm_flash_read_buffer+0x30>
     916:	4a 0f       	add	r20, r26
     918:	5b 1f       	adc	r21, r27
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
     91a:	8c 01       	movw	r16, r24
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	2b bf       	out	0x3b, r18	; 59
     922:	f8 01       	movw	r30, r16
     924:	07 91       	elpm	r16, Z+
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
     926:	0d 93       	st	X+, r16
		buf=(uint8_t*)buf+1;
		opt_address++;
     928:	01 96       	adiw	r24, 0x01	; 1
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
     92a:	a4 17       	cp	r26, r20
     92c:	b5 07       	cpc	r27, r21
     92e:	a9 f7       	brne	.-22     	; 0x91a <nvm_flash_read_buffer+0x1a>
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	7b 01       	movw	r14, r22
     944:	ea 01       	movw	r28, r20
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
     946:	8c 01       	movw	r16, r24
     948:	0f 77       	andi	r16, 0x7F	; 127
     94a:	11 27       	eor	r17, r17
	while ( len ) {
     94c:	20 97       	sbiw	r28, 0x00	; 0
     94e:	51 f0       	breq	.+20     	; 0x964 <nvm_user_sig_read_buffer+0x2e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
     950:	b8 01       	movw	r22, r16
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	71 d1       	rcall	.+738    	; 0xc38 <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
     956:	f7 01       	movw	r30, r14
     958:	81 93       	st	Z+, r24
     95a:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
     95c:	0f 5f       	subi	r16, 0xFF	; 255
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
		len--;
     960:	21 97       	sbiw	r28, 0x01	; 1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
     962:	b1 f7       	brne	.-20     	; 0x950 <nvm_user_sig_read_buffer+0x1a>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	08 95       	ret

00000972 <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
     972:	2f 92       	push	r2
     974:	3f 92       	push	r3
     976:	4f 92       	push	r4
     978:	5f 92       	push	r5
     97a:	6f 92       	push	r6
     97c:	7f 92       	push	r7
     97e:	8f 92       	push	r8
     980:	9f 92       	push	r9
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	00 d0       	rcall	.+0      	; 0x998 <nvm_user_sig_write_buffer+0x26>
     998:	00 d0       	rcall	.+0      	; 0x99a <nvm_user_sig_write_buffer+0x28>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	5c 01       	movw	r10, r24
     9a0:	6b 83       	std	Y+3, r22	; 0x03
     9a2:	7c 83       	std	Y+4, r23	; 0x04
     9a4:	7a 01       	movw	r14, r20
     9a6:	32 2e       	mov	r3, r18
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
     9a8:	45 2b       	or	r20, r21
     9aa:	09 f0       	breq	.+2      	; 0x9ae <nvm_user_sig_write_buffer+0x3c>
     9ac:	4e c0       	rjmp	.+156    	; 0xa4a <nvm_user_sig_write_buffer+0xd8>
     9ae:	64 c0       	rjmp	.+200    	; 0xa78 <nvm_user_sig_write_buffer+0x106>
     9b0:	62 01       	movw	r12, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
     9b2:	33 20       	and	r3, r3
     9b4:	79 f0       	breq	.+30     	; 0x9d4 <nvm_user_sig_write_buffer+0x62>
     9b6:	b2 01       	movw	r22, r4
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	3e d1       	rcall	.+636    	; 0xc38 <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
     9bc:	89 83       	std	Y+1, r24	; 0x01
     9be:	b8 01       	movw	r22, r16
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	3a d1       	rcall	.+628    	; 0xc38 <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
     9c4:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	29 f0       	breq	.+10     	; 0x9d8 <nvm_user_sig_write_buffer+0x66>
					b_flag_erase = true; // The page is not empty
     9ce:	22 24       	eor	r2, r2
     9d0:	23 94       	inc	r2
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <nvm_user_sig_write_buffer+0x66>
				}
			}else{
				w_value = 0xFFFF;
     9d4:	89 82       	std	Y+1, r8	; 0x01
     9d6:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
     9d8:	e1 14       	cp	r14, r1
     9da:	f1 04       	cpc	r15, r1
     9dc:	09 f1       	breq	.+66     	; 0xa20 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == page_pos) {
     9de:	ac 14       	cp	r10, r12
     9e0:	bd 04       	cpc	r11, r13
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <nvm_user_sig_write_buffer+0x74>
     9e4:	55 c0       	rjmp	.+170    	; 0xa90 <nvm_user_sig_write_buffer+0x11e>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	e8 1a       	sub	r14, r24
     9ea:	f1 08       	sbc	r15, r1
					opt_address++;
					LSB(w_value)=*(uint8_t*)buf;
     9ec:	eb 81       	ldd	r30, Y+3	; 0x03
     9ee:	fc 81       	ldd	r31, Y+4	; 0x04
     9f0:	81 91       	ld	r24, Z+
     9f2:	eb 83       	std	Y+3, r30	; 0x03
     9f4:	fc 83       	std	Y+4, r31	; 0x04
     9f6:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
     9f8:	e1 14       	cp	r14, r1
     9fa:	f1 04       	cpc	r15, r1
     9fc:	21 f4       	brne	.+8      	; 0xa06 <nvm_user_sig_write_buffer+0x94>
			if (len) {
				if (opt_address == page_pos) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
					opt_address++;
     9fe:	ff ef       	ldi	r31, 0xFF	; 255
     a00:	af 1a       	sub	r10, r31
     a02:	bf 0a       	sbc	r11, r31
     a04:	0d c0       	rjmp	.+26     	; 0xa20 <nvm_user_sig_write_buffer+0xae>
			}
			if (len) {
				if (opt_address == (page_pos+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	e2 1a       	sub	r14, r18
     a0a:	f1 08       	sbc	r15, r1
     a0c:	56 01       	movw	r10, r12
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	a8 0e       	add	r10, r24
     a12:	b1 1c       	adc	r11, r1
					opt_address++;
					MSB(w_value)=*(uint8_t*)buf;
     a14:	eb 81       	ldd	r30, Y+3	; 0x03
     a16:	fc 81       	ldd	r31, Y+4	; 0x04
     a18:	81 91       	ld	r24, Z+
     a1a:	eb 83       	std	Y+3, r30	; 0x03
     a1c:	fc 83       	std	Y+4, r31	; 0x04
     a1e:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
     a20:	49 81       	ldd	r20, Y+1	; 0x01
     a22:	5a 81       	ldd	r21, Y+2	; 0x02
     a24:	c3 01       	movw	r24, r6
     a26:	b2 01       	movw	r22, r4
     a28:	0e 94 0f 40 	call	0x801e	; 0x801e <nvm_flash_load_word_to_buffer>
     a2c:	f2 e0       	ldi	r31, 0x02	; 2
     a2e:	4f 0e       	add	r4, r31
     a30:	51 1c       	adc	r5, r1
     a32:	61 1c       	adc	r6, r1
     a34:	71 1c       	adc	r7, r1
     a36:	0e 5f       	subi	r16, 0xFE	; 254
     a38:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
     a3a:	01 38       	cpi	r16, 0x81	; 129
     a3c:	11 05       	cpc	r17, r1
     a3e:	09 f0       	breq	.+2      	; 0xa42 <nvm_user_sig_write_buffer+0xd0>
     a40:	b7 cf       	rjmp	.-146    	; 0x9b0 <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
     a42:	e1 14       	cp	r14, r1
     a44:	f1 04       	cpc	r15, r1
     a46:	29 f4       	brne	.+10     	; 0xa52 <nvm_user_sig_write_buffer+0xe0>
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <nvm_user_sig_write_buffer+0xec>
     a4a:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
     a4c:	88 24       	eor	r8, r8
     a4e:	8a 94       	dec	r8
     a50:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
     a52:	01 e0       	ldi	r16, 0x01	; 1
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	41 2c       	mov	r4, r1
     a58:	51 2c       	mov	r5, r1
     a5a:	32 01       	movw	r6, r4
     a5c:	a9 cf       	rjmp	.-174    	; 0x9b0 <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
     a5e:	22 20       	and	r2, r2
     a60:	59 f0       	breq	.+22     	; 0xa78 <nvm_user_sig_write_buffer+0x106>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     a62:	e0 ec       	ldi	r30, 0xC0	; 192
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	87 85       	ldd	r24, Z+15	; 0x0f
     a68:	88 23       	and	r24, r24
     a6a:	ec f3       	brlt	.-6      	; 0xa66 <nvm_user_sig_write_buffer+0xf4>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
     a6c:	48 e1       	ldi	r20, 0x18	; 24
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	cb 01       	movw	r24, r22
     a74:	0e 94 00 40 	call	0x8000	; 0x8000 <nvm_common_spm>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     a78:	e0 ec       	ldi	r30, 0xC0	; 192
     a7a:	f1 e0       	ldi	r31, 0x01	; 1
     a7c:	87 85       	ldd	r24, Z+15	; 0x0f
     a7e:	88 23       	and	r24, r24
     a80:	ec f3       	brlt	.-6      	; 0xa7c <nvm_user_sig_write_buffer+0x10a>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
     a82:	4a e1       	ldi	r20, 0x1A	; 26
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	cb 01       	movw	r24, r22
     a8a:	0e 94 00 40 	call	0x8000	; 0x8000 <nvm_common_spm>
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <nvm_user_sig_write_buffer+0x126>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_pos+1)) {
     a90:	a0 16       	cp	r10, r16
     a92:	b1 06       	cpc	r11, r17
     a94:	29 f6       	brne	.-118    	; 0xa20 <nvm_user_sig_write_buffer+0xae>
     a96:	b7 cf       	rjmp	.-146    	; 0xa06 <nvm_user_sig_write_buffer+0x94>
	// Write flash buffer
	if (b_flag_erase) {
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
     a98:	24 96       	adiw	r28, 0x04	; 4
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	bf 90       	pop	r11
     ab0:	af 90       	pop	r10
     ab2:	9f 90       	pop	r9
     ab4:	8f 90       	pop	r8
     ab6:	7f 90       	pop	r7
     ab8:	6f 90       	pop	r6
     aba:	5f 90       	pop	r5
     abc:	4f 90       	pop	r4
     abe:	3f 90       	pop	r3
     ac0:	2f 90       	pop	r2
     ac2:	08 95       	ret

00000ac4 <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
     ac4:	2f 92       	push	r2
     ac6:	3f 92       	push	r3
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <nvm_flash_erase_and_write_buffer+0x26>
     aea:	00 d0       	rcall	.+0      	; 0xaec <nvm_flash_erase_and_write_buffer+0x28>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	5c 01       	movw	r10, r24
     af2:	3b 01       	movw	r6, r22
     af4:	7a 01       	movw	r14, r20
     af6:	32 2e       	mov	r3, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
     af8:	80 78       	andi	r24, 0x80	; 128

	// For each page
	while ( len ) {
     afa:	45 2b       	or	r20, r21
     afc:	09 f4       	brne	.+2      	; 0xb00 <nvm_flash_erase_and_write_buffer+0x3c>
     afe:	86 c0       	rjmp	.+268    	; 0xc0c <nvm_flash_erase_and_write_buffer+0x148>
     b00:	8b 83       	std	Y+3, r24	; 0x03
     b02:	9c 83       	std	Y+4, r25	; 0x04
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     b04:	0f 2e       	mov	r0, r31
     b06:	f0 ec       	ldi	r31, 0xC0	; 192
     b08:	4f 2e       	mov	r4, r31
     b0a:	55 24       	eor	r5, r5
     b0c:	53 94       	inc	r5
     b0e:	f0 2d       	mov	r31, r0
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
     b10:	88 24       	eor	r8, r8
     b12:	8a 94       	dec	r8
     b14:	98 2c       	mov	r9, r8
     b16:	f2 01       	movw	r30, r4
     b18:	87 85       	ldd	r24, Z+15	; 0x0f
     b1a:	88 23       	and	r24, r24
     b1c:	e4 f3       	brlt	.-8      	; 0xb16 <nvm_flash_erase_and_write_buffer+0x52>
     b1e:	cb 80       	ldd	r12, Y+3	; 0x03
     b20:	dc 80       	ldd	r13, Y+4	; 0x04
     b22:	f1 e8       	ldi	r31, 0x81	; 129
     b24:	cf 0e       	add	r12, r31
     b26:	d1 1c       	adc	r13, r1
     b28:	0b 81       	ldd	r16, Y+3	; 0x03
     b2a:	1c 81       	ldd	r17, Y+4	; 0x04
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	21 2c       	mov	r2, r1
     b32:	b8 01       	movw	r22, r16
     b34:	61 50       	subi	r22, 0x01	; 1
     b36:	71 09       	sbc	r23, r1
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
     b38:	33 20       	and	r3, r3
     b3a:	71 f0       	breq	.+28     	; 0xb58 <nvm_flash_erase_and_write_buffer+0x94>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
     b3c:	cb 01       	movw	r24, r22
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ab bf       	out	0x3b, r26	; 59
     b44:	fc 01       	movw	r30, r24
     b46:	87 91       	elpm	r24, Z+
     b48:	96 91       	elpm	r25, Z
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	29 f0       	breq	.+10     	; 0xb5c <nvm_flash_erase_and_write_buffer+0x98>
					b_flag_erase = true; // The page is not empty
     b52:	22 24       	eor	r2, r2
     b54:	23 94       	inc	r2
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <nvm_flash_erase_and_write_buffer+0x98>
				}
			}else{
				w_value = 0xFFFF;
     b58:	89 82       	std	Y+1, r8	; 0x01
     b5a:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
     b5c:	e1 14       	cp	r14, r1
     b5e:	f1 04       	cpc	r15, r1
     b60:	d9 f0       	breq	.+54     	; 0xb98 <nvm_flash_erase_and_write_buffer+0xd4>
				if (opt_address == page_address) {
     b62:	6a 15       	cp	r22, r10
     b64:	7b 05       	cpc	r23, r11
     b66:	09 f0       	breq	.+2      	; 0xb6a <nvm_flash_erase_and_write_buffer+0xa6>
     b68:	4d c0       	rjmp	.+154    	; 0xc04 <nvm_flash_erase_and_write_buffer+0x140>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
     b6a:	31 e0       	ldi	r19, 0x01	; 1
     b6c:	e3 1a       	sub	r14, r19
     b6e:	f1 08       	sbc	r15, r1
					opt_address++;
					LSB(w_value)=*(uint8_t*)buf;
     b70:	f3 01       	movw	r30, r6
     b72:	81 91       	ld	r24, Z+
     b74:	3f 01       	movw	r6, r30
     b76:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
     b78:	e1 14       	cp	r14, r1
     b7a:	f1 04       	cpc	r15, r1
     b7c:	11 f4       	brne	.+4      	; 0xb82 <nvm_flash_erase_and_write_buffer+0xbe>
			if (len) {
				if (opt_address == page_address) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
					opt_address++;
     b7e:	58 01       	movw	r10, r16
     b80:	0b c0       	rjmp	.+22     	; 0xb98 <nvm_flash_erase_and_write_buffer+0xd4>
			}
			if (len) {
				if (opt_address == (page_address+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	ef 1a       	sub	r14, r31
     b86:	f1 08       	sbc	r15, r1
					opt_address++;
     b88:	58 01       	movw	r10, r16
     b8a:	2f ef       	ldi	r18, 0xFF	; 255
     b8c:	a2 1a       	sub	r10, r18
     b8e:	b2 0a       	sbc	r11, r18
					MSB(w_value)=*(uint8_t*)buf;
     b90:	f3 01       	movw	r30, r6
     b92:	81 91       	ld	r24, Z+
     b94:	3f 01       	movw	r6, r30
     b96:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
     b98:	49 81       	ldd	r20, Y+1	; 0x01
     b9a:	5a 81       	ldd	r21, Y+2	; 0x02
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 0f 40 	call	0x801e	; 0x801e <nvm_flash_load_word_to_buffer>
     ba4:	0e 5f       	subi	r16, 0xFE	; 254
     ba6:	1f 4f       	sbci	r17, 0xFF	; 255
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
     ba8:	0c 15       	cp	r16, r12
     baa:	1d 05       	cpc	r17, r13
     bac:	09 f0       	breq	.+2      	; 0xbb0 <nvm_flash_erase_and_write_buffer+0xec>
     bae:	c1 cf       	rjmp	.-126    	; 0xb32 <nvm_flash_erase_and_write_buffer+0x6e>
     bb0:	87 01       	movw	r16, r14
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
     bb2:	22 20       	and	r2, r2
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <nvm_flash_erase_and_write_buffer+0x110>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     bb6:	f2 01       	movw	r30, r4
     bb8:	87 85       	ldd	r24, Z+15	; 0x0f
     bba:	88 23       	and	r24, r24
     bbc:	e4 f3       	brlt	.-8      	; 0xbb6 <nvm_flash_erase_and_write_buffer+0xf2>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
     bbe:	2b 81       	ldd	r18, Y+3	; 0x03
     bc0:	3c 81       	ldd	r19, Y+4	; 0x04
     bc2:	c9 01       	movw	r24, r18
     bc4:	a0 e0       	ldi	r26, 0x00	; 0
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	45 e2       	ldi	r20, 0x25	; 37
     bca:	bc 01       	movw	r22, r24
     bcc:	cd 01       	movw	r24, r26
     bce:	0e 94 00 40 	call	0x8000	; 0x8000 <nvm_common_spm>
     bd2:	0e c0       	rjmp	.+28     	; 0xbf0 <nvm_flash_erase_and_write_buffer+0x12c>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     bd4:	f2 01       	movw	r30, r4
     bd6:	87 85       	ldd	r24, Z+15	; 0x0f
     bd8:	88 23       	and	r24, r24
     bda:	e4 f3       	brlt	.-8      	; 0xbd4 <nvm_flash_erase_and_write_buffer+0x110>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	c9 01       	movw	r24, r18
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	44 e2       	ldi	r20, 0x24	; 36
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 00 40 	call	0x8000	; 0x8000 <nvm_common_spm>
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	80 58       	subi	r24, 0x80	; 128
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	9c 83       	std	Y+4, r25	; 0x04

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
     bfc:	01 2b       	or	r16, r17
     bfe:	09 f0       	breq	.+2      	; 0xc02 <nvm_flash_erase_and_write_buffer+0x13e>
     c00:	8a cf       	rjmp	.-236    	; 0xb16 <nvm_flash_erase_and_write_buffer+0x52>
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <nvm_flash_erase_and_write_buffer+0x148>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_address+1)) {
     c04:	0a 15       	cp	r16, r10
     c06:	1b 05       	cpc	r17, r11
     c08:	39 f6       	brne	.-114    	; 0xb98 <nvm_flash_erase_and_write_buffer+0xd4>
     c0a:	bb cf       	rjmp	.-138    	; 0xb82 <nvm_flash_erase_and_write_buffer+0xbe>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
     c0c:	24 96       	adiw	r28, 0x04	; 4
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	7f 90       	pop	r7
     c2c:	6f 90       	pop	r6
     c2e:	5f 90       	pop	r5
     c30:	4f 90       	pop	r4
     c32:	3f 90       	pop	r3
     c34:	2f 90       	pop	r2
     c36:	08 95       	ret

00000c38 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     c38:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     c3c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     c3e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     c40:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     c44:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     c46:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     c4a:	08 95       	ret

00000c4c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     c4c:	fc 01       	movw	r30, r24
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	95 ff       	sbrs	r25, 5
     c52:	fd cf       	rjmp	.-6      	; 0xc4e <usart_putchar+0x2>
     c54:	60 83       	st	Z, r22
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	08 95       	ret

00000c5c <usart_getchar>:
     c5c:	fc 01       	movw	r30, r24
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	99 23       	and	r25, r25
     c62:	ec f7       	brge	.-6      	; 0xc5e <usart_getchar+0x2>
     c64:	80 81       	ld	r24, Z
     c66:	08 95       	ret

00000c68 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     c68:	2f 92       	push	r2
     c6a:	3f 92       	push	r3
     c6c:	4f 92       	push	r4
     c6e:	5f 92       	push	r5
     c70:	6f 92       	push	r6
     c72:	7f 92       	push	r7
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	1c 01       	movw	r2, r24
     c8c:	2a 01       	movw	r4, r20
     c8e:	3b 01       	movw	r6, r22
     c90:	48 01       	movw	r8, r16
     c92:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     c94:	d9 01       	movw	r26, r18
     c96:	c8 01       	movw	r24, r16
     c98:	68 94       	set
     c9a:	12 f8       	bld	r1, 2
     c9c:	b6 95       	lsr	r27
     c9e:	a7 95       	ror	r26
     ca0:	97 95       	ror	r25
     ca2:	87 95       	ror	r24
     ca4:	16 94       	lsr	r1
     ca6:	d1 f7       	brne	.-12     	; 0xc9c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     ca8:	b9 01       	movw	r22, r18
     caa:	a8 01       	movw	r20, r16
     cac:	03 2e       	mov	r0, r19
     cae:	36 e1       	ldi	r19, 0x16	; 22
     cb0:	76 95       	lsr	r23
     cb2:	67 95       	ror	r22
     cb4:	57 95       	ror	r21
     cb6:	47 95       	ror	r20
     cb8:	3a 95       	dec	r19
     cba:	d1 f7       	brne	.-12     	; 0xcb0 <usart_set_baudrate+0x48>
     cbc:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     cbe:	f1 01       	movw	r30, r2
     cc0:	23 81       	ldd	r18, Z+3	; 0x03
     cc2:	22 fd       	sbrc	r18, 2
     cc4:	08 c0       	rjmp	.+16     	; 0xcd6 <usart_set_baudrate+0x6e>
		max_rate /= 2;
     cc6:	b6 95       	lsr	r27
     cc8:	a7 95       	ror	r26
     cca:	97 95       	ror	r25
     ccc:	87 95       	ror	r24
		min_rate /= 2;
     cce:	76 95       	lsr	r23
     cd0:	67 95       	ror	r22
     cd2:	57 95       	ror	r21
     cd4:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     cd6:	84 15       	cp	r24, r4
     cd8:	95 05       	cpc	r25, r5
     cda:	a6 05       	cpc	r26, r6
     cdc:	b7 05       	cpc	r27, r7
     cde:	08 f4       	brcc	.+2      	; 0xce2 <usart_set_baudrate+0x7a>
     ce0:	ab c0       	rjmp	.+342    	; 0xe38 <usart_set_baudrate+0x1d0>
     ce2:	44 16       	cp	r4, r20
     ce4:	55 06       	cpc	r5, r21
     ce6:	66 06       	cpc	r6, r22
     ce8:	77 06       	cpc	r7, r23
     cea:	08 f4       	brcc	.+2      	; 0xcee <usart_set_baudrate+0x86>
     cec:	a7 c0       	rjmp	.+334    	; 0xe3c <usart_set_baudrate+0x1d4>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     cee:	f1 01       	movw	r30, r2
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	82 fd       	sbrc	r24, 2
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <usart_set_baudrate+0x96>
		baud *= 2;
     cf6:	44 0c       	add	r4, r4
     cf8:	55 1c       	adc	r5, r5
     cfa:	66 1c       	adc	r6, r6
     cfc:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     cfe:	c5 01       	movw	r24, r10
     d00:	b4 01       	movw	r22, r8
     d02:	a3 01       	movw	r20, r6
     d04:	92 01       	movw	r18, r4
     d06:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     d0a:	2f 3f       	cpi	r18, 0xFF	; 255
     d0c:	31 05       	cpc	r19, r1
     d0e:	41 05       	cpc	r20, r1
     d10:	51 05       	cpc	r21, r1
     d12:	08 f4       	brcc	.+2      	; 0xd16 <usart_set_baudrate+0xae>
     d14:	95 c0       	rjmp	.+298    	; 0xe40 <usart_set_baudrate+0x1d8>
     d16:	c1 2c       	mov	r12, r1
     d18:	d1 2c       	mov	r13, r1
     d1a:	76 01       	movw	r14, r12
     d1c:	ca 94       	dec	r12
     d1e:	c9 ef       	ldi	r28, 0xF9	; 249
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <usart_set_baudrate+0xc4>
     d22:	2c 15       	cp	r18, r12
     d24:	3d 05       	cpc	r19, r13
     d26:	4e 05       	cpc	r20, r14
     d28:	5f 05       	cpc	r21, r15
     d2a:	68 f0       	brcs	.+26     	; 0xd46 <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
     d2c:	cc 0c       	add	r12, r12
     d2e:	dd 1c       	adc	r13, r13
     d30:	ee 1c       	adc	r14, r14
     d32:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     d34:	cd 3f       	cpi	r28, 0xFD	; 253
     d36:	14 f4       	brge	.+4      	; 0xd3c <usart_set_baudrate+0xd4>
			limit |= 1;
     d38:	68 94       	set
     d3a:	c0 f8       	bld	r12, 0
     d3c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     d3e:	c7 30       	cpi	r28, 0x07	; 7
     d40:	81 f7       	brne	.-32     	; 0xd22 <usart_set_baudrate+0xba>
     d42:	8c 2f       	mov	r24, r28
     d44:	54 c0       	rjmp	.+168    	; 0xdee <usart_set_baudrate+0x186>
     d46:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     d48:	cc 23       	and	r28, r28
     d4a:	0c f0       	brlt	.+2      	; 0xd4e <usart_set_baudrate+0xe6>
     d4c:	50 c0       	rjmp	.+160    	; 0xdee <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     d4e:	d3 01       	movw	r26, r6
     d50:	c2 01       	movw	r24, r4
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	aa 1f       	adc	r26, r26
     d58:	bb 1f       	adc	r27, r27
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	aa 1f       	adc	r26, r26
     d60:	bb 1f       	adc	r27, r27
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	aa 1f       	adc	r26, r26
     d68:	bb 1f       	adc	r27, r27
     d6a:	85 01       	movw	r16, r10
     d6c:	74 01       	movw	r14, r8
     d6e:	e8 1a       	sub	r14, r24
     d70:	f9 0a       	sbc	r15, r25
     d72:	0a 0b       	sbc	r16, r26
     d74:	1b 0b       	sbc	r17, r27
     d76:	d8 01       	movw	r26, r16
     d78:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     d7a:	ce 3f       	cpi	r28, 0xFE	; 254
     d7c:	ec f4       	brge	.+58     	; 0xdb8 <usart_set_baudrate+0x150>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     d7e:	2d ef       	ldi	r18, 0xFD	; 253
     d80:	3f ef       	ldi	r19, 0xFF	; 255
     d82:	2c 1b       	sub	r18, r28
     d84:	31 09       	sbc	r19, r1
     d86:	c7 fd       	sbrc	r28, 7
     d88:	33 95       	inc	r19
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <usart_set_baudrate+0x12c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	aa 1f       	adc	r26, r26
     d92:	bb 1f       	adc	r27, r27
     d94:	2a 95       	dec	r18
     d96:	d2 f7       	brpl	.-12     	; 0xd8c <usart_set_baudrate+0x124>
     d98:	73 01       	movw	r14, r6
     d9a:	62 01       	movw	r12, r4
     d9c:	f6 94       	lsr	r15
     d9e:	e7 94       	ror	r14
     da0:	d7 94       	ror	r13
     da2:	c7 94       	ror	r12
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	6c 0d       	add	r22, r12
     daa:	7d 1d       	adc	r23, r13
     dac:	8e 1d       	adc	r24, r14
     dae:	9f 1d       	adc	r25, r15
     db0:	a3 01       	movw	r20, r6
     db2:	92 01       	movw	r18, r4
     db4:	f5 d7       	rcall	.+4074   	; 0x1da0 <__udivmodsi4>
     db6:	36 c0       	rjmp	.+108    	; 0xe24 <usart_set_baudrate+0x1bc>
		} else {
			baud <<= exp + 3;
     db8:	23 e0       	ldi	r18, 0x03	; 3
     dba:	2c 0f       	add	r18, r28
     dbc:	83 01       	movw	r16, r6
     dbe:	72 01       	movw	r14, r4
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <usart_set_baudrate+0x162>
     dc2:	ee 0c       	add	r14, r14
     dc4:	ff 1c       	adc	r15, r15
     dc6:	00 1f       	adc	r16, r16
     dc8:	11 1f       	adc	r17, r17
     dca:	2a 95       	dec	r18
     dcc:	d2 f7       	brpl	.-12     	; 0xdc2 <usart_set_baudrate+0x15a>
     dce:	a8 01       	movw	r20, r16
     dd0:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     dd2:	67 01       	movw	r12, r14
     dd4:	78 01       	movw	r14, r16
     dd6:	f6 94       	lsr	r15
     dd8:	e7 94       	ror	r14
     dda:	d7 94       	ror	r13
     ddc:	c7 94       	ror	r12
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	6c 0d       	add	r22, r12
     de4:	7d 1d       	adc	r23, r13
     de6:	8e 1d       	adc	r24, r14
     de8:	9f 1d       	adc	r25, r15
     dea:	da d7       	rcall	.+4020   	; 0x1da0 <__udivmodsi4>
     dec:	1b c0       	rjmp	.+54     	; 0xe24 <usart_set_baudrate+0x1bc>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     dee:	8d 5f       	subi	r24, 0xFD	; 253
     df0:	a3 01       	movw	r20, r6
     df2:	92 01       	movw	r18, r4
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <usart_set_baudrate+0x196>
     df6:	22 0f       	add	r18, r18
     df8:	33 1f       	adc	r19, r19
     dfa:	44 1f       	adc	r20, r20
     dfc:	55 1f       	adc	r21, r21
     dfe:	8a 95       	dec	r24
     e00:	d2 f7       	brpl	.-12     	; 0xdf6 <usart_set_baudrate+0x18e>
		div = (cpu_hz + baud / 2) / baud - 1;
     e02:	da 01       	movw	r26, r20
     e04:	c9 01       	movw	r24, r18
     e06:	b6 95       	lsr	r27
     e08:	a7 95       	ror	r26
     e0a:	97 95       	ror	r25
     e0c:	87 95       	ror	r24
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	68 0d       	add	r22, r8
     e14:	79 1d       	adc	r23, r9
     e16:	8a 1d       	adc	r24, r10
     e18:	9b 1d       	adc	r25, r11
     e1a:	c2 d7       	rcall	.+3972   	; 0x1da0 <__udivmodsi4>
     e1c:	21 50       	subi	r18, 0x01	; 1
     e1e:	31 09       	sbc	r19, r1
     e20:	41 09       	sbc	r20, r1
     e22:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     e24:	83 2f       	mov	r24, r19
     e26:	8f 70       	andi	r24, 0x0F	; 15
     e28:	c2 95       	swap	r28
     e2a:	c0 7f       	andi	r28, 0xF0	; 240
     e2c:	c8 2b       	or	r28, r24
     e2e:	f1 01       	movw	r30, r2
     e30:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     e32:	26 83       	std	Z+6, r18	; 0x06

	return true;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	1c c0       	rjmp	.+56     	; 0xe70 <usart_set_baudrate+0x208>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	1a c0       	rjmp	.+52     	; 0xe70 <usart_set_baudrate+0x208>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	18 c0       	rjmp	.+48     	; 0xe70 <usart_set_baudrate+0x208>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     e40:	d3 01       	movw	r26, r6
     e42:	c2 01       	movw	r24, r4
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	aa 1f       	adc	r26, r26
     e4a:	bb 1f       	adc	r27, r27
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	aa 1f       	adc	r26, r26
     e52:	bb 1f       	adc	r27, r27
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	aa 1f       	adc	r26, r26
     e5a:	bb 1f       	adc	r27, r27
     e5c:	85 01       	movw	r16, r10
     e5e:	74 01       	movw	r14, r8
     e60:	e8 1a       	sub	r14, r24
     e62:	f9 0a       	sbc	r15, r25
     e64:	0a 0b       	sbc	r16, r26
     e66:	1b 0b       	sbc	r17, r27
     e68:	d8 01       	movw	r26, r16
     e6a:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     e6c:	c9 ef       	ldi	r28, 0xF9	; 249
     e6e:	87 cf       	rjmp	.-242    	; 0xd7e <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	3f 90       	pop	r3
     e90:	2f 90       	pop	r2
     e92:	08 95       	ret

00000e94 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	ec 01       	movw	r28, r24
     e9e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     ea0:	89 2b       	or	r24, r25
     ea2:	09 f4       	brne	.+2      	; 0xea6 <usart_init_rs232+0x12>
     ea4:	77 c0       	rjmp	.+238    	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     ea6:	c1 15       	cp	r28, r1
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	d8 07       	cpc	r29, r24
     eac:	21 f4       	brne	.+8      	; 0xeb6 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     eae:	64 e0       	ldi	r22, 0x04	; 4
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	a3 d9       	rcall	.-3258   	; 0x1fa <sysclk_enable_module>
     eb4:	6f c0       	rjmp	.+222    	; 0xf94 <usart_init_rs232+0x100>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     eb6:	c0 38       	cpi	r28, 0x80	; 128
     eb8:	e1 e0       	ldi	r30, 0x01	; 1
     eba:	de 07       	cpc	r29, r30
     ebc:	21 f4       	brne	.+8      	; 0xec6 <usart_init_rs232+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     ebe:	62 e0       	ldi	r22, 0x02	; 2
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	9b d9       	rcall	.-3274   	; 0x1fa <sysclk_enable_module>
     ec4:	67 c0       	rjmp	.+206    	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
     ec6:	c1 15       	cp	r28, r1
     ec8:	f1 e0       	ldi	r31, 0x01	; 1
     eca:	df 07       	cpc	r29, r31
     ecc:	21 f4       	brne	.+8      	; 0xed6 <usart_init_rs232+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	93 d9       	rcall	.-3290   	; 0x1fa <sysclk_enable_module>
     ed4:	5f c0       	rjmp	.+190    	; 0xf94 <usart_init_rs232+0x100>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     ed6:	c0 38       	cpi	r28, 0x80	; 128
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	d8 07       	cpc	r29, r24
     edc:	21 f4       	brne	.+8      	; 0xee6 <usart_init_rs232+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	8b d9       	rcall	.-3306   	; 0x1fa <sysclk_enable_module>
     ee4:	57 c0       	rjmp	.+174    	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     ee6:	c1 15       	cp	r28, r1
     ee8:	e2 e0       	ldi	r30, 0x02	; 2
     eea:	de 07       	cpc	r29, r30
     eec:	21 f4       	brne	.+8      	; 0xef6 <usart_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	83 d9       	rcall	.-3322   	; 0x1fa <sysclk_enable_module>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     ef6:	c1 15       	cp	r28, r1
     ef8:	f3 e0       	ldi	r31, 0x03	; 3
     efa:	df 07       	cpc	r29, r31
     efc:	21 f4       	brne	.+8      	; 0xf06 <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     efe:	64 e0       	ldi	r22, 0x04	; 4
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	7b d9       	rcall	.-3338   	; 0x1fa <sysclk_enable_module>
     f04:	47 c0       	rjmp	.+142    	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
     f06:	c1 15       	cp	r28, r1
     f08:	88 e0       	ldi	r24, 0x08	; 8
     f0a:	d8 07       	cpc	r29, r24
     f0c:	21 f4       	brne	.+8      	; 0xf16 <usart_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	73 d9       	rcall	.-3354   	; 0x1fa <sysclk_enable_module>
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <usart_init_rs232+0x100>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
     f16:	c0 34       	cpi	r28, 0x40	; 64
     f18:	e8 e0       	ldi	r30, 0x08	; 8
     f1a:	de 07       	cpc	r29, r30
     f1c:	21 f4       	brne	.+8      	; 0xf26 <usart_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
     f1e:	62 e0       	ldi	r22, 0x02	; 2
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	6b d9       	rcall	.-3370   	; 0x1fa <sysclk_enable_module>
     f24:	37 c0       	rjmp	.+110    	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
     f26:	c0 34       	cpi	r28, 0x40	; 64
     f28:	f9 e0       	ldi	r31, 0x09	; 9
     f2a:	df 07       	cpc	r29, r31
     f2c:	21 f4       	brne	.+8      	; 0xf36 <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
     f2e:	62 e0       	ldi	r22, 0x02	; 2
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	63 d9       	rcall	.-3386   	; 0x1fa <sysclk_enable_module>
     f34:	2f c0       	rjmp	.+94     	; 0xf94 <usart_init_rs232+0x100>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     f36:	c0 3b       	cpi	r28, 0xB0	; 176
     f38:	88 e0       	ldi	r24, 0x08	; 8
     f3a:	d8 07       	cpc	r29, r24
     f3c:	21 f4       	brne	.+8      	; 0xf46 <usart_init_rs232+0xb2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     f3e:	64 e0       	ldi	r22, 0x04	; 4
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	5b d9       	rcall	.-3402   	; 0x1fa <sysclk_enable_module>
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     f46:	c0 3e       	cpi	r28, 0xE0	; 224
     f48:	e8 e0       	ldi	r30, 0x08	; 8
     f4a:	de 07       	cpc	r29, r30
     f4c:	21 f4       	brne	.+8      	; 0xf56 <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     f4e:	68 e0       	ldi	r22, 0x08	; 8
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	53 d9       	rcall	.-3418   	; 0x1fa <sysclk_enable_module>
     f54:	1f c0       	rjmp	.+62     	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     f56:	c0 3c       	cpi	r28, 0xC0	; 192
     f58:	f8 e0       	ldi	r31, 0x08	; 8
     f5a:	df 07       	cpc	r29, r31
     f5c:	21 f4       	brne	.+8      	; 0xf66 <usart_init_rs232+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     f5e:	60 e1       	ldi	r22, 0x10	; 16
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	4b d9       	rcall	.-3434   	; 0x1fa <sysclk_enable_module>
     f64:	17 c0       	rjmp	.+46     	; 0xf94 <usart_init_rs232+0x100>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     f66:	c0 3c       	cpi	r28, 0xC0	; 192
     f68:	89 e0       	ldi	r24, 0x09	; 9
     f6a:	d8 07       	cpc	r29, r24
     f6c:	21 f4       	brne	.+8      	; 0xf76 <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     f6e:	60 e1       	ldi	r22, 0x10	; 16
     f70:	84 e0       	ldi	r24, 0x04	; 4
     f72:	43 d9       	rcall	.-3450   	; 0x1fa <sysclk_enable_module>
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     f76:	c0 38       	cpi	r28, 0x80	; 128
     f78:	e4 e0       	ldi	r30, 0x04	; 4
     f7a:	de 07       	cpc	r29, r30
     f7c:	21 f4       	brne	.+8      	; 0xf86 <usart_init_rs232+0xf2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     f7e:	60 e4       	ldi	r22, 0x40	; 64
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	3b d9       	rcall	.-3466   	; 0x1fa <sysclk_enable_module>
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <usart_init_rs232+0x100>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
     f86:	c0 36       	cpi	r28, 0x60	; 96
     f88:	f4 e0       	ldi	r31, 0x04	; 4
     f8a:	df 07       	cpc	r29, r31
     f8c:	19 f4       	brne	.+6      	; 0xf94 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
     f8e:	60 e8       	ldi	r22, 0x80	; 128
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	33 d9       	rcall	.-3482   	; 0x1fa <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	8f 73       	andi	r24, 0x3F	; 63
     f98:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     f9a:	f8 01       	movw	r30, r16
     f9c:	94 81       	ldd	r25, Z+4	; 0x04
     f9e:	85 81       	ldd	r24, Z+5	; 0x05
     fa0:	89 2b       	or	r24, r25
     fa2:	96 81       	ldd	r25, Z+6	; 0x06
     fa4:	91 11       	cpse	r25, r1
     fa6:	98 e0       	ldi	r25, 0x08	; 8
     fa8:	89 2b       	or	r24, r25
     faa:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     fac:	f8 01       	movw	r30, r16
     fae:	40 81       	ld	r20, Z
     fb0:	51 81       	ldd	r21, Z+1	; 0x01
     fb2:	62 81       	ldd	r22, Z+2	; 0x02
     fb4:	73 81       	ldd	r23, Z+3	; 0x03
     fb6:	00 e0       	ldi	r16, 0x00	; 0
     fb8:	12 e1       	ldi	r17, 0x12	; 18
     fba:	2a e7       	ldi	r18, 0x7A	; 122
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	ce 01       	movw	r24, r28
     fc0:	53 de       	rcall	.-858    	; 0xc68 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	98 60       	ori	r25, 0x08	; 8
     fc6:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	90 61       	ori	r25, 0x10	; 16
     fcc:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	08 95       	ret

00000fd8 <usart_xmegae_init_rs232>:
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_xmegae_init_rs232(USART_t *usart,
		const usart_xmegae_rs232_options_t *opt)
{
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	1f 92       	push	r1
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	7c 01       	movw	r14, r24
     ff0:	6b 01       	movw	r12, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	09 f4       	brne	.+2      	; 0xff8 <usart_xmegae_init_rs232+0x20>
     ff6:	80 c0       	rjmp	.+256    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     ff8:	81 15       	cp	r24, r1
     ffa:	94 40       	sbci	r25, 0x04	; 4
     ffc:	21 f4       	brne	.+8      	; 0x1006 <usart_xmegae_init_rs232+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     ffe:	64 e0       	ldi	r22, 0x04	; 4
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	fb d8       	rcall	.-3594   	; 0x1fa <sysclk_enable_module>
    1004:	79 c0       	rjmp	.+242    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1006:	80 e8       	ldi	r24, 0x80	; 128
    1008:	e8 16       	cp	r14, r24
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	f8 06       	cpc	r15, r24
    100e:	21 f4       	brne	.+8      	; 0x1018 <usart_xmegae_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	f2 d8       	rcall	.-3612   	; 0x1fa <sysclk_enable_module>
    1016:	70 c0       	rjmp	.+224    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    1018:	e1 14       	cp	r14, r1
    101a:	e1 e0       	ldi	r30, 0x01	; 1
    101c:	fe 06       	cpc	r15, r30
    101e:	21 f4       	brne	.+8      	; 0x1028 <usart_xmegae_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	ea d8       	rcall	.-3628   	; 0x1fa <sysclk_enable_module>
    1026:	68 c0       	rjmp	.+208    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1028:	f0 e8       	ldi	r31, 0x80	; 128
    102a:	ef 16       	cp	r14, r31
    102c:	f3 e0       	ldi	r31, 0x03	; 3
    102e:	ff 06       	cpc	r15, r31
    1030:	21 f4       	brne	.+8      	; 0x103a <usart_xmegae_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	e1 d8       	rcall	.-3646   	; 0x1fa <sysclk_enable_module>
    1038:	5f c0       	rjmp	.+190    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    103a:	e1 14       	cp	r14, r1
    103c:	22 e0       	ldi	r18, 0x02	; 2
    103e:	f2 06       	cpc	r15, r18
    1040:	21 f4       	brne	.+8      	; 0x104a <usart_xmegae_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	d9 d8       	rcall	.-3662   	; 0x1fa <sysclk_enable_module>
    1048:	57 c0       	rjmp	.+174    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    104a:	e1 14       	cp	r14, r1
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	f8 06       	cpc	r15, r24
    1050:	21 f4       	brne	.+8      	; 0x105a <usart_xmegae_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1052:	64 e0       	ldi	r22, 0x04	; 4
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	d1 d8       	rcall	.-3678   	; 0x1fa <sysclk_enable_module>
    1058:	4f c0       	rjmp	.+158    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    105a:	e1 14       	cp	r14, r1
    105c:	e8 e0       	ldi	r30, 0x08	; 8
    105e:	fe 06       	cpc	r15, r30
    1060:	21 f4       	brne	.+8      	; 0x106a <usart_xmegae_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	c9 d8       	rcall	.-3694   	; 0x1fa <sysclk_enable_module>
    1068:	47 c0       	rjmp	.+142    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    106a:	f0 e4       	ldi	r31, 0x40	; 64
    106c:	ef 16       	cp	r14, r31
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	ff 06       	cpc	r15, r31
    1072:	21 f4       	brne	.+8      	; 0x107c <usart_xmegae_init_rs232+0xa4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	c0 d8       	rcall	.-3712   	; 0x1fa <sysclk_enable_module>
    107a:	3e c0       	rjmp	.+124    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    107c:	20 e4       	ldi	r18, 0x40	; 64
    107e:	e2 16       	cp	r14, r18
    1080:	29 e0       	ldi	r18, 0x09	; 9
    1082:	f2 06       	cpc	r15, r18
    1084:	21 f4       	brne	.+8      	; 0x108e <usart_xmegae_init_rs232+0xb6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    1086:	62 e0       	ldi	r22, 0x02	; 2
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	b7 d8       	rcall	.-3730   	; 0x1fa <sysclk_enable_module>
    108c:	35 c0       	rjmp	.+106    	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    108e:	80 eb       	ldi	r24, 0xB0	; 176
    1090:	e8 16       	cp	r14, r24
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	f8 06       	cpc	r15, r24
    1096:	21 f4       	brne	.+8      	; 0x10a0 <usart_xmegae_init_rs232+0xc8>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1098:	64 e0       	ldi	r22, 0x04	; 4
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	ae d8       	rcall	.-3748   	; 0x1fa <sysclk_enable_module>
    109e:	2c c0       	rjmp	.+88     	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    10a0:	e0 ee       	ldi	r30, 0xE0	; 224
    10a2:	ee 16       	cp	r14, r30
    10a4:	e8 e0       	ldi	r30, 0x08	; 8
    10a6:	fe 06       	cpc	r15, r30
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <usart_xmegae_init_rs232+0xda>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    10aa:	68 e0       	ldi	r22, 0x08	; 8
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	a5 d8       	rcall	.-3766   	; 0x1fa <sysclk_enable_module>
    10b0:	23 c0       	rjmp	.+70     	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    10b2:	f0 ec       	ldi	r31, 0xC0	; 192
    10b4:	ef 16       	cp	r14, r31
    10b6:	f8 e0       	ldi	r31, 0x08	; 8
    10b8:	ff 06       	cpc	r15, r31
    10ba:	21 f4       	brne	.+8      	; 0x10c4 <usart_xmegae_init_rs232+0xec>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    10bc:	60 e1       	ldi	r22, 0x10	; 16
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	9c d8       	rcall	.-3784   	; 0x1fa <sysclk_enable_module>
    10c2:	1a c0       	rjmp	.+52     	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    10c4:	20 ec       	ldi	r18, 0xC0	; 192
    10c6:	e2 16       	cp	r14, r18
    10c8:	29 e0       	ldi	r18, 0x09	; 9
    10ca:	f2 06       	cpc	r15, r18
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <usart_xmegae_init_rs232+0xfe>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    10ce:	60 e1       	ldi	r22, 0x10	; 16
    10d0:	84 e0       	ldi	r24, 0x04	; 4
    10d2:	93 d8       	rcall	.-3802   	; 0x1fa <sysclk_enable_module>
    10d4:	11 c0       	rjmp	.+34     	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	e8 16       	cp	r14, r24
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	f8 06       	cpc	r15, r24
    10de:	21 f4       	brne	.+8      	; 0x10e8 <usart_xmegae_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    10e0:	60 e4       	ldi	r22, 0x40	; 64
    10e2:	83 e0       	ldi	r24, 0x03	; 3
    10e4:	8a d8       	rcall	.-3820   	; 0x1fa <sysclk_enable_module>
    10e6:	08 c0       	rjmp	.+16     	; 0x10f8 <usart_xmegae_init_rs232+0x120>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    10e8:	e0 e6       	ldi	r30, 0x60	; 96
    10ea:	ee 16       	cp	r14, r30
    10ec:	e4 e0       	ldi	r30, 0x04	; 4
    10ee:	fe 06       	cpc	r15, r30
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <usart_xmegae_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    10f2:	60 e8       	ldi	r22, 0x80	; 128
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	81 d8       	rcall	.-3838   	; 0x1fa <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    10f8:	f7 01       	movw	r30, r14
    10fa:	84 81       	ldd	r24, Z+4	; 0x04
    10fc:	8f 73       	andi	r24, 0x3F	; 63
    10fe:	84 83       	std	Z+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1100:	f6 01       	movw	r30, r12
    1102:	94 81       	ldd	r25, Z+4	; 0x04
    1104:	85 81       	ldd	r24, Z+5	; 0x05
    1106:	89 2b       	or	r24, r25
    1108:	96 81       	ldd	r25, Z+6	; 0x06
    110a:	91 11       	cpse	r25, r1
    110c:	98 e0       	ldi	r25, 0x08	; 8
    110e:	89 2b       	or	r24, r25
    1110:	f7 01       	movw	r30, r14
    1112:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1114:	f6 01       	movw	r30, r12
    1116:	40 81       	ld	r20, Z
    1118:	51 81       	ldd	r21, Z+1	; 0x01
    111a:	62 81       	ldd	r22, Z+2	; 0x02
    111c:	73 81       	ldd	r23, Z+3	; 0x03
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	12 e1       	ldi	r17, 0x12	; 18
    1122:	2a e7       	ldi	r18, 0x7A	; 122
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	c7 01       	movw	r24, r14
    1128:	9f dd       	rcall	.-1218   	; 0xc68 <usart_set_baudrate>
    112a:	18 2f       	mov	r17, r24

	/* configure encoding/decoding if needed */
	if (opt->encoding_stream != USART_LUTACT_OFF_gc) {
    112c:	f6 01       	movw	r30, r12
    112e:	94 85       	ldd	r25, Z+12	; 0x0c
    1130:	99 23       	and	r25, r25
    1132:	61 f0       	breq	.+24     	; 0x114c <usart_xmegae_init_rs232+0x174>
		usart_xmegae_encoding(usart, opt->encoding_type,
    1134:	23 85       	ldd	r18, Z+11	; 0x0b
 */
static inline void usart_xmegae_encoding(USART_t *usart,
		USART_DECTYPE_t encoding_type,
		USART_LUTACT_t encoding_stream)
{
	usart->CTRLD &= ~USART_DECTYPE_gm;
    1136:	f7 01       	movw	r30, r14
    1138:	85 81       	ldd	r24, Z+5	; 0x05
    113a:	8f 7c       	andi	r24, 0xCF	; 207
    113c:	85 83       	std	Z+5, r24	; 0x05
	usart->CTRLD &= ~USART_LUTACT_gm;
    113e:	85 81       	ldd	r24, Z+5	; 0x05
    1140:	83 7f       	andi	r24, 0xF3	; 243
    1142:	85 83       	std	Z+5, r24	; 0x05
	usart->CTRLD |= (uint8_t)encoding_type | (uint8_t)encoding_stream;
    1144:	85 81       	ldd	r24, Z+5	; 0x05
    1146:	92 2b       	or	r25, r18
    1148:	98 2b       	or	r25, r24
    114a:	95 83       	std	Z+5, r25	; 0x05
 * \param usart Pointer to the USART module.
 * \param sfden True to enable start frame detection.
 */
static inline void usart_sfden(USART_t *usart, bool sfden)
{
	if (sfden) {
    114c:	f6 01       	movw	r30, r12
    114e:	87 81       	ldd	r24, Z+7	; 0x07
    1150:	88 23       	and	r24, r24
    1152:	29 f0       	breq	.+10     	; 0x115e <usart_xmegae_init_rs232+0x186>
		(usart)->CTRLB |= USART_SFDEN_bm;
    1154:	f7 01       	movw	r30, r14
    1156:	83 81       	ldd	r24, Z+3	; 0x03
    1158:	80 64       	ori	r24, 0x40	; 64
    115a:	83 83       	std	Z+3, r24	; 0x03
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <usart_xmegae_init_rs232+0x18e>
	} else {
		(usart)->CTRLB &= ~USART_SFDEN_bm;
    115e:	f7 01       	movw	r30, r14
    1160:	83 81       	ldd	r24, Z+3	; 0x03
    1162:	8f 7b       	andi	r24, 0xBF	; 191
    1164:	83 83       	std	Z+3, r24	; 0x03
 * \param usart Pointer to the USART module.
 * \param onewire True to enable one wire mode.
 */
static inline void usart_onewire(USART_t *usart, bool onewire)
{
	if (onewire) {
    1166:	f6 01       	movw	r30, r12
    1168:	80 85       	ldd	r24, Z+8	; 0x08
    116a:	88 23       	and	r24, r24
    116c:	29 f0       	breq	.+10     	; 0x1178 <usart_xmegae_init_rs232+0x1a0>
		(usart)->CTRLB |= USART_ONEWIRE_bm;
    116e:	f7 01       	movw	r30, r14
    1170:	83 81       	ldd	r24, Z+3	; 0x03
    1172:	80 68       	ori	r24, 0x80	; 128
    1174:	83 83       	std	Z+3, r24	; 0x03
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <usart_xmegae_init_rs232+0x1a8>
	} else {
		(usart)->CTRLB &= ~USART_ONEWIRE_bm;
    1178:	f7 01       	movw	r30, r14
    117a:	83 81       	ldd	r24, Z+3	; 0x03
    117c:	8f 77       	andi	r24, 0x7F	; 127
    117e:	83 83       	std	Z+3, r24	; 0x03

	usart_sfden(usart, opt->start_frame_detection);
	usart_onewire(usart, opt->one_wire);

	/* Test if XCL PEC should be used and configure it */
	if (opt->pec_length) {
    1180:	f6 01       	movw	r30, r12
    1182:	82 85       	ldd	r24, Z+10	; 0x0a
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <usart_xmegae_init_rs232+0x1b2>
    1188:	51 c0       	rjmp	.+162    	; 0x122c <usart_xmegae_init_rs232+0x254>
    118a:	60 e8       	ldi	r22, 0x80	; 128
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	35 d8       	rcall	.-3990   	; 0x1fa <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1190:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <sleepmgr_locks+0x1>
    1194:	8f 3f       	cpi	r24, 0xFF	; 255
    1196:	09 f4       	brne	.+2      	; 0x119a <usart_xmegae_init_rs232+0x1c2>
    1198:	ff cf       	rjmp	.-2      	; 0x1198 <usart_xmegae_init_rs232+0x1c0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    119a:	8f b7       	in	r24, 0x3f	; 63
    119c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    119e:	f8 94       	cli
	return flags;
    11a0:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    11a2:	e7 e7       	ldi	r30, 0x77	; 119
    11a4:	f0 e2       	ldi	r31, 0x20	; 32
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11ac:	9f bf       	out	0x3f, r25	; 63
	if (mode == XCL_ASYNCHRONOUS) {
		sleepmgr_lock_mode(SLEEPMGR_PDOWN);
		xcl_is_synchronous = false;
	} else if (mode == XCL_SYNCHRONOUS) {
		sleepmgr_lock_mode(SLEEPMGR_IDLE);
		xcl_is_synchronous = true;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 6a 20 	sts	0x206A, r24	; 0x80206a <xcl_is_synchronous>
		xcl_enable(XCL_SYNCHRONOUS);
#ifdef USARTC0
		if ((uint16_t)usart == (uint16_t)&USARTC0) {
    11b4:	f0 ec       	ldi	r31, 0xC0	; 192
    11b6:	ef 16       	cp	r14, r31
    11b8:	f8 e0       	ldi	r31, 0x08	; 8
    11ba:	ff 06       	cpc	r15, r31
    11bc:	41 f4       	brne	.+16     	; 0x11ce <usart_xmegae_init_rs232+0x1f6>
 * \param port The XMEGA port where to map the XCL module from \ref
 * xcl_port_sel_t enum.
 */
static inline void xcl_port(enum xcl_port_sel_t port)
{
	XCL.CTRLA &= ~XCL_PORTSEL_gm;
    11be:	e0 e6       	ldi	r30, 0x60	; 96
    11c0:	f4 e0       	ldi	r31, 0x04	; 4
    11c2:	80 81       	ld	r24, Z
    11c4:	8f 7c       	andi	r24, 0xCF	; 207
    11c6:	80 83       	st	Z, r24
	XCL.CTRLA |= port;
    11c8:	80 81       	ld	r24, Z
    11ca:	80 83       	st	Z, r24
    11cc:	0d c0       	rjmp	.+26     	; 0x11e8 <usart_xmegae_init_rs232+0x210>
			xcl_port(PC);
		}
#endif
#ifdef USARTD0
		if ((uint16_t)usart == (uint16_t)&USARTD0) {
    11ce:	20 ec       	ldi	r18, 0xC0	; 192
    11d0:	e2 16       	cp	r14, r18
    11d2:	29 e0       	ldi	r18, 0x09	; 9
    11d4:	f2 06       	cpc	r15, r18
    11d6:	41 f4       	brne	.+16     	; 0x11e8 <usart_xmegae_init_rs232+0x210>
 * \param port The XMEGA port where to map the XCL module from \ref
 * xcl_port_sel_t enum.
 */
static inline void xcl_port(enum xcl_port_sel_t port)
{
	XCL.CTRLA &= ~XCL_PORTSEL_gm;
    11d8:	e0 e6       	ldi	r30, 0x60	; 96
    11da:	f4 e0       	ldi	r31, 0x04	; 4
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7c       	andi	r24, 0xCF	; 207
    11e0:	80 83       	st	Z, r24
	XCL.CTRLA |= port;
    11e2:	80 81       	ld	r24, Z
    11e4:	80 61       	ori	r24, 0x10	; 16
    11e6:	80 83       	st	Z, r24
			xcl_port(PD);
		}
#endif
		if (opt->pec_length > 16) {
    11e8:	f6 01       	movw	r30, r12
    11ea:	82 85       	ldd	r24, Z+10	; 0x0a
    11ec:	81 31       	cpi	r24, 0x11	; 17
    11ee:	48 f0       	brcs	.+18     	; 0x1202 <usart_xmegae_init_rs232+0x22a>
 *
 * \param tc_sel The timer selection
 */
static inline void xcl_tc_type(enum xcl_tc_sel_t tc_sel)
{
	XCL.CTRLE &= ~XCL_TCSEL_gm;
    11f0:	e0 e6       	ldi	r30, 0x60	; 96
    11f2:	f4 e0       	ldi	r31, 0x04	; 4
    11f4:	84 81       	ldd	r24, Z+4	; 0x04
    11f6:	8f 78       	andi	r24, 0x8F	; 143
    11f8:	84 83       	std	Z+4, r24	; 0x04
	XCL.CTRLE |= tc_sel;
    11fa:	84 81       	ldd	r24, Z+4	; 0x04
    11fc:	80 65       	ori	r24, 0x50	; 80
    11fe:	84 83       	std	Z+4, r24	; 0x04
    1200:	08 c0       	rjmp	.+16     	; 0x1212 <usart_xmegae_init_rs232+0x23a>
 *
 * \param tc_sel The timer selection
 */
static inline void xcl_tc_type(enum xcl_tc_sel_t tc_sel)
{
	XCL.CTRLE &= ~XCL_TCSEL_gm;
    1202:	e0 e6       	ldi	r30, 0x60	; 96
    1204:	f4 e0       	ldi	r31, 0x04	; 4
    1206:	84 81       	ldd	r24, Z+4	; 0x04
    1208:	8f 78       	andi	r24, 0x8F	; 143
    120a:	84 83       	std	Z+4, r24	; 0x04
	XCL.CTRLE |= tc_sel;
    120c:	84 81       	ldd	r24, Z+4	; 0x04
    120e:	80 66       	ori	r24, 0x60	; 96
    1210:	84 83       	std	Z+4, r24	; 0x04
			xcl_tc_type(PEC01);
		} else {
			xcl_tc_type(BTC0PEC2);
		}

		xcl_pec_set_lenght(opt->pec_length - 1);
    1212:	f6 01       	movw	r30, r12
    1214:	82 85       	ldd	r24, Z+10	; 0x0a
    1216:	81 50       	subi	r24, 0x01	; 1
 *
 * \param lenght The PEC frame lenght (in bit number)
 */
static inline void xcl_pec_set_lenght(uint8_t lenght)
{
	XCL.PLC = lenght;
    1218:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x700469>
		usart_xmegae_pec_action(usart, opt->pec_action);
    121c:	81 85       	ldd	r24, Z+9	; 0x09
 * \param pec_action The XCL timer to be used.
 */
static inline void usart_xmegae_pec_action(USART_t *usart,
		USART_PECACT_t pec_action)
{
	usart->CTRLD &= ~USART_PECACT_gm;
    121e:	f7 01       	movw	r30, r14
    1220:	95 81       	ldd	r25, Z+5	; 0x05
    1222:	9c 7f       	andi	r25, 0xFC	; 252
    1224:	95 83       	std	Z+5, r25	; 0x05
	usart->CTRLD |= (uint8_t)pec_action;
    1226:	95 81       	ldd	r25, Z+5	; 0x05
    1228:	89 2b       	or	r24, r25
    122a:	85 83       	std	Z+5, r24	; 0x05
	}

	if (opt->one_wire == false) {
    122c:	f6 01       	movw	r30, r12
    122e:	80 85       	ldd	r24, Z+8	; 0x08
    1230:	81 11       	cpse	r24, r1
    1232:	04 c0       	rjmp	.+8      	; 0x123c <usart_xmegae_init_rs232+0x264>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1234:	f7 01       	movw	r30, r14
    1236:	83 81       	ldd	r24, Z+3	; 0x03
    1238:	88 60       	ori	r24, 0x08	; 8
    123a:	83 83       	std	Z+3, r24	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    123c:	f7 01       	movw	r30, r14
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	90 61       	ori	r25, 0x10	; 16
    1242:	93 83       	std	Z+3, r25	; 0x03
	}

	usart_rx_enable(usart);

	return result;
}
    1244:	81 2f       	mov	r24, r17
    1246:	0f 90       	pop	r0
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	08 95       	ret

0000125a <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1260:	fd dc       	rcall	.-1542   	; 0xc5c <usart_getchar>
    1262:	88 83       	st	Y, r24
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    126a:	f0 cc       	rjmp	.-1568   	; 0xc4c <usart_putchar>
}
    126c:	08 95       	ret

0000126e <main_dac_output>:
	dac_write_configuration(&DACA, &dac_conf);
	dac_enable(&DACA);
}

static void main_dac_output(int16_t volt)
{
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	1f 92       	push	r1
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9c 01       	movw	r18, r24
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    127a:	e0 e0       	ldi	r30, 0x00	; 0
    127c:	f3 e0       	ldi	r31, 0x03	; 3
    127e:	95 81       	ldd	r25, Z+5	; 0x05
__always_inline static void dac_wait_for_channel_ready(DAC_t *dac,
		uint8_t ch_mask)
{
	Assert(dac);

	do { } while (!dac_channel_is_ready(dac, ch_mask));
    1280:	90 ff       	sbrs	r25, 0
    1282:	fd cf       	rjmp	.-6      	; 0x127e <main_dac_output+0x10>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1284:	8f b7       	in	r24, 0x3f	; 63
    1286:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1288:	f8 94       	cli
	return flags;
    128a:	99 81       	ldd	r25, Y+1	; 0x01
	ch = ilog2(ch_mask);
	Assert(ch <= 1);
	dac_ch = (uint16_t *)&dac->CH0DATA + ch;

	flags = cpu_irq_save();
	*dac_ch = val;
    128c:	20 93 18 03 	sts	0x0318, r18	; 0x800318 <__TEXT_REGION_LENGTH__+0x700318>
    1290:	30 93 19 03 	sts	0x0319, r19	; 0x800319 <__TEXT_REGION_LENGTH__+0x700319>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1294:	9f bf       	out	0x3f, r25	; 63
 */
__always_inline static bool dac_channel_is_ready(DAC_t *dac, uint8_t ch_mask)
{
	Assert(dac);

	return (dac->STATUS & ch_mask) == ch_mask;
    1296:	e0 e0       	ldi	r30, 0x00	; 0
    1298:	f3 e0       	ldi	r31, 0x03	; 3
    129a:	85 81       	ldd	r24, Z+5	; 0x05
__always_inline static void dac_wait_for_channel_ready(DAC_t *dac,
		uint8_t ch_mask)
{
	Assert(dac);

	do { } while (!dac_channel_is_ready(dac, ch_mask));
    129c:	80 ff       	sbrs	r24, 0
    129e:	fd cf       	rjmp	.-6      	; 0x129a <main_dac_output+0x2c>
	 * |    0 |    0V   | 4096 |   Vcc   |  -Vcc   |
	 */
	dac_wait_for_channel_ready(&DACA, DAC_CH0);
	dac_set_channel_value(&DACA, DAC_CH0, volt);	
	dac_wait_for_channel_ready(&DACA, DAC_CH0);
}
    12a0:	0f 90       	pop	r0
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <__vector_40>:
#include <asf.h>

static void main_dac_output(int16_t volt);

ISR(USART_RX_Vect)
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	2f 93       	push	r18
    12b4:	3f 93       	push	r19
    12b6:	4f 93       	push	r20
    12b8:	5f 93       	push	r21
    12ba:	6f 93       	push	r22
    12bc:	7f 93       	push	r23
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	af 93       	push	r26
    12c4:	bf 93       	push	r27
    12c6:	ef 93       	push	r30
    12c8:	ff 93       	push	r31
	usart_putchar(USART_SERIAL_EXAMPLE,
    12ca:	80 ec       	ldi	r24, 0xC0	; 192
    12cc:	99 e0       	ldi	r25, 0x09	; 9
    12ce:	c6 dc       	rcall	.-1652   	; 0xc5c <usart_getchar>
    12d0:	68 2f       	mov	r22, r24
    12d2:	80 ec       	ldi	r24, 0xC0	; 192
    12d4:	99 e0       	ldi	r25, 0x09	; 9
    12d6:	ba dc       	rcall	.-1676   	; 0xc4c <usart_putchar>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12d8:	e0 ec       	ldi	r30, 0xC0	; 192
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	81 81       	ldd	r24, Z+1	; 0x01
			usart_getchar(USART_SERIAL_EXAMPLE));
	while (!usart_tx_is_complete(USART_SERIAL_EXAMPLE)) {
    12de:	86 ff       	sbrs	r24, 6
    12e0:	fd cf       	rjmp	.-6      	; 0x12dc <__vector_40+0x34>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12e2:	80 e4       	ldi	r24, 0x40	; 64
    12e4:	80 93 c1 09 	sts	0x09C1, r24	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7009c1>
	}
	usart_clear_tx_complete(USART_SERIAL_EXAMPLE);
}
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <main>:
}

/*! \brief Main function.
 */
int main(void)
{
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	cc 51       	subi	r28, 0x1C	; 28
    1314:	d1 40       	sbci	r29, 0x01	; 1
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	de bf       	out	0x3e, r29	; 62

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    131a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <board_init>
	sysclk_init();
    131e:	0e 94 c6 00 	call	0x18c	; 0x18c <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1322:	87 e0       	ldi	r24, 0x07	; 7
    1324:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	cpu_irq_enable();
    1328:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    132a:	e7 e7       	ldi	r30, 0x77	; 119
    132c:	f0 e2       	ldi	r31, 0x20	; 32
    132e:	10 82       	st	Z, r1
    1330:	11 82       	std	Z+1, r1	; 0x01
    1332:	12 82       	std	Z+2, r1	; 0x02
    1334:	13 82       	std	Z+3, r1	; 0x03
    1336:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	85 83       	std	Z+5, r24	; 0x05

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    133c:	8f b7       	in	r24, 0x3f	; 63
    133e:	c4 5e       	subi	r28, 0xE4	; 228
    1340:	de 4f       	sbci	r29, 0xFE	; 254
    1342:	88 83       	st	Y, r24
    1344:	cc 51       	subi	r28, 0x1C	; 28
    1346:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    1348:	f8 94       	cli
	return flags;
    134a:	c4 5e       	subi	r28, 0xE4	; 228
    134c:	de 4f       	sbci	r29, 0xFE	; 254
    134e:	98 81       	ld	r25, Y
    1350:	cc 51       	subi	r28, 0x1C	; 28
    1352:	d1 40       	sbci	r29, 0x01	; 1
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1354:	84 81       	ldd	r24, Z+4	; 0x04
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    135a:	9f bf       	out	0x3f, r25	; 63
	 * - both DAC channels active on :
	 *   - DAC0 (PA2 pin) for ADC V+
	 *   - DAC1 (PA3 pin) for ADC V-
	 * - manually triggered conversions on both channels
	 */
	dac_read_configuration(&DACA, &dac_conf);
    135c:	be 01       	movw	r22, r28
    135e:	6f 5f       	subi	r22, 0xFF	; 255
    1360:	7e 4f       	sbci	r23, 0xFE	; 254
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	50 da       	rcall	.-2912   	; 0x808 <dac_read_configuration>
 */
__always_inline static void dac_set_conversion_parameters(
		struct dac_config *conf, enum dac_reference ref,
		enum dac_adjust adj)
{
	conf->ctrlc = (uint8_t)ref | (uint8_t)adj;
    1368:	80 e1       	ldi	r24, 0x10	; 16
    136a:	cd 5f       	subi	r28, 0xFD	; 253
    136c:	de 4f       	sbci	r29, 0xFE	; 254
    136e:	88 83       	st	Y, r24
    1370:	c3 50       	subi	r28, 0x03	; 3
    1372:	d1 40       	sbci	r29, 0x01	; 1
	Assert(ilog2(ch_mask) <= 2);
	Assert((ch_mask & int_out_ch_mask) == int_out_ch_mask);
	Assert(int_out_ch_mask != (DAC_CH0 | DAC_CH1));

	// Enable internal and external output channels.
	conf->ctrla = ((ch_mask ^ int_out_ch_mask) << DAC_CH0EN_bp) |
    1374:	14 e0       	ldi	r17, 0x04	; 4
    1376:	cf 5f       	subi	r28, 0xFF	; 255
    1378:	de 4f       	sbci	r29, 0xFE	; 254
    137a:	18 83       	st	Y, r17
    137c:	c1 50       	subi	r28, 0x01	; 1
    137e:	d1 40       	sbci	r29, 0x01	; 1
__always_inline static void dac_set_conversion_trigger(struct dac_config *conf,
		uint8_t ch_mask, uint8_t ev_ch)
{
	Assert(ev_ch <= 7);

	conf->ctrlb &= ~(DAC_CH1TRIG_bm | DAC_CH0TRIG_bm);
    1380:	ce 5f       	subi	r28, 0xFE	; 254
    1382:	de 4f       	sbci	r29, 0xFE	; 254
    1384:	88 81       	ld	r24, Y
    1386:	c2 50       	subi	r28, 0x02	; 2
    1388:	d1 40       	sbci	r29, 0x01	; 1
    138a:	8c 79       	andi	r24, 0x9C	; 156
    138c:	ce 5f       	subi	r28, 0xFE	; 254
    138e:	de 4f       	sbci	r29, 0xFE	; 254
    1390:	88 83       	st	Y, r24
    1392:	c2 50       	subi	r28, 0x02	; 2
    1394:	d1 40       	sbci	r29, 0x01	; 1
	conf->ctrlb |= (ch_mask << DAC_CH0TRIG_bp);
	conf->evctrl = ev_ch << DAC_EVSEL_gp;
    1396:	cc 5f       	subi	r28, 0xFC	; 252
    1398:	de 4f       	sbci	r29, 0xFE	; 254
    139a:	18 82       	st	Y, r1
    139c:	c4 50       	subi	r28, 0x04	; 4
    139e:	d1 40       	sbci	r29, 0x01	; 1
	dac_set_conversion_parameters(&dac_conf, DAC_REF_AREFA, DAC_ADJ_RIGHT);
	dac_set_active_channel(&dac_conf, DAC_CH0, 0);
	dac_set_conversion_trigger(&dac_conf, 0, 0);
	dac_write_configuration(&DACA, &dac_conf);
    13a0:	be 01       	movw	r22, r28
    13a2:	6f 5f       	subi	r22, 0xFF	; 255
    13a4:	7e 4f       	sbci	r23, 0xFE	; 254
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	d5 d9       	rcall	.-3158   	; 0x756 <dac_write_configuration>
	dac_enable(&DACA);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	a7 d9       	rcall	.-3250   	; 0x700 <dac_enable>
	sleepmgr_init();
	sleepmgr_lock_mode(SLEEPMGR_STDBY);
	
	delay_init(F_CPU);	
	main_dac_init();
	main_dac_output(1000);
    13b2:	88 ee       	ldi	r24, 0xE8	; 232
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	5b df       	rcall	.-330    	; 0x126e <main_dac_output>
	 * - VCC/2  voltage reference
	 * - 200 kHz maximum clock rate
	 * - freerun conversion triggering
	 * - enabled internal temperature sensor
	 */
	adc_read_configuration(&ADCA, &adc_conf);
    13b8:	be 01       	movw	r22, r28
    13ba:	65 5f       	subi	r22, 0xF5	; 245
    13bc:	7e 4f       	sbci	r23, 0xFE	; 254
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	92 e0       	ldi	r25, 0x02	; 2
    13c2:	b7 d8       	rcall	.-3730   	; 0x532 <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    13c4:	c5 5f       	subi	r28, 0xF5	; 245
    13c6:	de 4f       	sbci	r29, 0xFE	; 254
    13c8:	98 81       	ld	r25, Y
    13ca:	cb 50       	subi	r28, 0x0B	; 11
    13cc:	d1 40       	sbci	r29, 0x01	; 1
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    13ce:	c4 5f       	subi	r28, 0xF4	; 244
    13d0:	de 4f       	sbci	r29, 0xFE	; 254
    13d2:	88 81       	ld	r24, Y
    13d4:	cc 50       	subi	r28, 0x0C	; 12
    13d6:	d1 40       	sbci	r29, 0x01	; 1
    13d8:	8f 78       	andi	r24, 0x8F	; 143
	conf->refctrl |= ref;
    13da:	80 62       	ori	r24, 0x20	; 32
    13dc:	c4 5f       	subi	r28, 0xF4	; 244
    13de:	de 4f       	sbci	r29, 0xFE	; 254
    13e0:	88 83       	st	Y, r24
    13e2:	cc 50       	subi	r28, 0x0C	; 12
    13e4:	d1 40       	sbci	r29, 0x01	; 1
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    13e6:	c2 5f       	subi	r28, 0xF2	; 242
    13e8:	de 4f       	sbci	r29, 0xFE	; 254
    13ea:	18 83       	st	Y, r17
    13ec:	ce 50       	subi	r28, 0x0E	; 14
    13ee:	d1 40       	sbci	r29, 0x01	; 1
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    13f0:	89 2f       	mov	r24, r25
    13f2:	81 7e       	andi	r24, 0xE1	; 225
    13f4:	c5 5f       	subi	r28, 0xF5	; 245
    13f6:	de 4f       	sbci	r29, 0xFE	; 254
    13f8:	88 83       	st	Y, r24
    13fa:	cb 50       	subi	r28, 0x0B	; 11
    13fc:	d1 40       	sbci	r29, 0x01	; 1
		conf->evctrl = ADC_EVACT_NONE_gc;
    13fe:	c3 5f       	subi	r28, 0xF3	; 243
    1400:	de 4f       	sbci	r29, 0xFE	; 254
    1402:	18 82       	st	Y, r1
    1404:	cd 50       	subi	r28, 0x0D	; 13
    1406:	d1 40       	sbci	r29, 0x01	; 1
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
			ADC_REF_AREFA);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	
	adc_write_configuration(&ADCA, &adc_conf);
    1408:	be 01       	movw	r22, r28
    140a:	65 5f       	subi	r22, 0xF5	; 245
    140c:	7e 4f       	sbci	r23, 0xFE	; 254
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	3d d8       	rcall	.-3974   	; 0x48e <adc_write_configuration>
	
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    1414:	ae 01       	movw	r20, r28
    1416:	4f 5f       	subi	r20, 0xFF	; 255
    1418:	5e 4f       	sbci	r21, 0xFE	; 254
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	06 d9       	rcall	.-3572   	; 0x62e <adcch_read_configuration>
		rshift = 2;
	} else {
		rshift = 1;
	}

	ch_conf->avgctrl = sample | (rshift << ADC_CH_RIGHTSHIFT_gp);
    1422:	83 e3       	ldi	r24, 0x33	; 51
    1424:	c6 5f       	subi	r28, 0xF6	; 246
    1426:	de 4f       	sbci	r29, 0xFE	; 254
    1428:	88 83       	st	Y, r24
    142a:	ca 50       	subi	r28, 0x0A	; 10
    142c:	d1 40       	sbci	r29, 0x01	; 1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	cf 5f       	subi	r28, 0xFF	; 255
    1432:	de 4f       	sbci	r29, 0xFE	; 254
    1434:	88 83       	st	Y, r24
    1436:	c1 50       	subi	r28, 0x01	; 1
    1438:	d1 40       	sbci	r29, 0x01	; 1
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    143a:	88 e1       	ldi	r24, 0x18	; 24
    143c:	ce 5f       	subi	r28, 0xFE	; 254
    143e:	de 4f       	sbci	r29, 0xFE	; 254
    1440:	88 83       	st	Y, r24
    1442:	c2 50       	subi	r28, 0x02	; 2
    1444:	d1 40       	sbci	r29, 0x01	; 1
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_disable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    1446:	cd 5f       	subi	r28, 0xFD	; 253
    1448:	de 4f       	sbci	r29, 0xFE	; 254
    144a:	88 81       	ld	r24, Y
    144c:	c3 50       	subi	r28, 0x03	; 3
    144e:	d1 40       	sbci	r29, 0x01	; 1
    1450:	80 7f       	andi	r24, 0xF0	; 240
    1452:	cd 5f       	subi	r28, 0xFD	; 253
    1454:	de 4f       	sbci	r29, 0xFE	; 254
    1456:	88 83       	st	Y, r24
    1458:	c3 50       	subi	r28, 0x03	; 3
    145a:	d1 40       	sbci	r29, 0x01	; 1
	adcch_enable_averaging(&adcch_conf, ADC_SAMPNUM_8X);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN3, ADCCH_NEG_NONE, 1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_disable_interrupt(&adcch_conf);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    145c:	ae 01       	movw	r20, r28
    145e:	4f 5f       	subi	r20, 0xFF	; 255
    1460:	5e 4f       	sbci	r21, 0xFE	; 254
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	9c d8       	rcall	.-3784   	; 0x5a2 <adcch_write_configuration>
	
	/* Enable ADC which starts the freerun conversion.*/
	adc_enable(&ADCA);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	92 e0       	ldi	r25, 0x02	; 2
    146e:	0e 94 c9 01 	call	0x392	; 0x392 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1472:	8f b7       	in	r24, 0x3f	; 63
    1474:	c8 5e       	subi	r28, 0xE8	; 232
    1476:	de 4f       	sbci	r29, 0xFE	; 254
    1478:	88 83       	st	Y, r24
    147a:	c8 51       	subi	r28, 0x18	; 24
    147c:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    147e:	f8 94       	cli
	return flags;
    1480:	c8 5e       	subi	r28, 0xE8	; 232
    1482:	de 4f       	sbci	r29, 0xFE	; 254
    1484:	98 81       	ld	r25, Y
    1486:	c8 51       	subi	r28, 0x18	; 24
    1488:	d1 40       	sbci	r29, 0x01	; 1
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
    148a:	e0 e0       	ldi	r30, 0x00	; 0
    148c:	f2 e0       	ldi	r31, 0x02	; 2
    148e:	80 81       	ld	r24, Z
    1490:	84 60       	ori	r24, 0x04	; 4
    1492:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1494:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1496:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1498:	80 ff       	sbrs	r24, 0
    149a:	fd cf       	rjmp	.-6      	; 0x1496 <main+0x18c>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	12 e0       	ldi	r17, 0x02	; 2
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	f8 01       	movw	r30, r16
    14a4:	86 83       	std	Z+6, r24	; 0x06
	
	delay_init(F_CPU);	
	main_dac_init();
	main_dac_output(1000);
	main_adc_init();
	nvm_init(INT_FLASH);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0e 94 74 00 	call	0xe8	; 0xe8 <nvm_init>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits   = USART_SERIAL_STOP_BIT,
	};

	/* Initialize usart driver in RS232 mode */
	usart_xmegae_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    14ac:	66 e0       	ldi	r22, 0x06	; 6
    14ae:	70 e2       	ldi	r23, 0x20	; 32
    14b0:	80 ec       	ldi	r24, 0xC0	; 192
    14b2:	99 e0       	ldi	r25, 0x09	; 9
    14b4:	91 dd       	rcall	.-1246   	; 0xfd8 <usart_xmegae_init_rs232>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    14b6:	e0 ec       	ldi	r30, 0xC0	; 192
    14b8:	f9 e0       	ldi	r31, 0x09	; 9
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	8f 7c       	andi	r24, 0xCF	; 207
    14be:	80 61       	ori	r24, 0x10	; 16
    14c0:	82 83       	std	Z+2, r24	; 0x02
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    14c2:	e0 93 81 20 	sts	0x2081, r30	; 0x802081 <stdio_base>
    14c6:	f0 93 82 20 	sts	0x2082, r31	; 0x802082 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    14ca:	85 e3       	ldi	r24, 0x35	; 53
    14cc:	99 e0       	ldi	r25, 0x09	; 9
    14ce:	80 93 7f 20 	sts	0x207F, r24	; 0x80207f <ptr_put>
    14d2:	90 93 80 20 	sts	0x2080, r25	; 0x802080 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    14d6:	8d e2       	ldi	r24, 0x2D	; 45
    14d8:	99 e0       	ldi	r25, 0x09	; 9
    14da:	80 93 7d 20 	sts	0x207D, r24	; 0x80207d <ptr_get>
    14de:	90 93 7e 20 	sts	0x207E, r25	; 0x80207e <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	cb 5f       	subi	r28, 0xFB	; 251
    14e6:	de 4f       	sbci	r29, 0xFE	; 254
    14e8:	88 83       	st	Y, r24
    14ea:	c5 50       	subi	r28, 0x05	; 5
    14ec:	d1 40       	sbci	r29, 0x01	; 1
	usart_rs232_options.paritytype   = options->paritytype;
    14ee:	ca 5f       	subi	r28, 0xFA	; 250
    14f0:	de 4f       	sbci	r29, 0xFE	; 254
    14f2:	18 82       	st	Y, r1
    14f4:	c6 50       	subi	r28, 0x06	; 6
    14f6:	d1 40       	sbci	r29, 0x01	; 1
	usart_rs232_options.stopbits     = options->stopbits;
    14f8:	c9 5f       	subi	r28, 0xF9	; 249
    14fa:	de 4f       	sbci	r29, 0xFE	; 254
    14fc:	18 82       	st	Y, r1
    14fe:	c7 50       	subi	r28, 0x07	; 7
    1500:	d1 40       	sbci	r29, 0x01	; 1
	usart_rs232_options.baudrate     = options->baudrate;
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	9b e4       	ldi	r25, 0x4B	; 75
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	cf 5f       	subi	r28, 0xFF	; 255
    150c:	de 4f       	sbci	r29, 0xFE	; 254
    150e:	88 83       	st	Y, r24
    1510:	99 83       	std	Y+1, r25	; 0x01
    1512:	aa 83       	std	Y+2, r26	; 0x02
    1514:	bb 83       	std	Y+3, r27	; 0x03
    1516:	c1 50       	subi	r28, 0x01	; 1
    1518:	d1 40       	sbci	r29, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    151a:	60 e1       	ldi	r22, 0x10	; 16
    151c:	84 e0       	ldi	r24, 0x04	; 4
    151e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1522:	be 01       	movw	r22, r28
    1524:	6f 5f       	subi	r22, 0xFF	; 255
    1526:	7e 4f       	sbci	r23, 0xFE	; 254
    1528:	80 ec       	ldi	r24, 0xC0	; 192
    152a:	99 e0       	ldi	r25, 0x09	; 9
    152c:	b3 dc       	rcall	.-1690   	; 0xe94 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    152e:	60 e5       	ldi	r22, 0x50	; 80
    1530:	71 e0       	ldi	r23, 0x01	; 1
    1532:	89 e6       	ldi	r24, 0x69	; 105
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	7b d4       	rcall	.+2294   	; 0x1e2e <fdevopen>

	if (correction_measures_done) {
//		goto main_adc_correction_enable;
	}

	main_dac_output(1000);
    1538:	88 ee       	ldi	r24, 0xE8	; 232
    153a:	93 e0       	ldi	r25, 0x03	; 3
    153c:	98 de       	rcall	.-720    	; 0x126e <main_dac_output>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    153e:	8f b7       	in	r24, 0x3f	; 63
    1540:	cc 5e       	subi	r28, 0xEC	; 236
    1542:	de 4f       	sbci	r29, 0xFE	; 254
    1544:	88 83       	st	Y, r24
    1546:	c4 51       	subi	r28, 0x14	; 20
    1548:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    154a:	f8 94       	cli
	return flags;
    154c:	cc 5e       	subi	r28, 0xEC	; 236
    154e:	de 4f       	sbci	r29, 0xFE	; 254
    1550:	98 81       	ld	r25, Y
    1552:	c4 51       	subi	r28, 0x14	; 20
    1554:	d1 40       	sbci	r29, 0x01	; 1
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
    1556:	f8 01       	movw	r30, r16
    1558:	80 81       	ld	r24, Z
    155a:	84 60       	ori	r24, 0x04	; 4
    155c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    155e:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1560:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1562:	80 ff       	sbrs	r24, 0
    1564:	fd cf       	rjmp	.-6      	; 0x1560 <main+0x256>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	12 e0       	ldi	r17, 0x02	; 2
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	f8 01       	movw	r30, r16
    156e:	86 83       	std	Z+6, r24	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1570:	8f b7       	in	r24, 0x3f	; 63
    1572:	cb 5e       	subi	r28, 0xEB	; 235
    1574:	de 4f       	sbci	r29, 0xFE	; 254
    1576:	88 83       	st	Y, r24
    1578:	c5 51       	subi	r28, 0x15	; 21
    157a:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    157c:	f8 94       	cli
	return flags;
    157e:	cb 5e       	subi	r28, 0xEB	; 235
    1580:	de 4f       	sbci	r29, 0xFE	; 254
    1582:	28 81       	ld	r18, Y
    1584:	c5 51       	subi	r28, 0x15	; 21
    1586:	d1 40       	sbci	r29, 0x01	; 1
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
    1588:	84 a1       	ldd	r24, Z+36	; 0x24
    158a:	95 a1       	ldd	r25, Z+37	; 0x25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    158c:	2f bf       	out	0x3f, r18	; 63
	adc_start_conversion(&ADCA, ADC_CH0);
	adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);
	y1 = adc_get_unsigned_result(&ADCA, ADC_CH0);
    158e:	80 93 75 20 	sts	0x2075, r24	; 0x802075 <y1.6160>
    1592:	90 93 76 20 	sts	0x2076, r25	; 0x802076 <y1.6160+0x1>
	main_dac_output(2000);
    1596:	80 ed       	ldi	r24, 0xD0	; 208
    1598:	97 e0       	ldi	r25, 0x07	; 7
    159a:	69 de       	rcall	.-814    	; 0x126e <main_dac_output>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    159c:	8f b7       	in	r24, 0x3f	; 63
    159e:	ca 5e       	subi	r28, 0xEA	; 234
    15a0:	de 4f       	sbci	r29, 0xFE	; 254
    15a2:	88 83       	st	Y, r24
    15a4:	c6 51       	subi	r28, 0x16	; 22
    15a6:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    15a8:	f8 94       	cli
	return flags;
    15aa:	ca 5e       	subi	r28, 0xEA	; 234
    15ac:	de 4f       	sbci	r29, 0xFE	; 254
    15ae:	98 81       	ld	r25, Y
    15b0:	c6 51       	subi	r28, 0x16	; 22
    15b2:	d1 40       	sbci	r29, 0x01	; 1
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
    15b4:	f8 01       	movw	r30, r16
    15b6:	80 81       	ld	r24, Z
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15bc:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    15be:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    15c0:	80 ff       	sbrs	r24, 0
    15c2:	fd cf       	rjmp	.-6      	; 0x15be <main+0x2b4>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    15c4:	e0 e0       	ldi	r30, 0x00	; 0
    15c6:	f2 e0       	ldi	r31, 0x02	; 2
    15c8:	bb 24       	eor	r11, r11
    15ca:	b3 94       	inc	r11
    15cc:	b6 82       	std	Z+6, r11	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15ce:	8f b7       	in	r24, 0x3f	; 63
    15d0:	c9 5e       	subi	r28, 0xE9	; 233
    15d2:	de 4f       	sbci	r29, 0xFE	; 254
    15d4:	88 83       	st	Y, r24
    15d6:	c7 51       	subi	r28, 0x17	; 23
    15d8:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    15da:	f8 94       	cli
	return flags;
    15dc:	c9 5e       	subi	r28, 0xE9	; 233
    15de:	de 4f       	sbci	r29, 0xFE	; 254
    15e0:	88 81       	ld	r24, Y
    15e2:	c7 51       	subi	r28, 0x17	; 23
    15e4:	d1 40       	sbci	r29, 0x01	; 1
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
    15e6:	c4 a0       	ldd	r12, Z+36	; 0x24
    15e8:	d5 a0       	ldd	r13, Z+37	; 0x25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15ea:	8f bf       	out	0x3f, r24	; 63
	adc_start_conversion(&ADCA, ADC_CH0);
	adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);
	y2 = adc_get_unsigned_result(&ADCA, ADC_CH0);
    15ec:	c0 92 73 20 	sts	0x2073, r12	; 0x802073 <y2.6161>
    15f0:	d0 92 74 20 	sts	0x2074, r13	; 0x802074 <y2.6161+0x1>
	multi = (float)(y2-y1)/1000.0;
    15f4:	00 91 75 20 	lds	r16, 0x2075	; 0x802075 <y1.6160>
    15f8:	10 91 76 20 	lds	r17, 0x2076	; 0x802076 <y1.6160+0x1>
    15fc:	b6 01       	movw	r22, r12
    15fe:	60 1b       	sub	r22, r16
    1600:	71 0b       	sbc	r23, r17
    1602:	07 2e       	mov	r0, r23
    1604:	00 0c       	add	r0, r0
    1606:	88 0b       	sbc	r24, r24
    1608:	99 0b       	sbc	r25, r25
    160a:	db d2       	rcall	.+1462   	; 0x1bc2 <__floatsisf>
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4a e7       	ldi	r20, 0x7A	; 122
    1612:	54 e4       	ldi	r21, 0x44	; 68
    1614:	3b d2       	rcall	.+1142   	; 0x1a8c <__divsf3>
    1616:	60 93 6f 20 	sts	0x206F, r22	; 0x80206f <multi.6162>
    161a:	70 93 70 20 	sts	0x2070, r23	; 0x802070 <multi.6162+0x1>
    161e:	80 93 71 20 	sts	0x2071, r24	; 0x802071 <multi.6162+0x2>
    1622:	90 93 72 20 	sts	0x2072, r25	; 0x802072 <multi.6162+0x3>
	offset_correction = 2*y1-y2;
    1626:	98 01       	movw	r18, r16
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	2c 19       	sub	r18, r12
    162e:	3d 09       	sbc	r19, r13
    1630:	20 93 6d 20 	sts	0x206D, r18	; 0x80206d <offset_correction.6157>
    1634:	30 93 6e 20 	sts	0x206E, r19	; 0x80206e <offset_correction.6157+0x1>
	captured_value = (int16_t)(multi*4095.0);
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 ef       	ldi	r19, 0xF0	; 240
    163c:	4f e7       	ldi	r20, 0x7F	; 127
    163e:	55 e4       	ldi	r21, 0x45	; 69
    1640:	4c d3       	rcall	.+1688   	; 0x1cda <__mulsf3>
    1642:	8c d2       	rcall	.+1304   	; 0x1b5c <__fixsfsi>
    1644:	60 93 6b 20 	sts	0x206B, r22	; 0x80206b <captured_value.6159>
    1648:	70 93 6c 20 	sts	0x206C, r23	; 0x80206c <captured_value.6159+0x1>
	printf("y1 %d,   ", y1);
    164c:	1f 93       	push	r17
    164e:	0f 93       	push	r16
    1650:	83 e1       	ldi	r24, 0x13	; 19
    1652:	90 e2       	ldi	r25, 0x20	; 32
    1654:	9f 93       	push	r25
    1656:	8f 93       	push	r24
    1658:	34 d4       	rcall	.+2152   	; 0x1ec2 <printf>
	printf("y2 %d,   ", y2);
    165a:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <y2.6161+0x1>
    165e:	8f 93       	push	r24
    1660:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <y2.6161>
    1664:	8f 93       	push	r24
    1666:	8d e1       	ldi	r24, 0x1D	; 29
    1668:	90 e2       	ldi	r25, 0x20	; 32
    166a:	9f 93       	push	r25
    166c:	8f 93       	push	r24
    166e:	29 d4       	rcall	.+2130   	; 0x1ec2 <printf>
	printf("Offset correction %d,   ", offset_correction);
    1670:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <offset_correction.6157+0x1>
    1674:	8f 93       	push	r24
    1676:	80 91 6d 20 	lds	r24, 0x206D	; 0x80206d <offset_correction.6157>
    167a:	8f 93       	push	r24
    167c:	87 e2       	ldi	r24, 0x27	; 39
    167e:	90 e2       	ldi	r25, 0x20	; 32
    1680:	9f 93       	push	r25
    1682:	8f 93       	push	r24
    1684:	1e d4       	rcall	.+2108   	; 0x1ec2 <printf>
	printf("captured_value %d\n,   ", captured_value);
    1686:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <captured_value.6159+0x1>
    168a:	8f 93       	push	r24
    168c:	80 91 6b 20 	lds	r24, 0x206B	; 0x80206b <captured_value.6159>
    1690:	8f 93       	push	r24
    1692:	80 e4       	ldi	r24, 0x40	; 64
    1694:	90 e2       	ldi	r25, 0x20	; 32
    1696:	9f 93       	push	r25
    1698:	8f 93       	push	r24
    169a:	13 d4       	rcall	.+2086   	; 0x1ec2 <printf>
*/	
	
	
//main_adc_correction_enable:
	  
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    169c:	ae 01       	movw	r20, r28
    169e:	4f 5f       	subi	r20, 0xFF	; 255
    16a0:	5e 4f       	sbci	r21, 0xFE	; 254
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	92 e0       	ldi	r25, 0x02	; 2
    16a8:	0e 94 17 03 	call	0x62e	; 0x62e <adcch_read_configuration>
	adcch_enable_correction(&adcch_conf, offset_correction, expected_value,
    16ac:	20 91 6b 20 	lds	r18, 0x206B	; 0x80206b <captured_value.6159>
    16b0:	30 91 6c 20 	lds	r19, 0x206C	; 0x80206c <captured_value.6159+0x1>
    16b4:	10 91 6d 20 	lds	r17, 0x206D	; 0x80206d <offset_correction.6157>
    16b8:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <offset_correction.6157+0x1>
    16bc:	ce 5e       	subi	r28, 0xEE	; 238
    16be:	de 4f       	sbci	r29, 0xFE	; 254
    16c0:	18 83       	st	Y, r17
    16c2:	c2 51       	subi	r28, 0x12	; 18
    16c4:	d1 40       	sbci	r29, 0x01	; 1
    16c6:	cd 5e       	subi	r28, 0xED	; 237
    16c8:	de 4f       	sbci	r29, 0xFE	; 254
    16ca:	88 83       	st	Y, r24
    16cc:	c3 51       	subi	r28, 0x13	; 19
    16ce:	d1 40       	sbci	r29, 0x01	; 1
		uint16_t offset_corr, uint16_t expected_value,
		uint16_t captured_value)
{
	uint32_t gain_corr;

	gain_corr = (2048L * expected_value) / captured_value;
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	78 ef       	ldi	r23, 0xF8	; 248
    16d8:	8f e7       	ldi	r24, 0x7F	; 127
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	83 d3       	rcall	.+1798   	; 0x1de4 <__divmodsi4>
    16de:	c5 5f       	subi	r28, 0xF5	; 245
    16e0:	de 4f       	sbci	r29, 0xFE	; 254
    16e2:	28 83       	st	Y, r18
    16e4:	cb 50       	subi	r28, 0x0B	; 11
    16e6:	d1 40       	sbci	r29, 0x01	; 1
    16e8:	c4 5f       	subi	r28, 0xF4	; 244
    16ea:	de 4f       	sbci	r29, 0xFE	; 254
    16ec:	38 83       	st	Y, r19
    16ee:	cc 50       	subi	r28, 0x0C	; 12
    16f0:	d1 40       	sbci	r29, 0x01	; 1
    16f2:	c3 5f       	subi	r28, 0xF3	; 243
    16f4:	de 4f       	sbci	r29, 0xFE	; 254
    16f6:	48 83       	st	Y, r20
    16f8:	cd 50       	subi	r28, 0x0D	; 13
    16fa:	d1 40       	sbci	r29, 0x01	; 1
    16fc:	c2 5f       	subi	r28, 0xF2	; 242
    16fe:	de 4f       	sbci	r29, 0xFE	; 254
    1700:	58 83       	st	Y, r21
    1702:	ce 50       	subi	r28, 0x0E	; 14
    1704:	d1 40       	sbci	r29, 0x01	; 1
	ch_conf->offsetcorr0 = LSB(offset_corr);
    1706:	ca 5f       	subi	r28, 0xFA	; 250
    1708:	de 4f       	sbci	r29, 0xFE	; 254
    170a:	18 83       	st	Y, r17
    170c:	c6 50       	subi	r28, 0x06	; 6
    170e:	d1 40       	sbci	r29, 0x01	; 1
	ch_conf->offsetcorr1 = MSB(offset_corr);
    1710:	cd 5e       	subi	r28, 0xED	; 237
    1712:	de 4f       	sbci	r29, 0xFE	; 254
    1714:	88 81       	ld	r24, Y
    1716:	c3 51       	subi	r28, 0x13	; 19
    1718:	d1 40       	sbci	r29, 0x01	; 1
    171a:	c9 5f       	subi	r28, 0xF9	; 249
    171c:	de 4f       	sbci	r29, 0xFE	; 254
    171e:	88 83       	st	Y, r24
    1720:	c7 50       	subi	r28, 0x07	; 7
    1722:	d1 40       	sbci	r29, 0x01	; 1
	ch_conf->gaincorr0 = LSB(gain_corr);
    1724:	c8 5f       	subi	r28, 0xF8	; 248
    1726:	de 4f       	sbci	r29, 0xFE	; 254
    1728:	28 83       	st	Y, r18
    172a:	c8 50       	subi	r28, 0x08	; 8
    172c:	d1 40       	sbci	r29, 0x01	; 1
	ch_conf->gaincorr1 = MSB(gain_corr);
    172e:	c7 5f       	subi	r28, 0xF7	; 247
    1730:	de 4f       	sbci	r29, 0xFE	; 254
    1732:	38 83       	st	Y, r19
    1734:	c9 50       	subi	r28, 0x09	; 9
    1736:	d1 40       	sbci	r29, 0x01	; 1
	ch_conf->corrctrl = ADC_CH_CORREN_bm;
    1738:	cb 5f       	subi	r28, 0xFB	; 251
    173a:	de 4f       	sbci	r29, 0xFE	; 254
    173c:	b8 82       	st	Y, r11
    173e:	c5 50       	subi	r28, 0x05	; 5
    1740:	d1 40       	sbci	r29, 0x01	; 1
			captured_value);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    1742:	ae 01       	movw	r20, r28
    1744:	4f 5f       	subi	r20, 0xFF	; 255
    1746:	5e 4f       	sbci	r21, 0xFE	; 254
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	92 e0       	ldi	r25, 0x02	; 2
    174e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <adcch_write_configuration>
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	de bf       	out	0x3e, r29	; 62
	usart_set_rx_interrupt_level(USART_SERIAL_EXAMPLE, USART_INT_LVL_LO);
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
	/* Send "message header" */
	
	main_adc_correction_start();
	i=0;
    1756:	61 2c       	mov	r6, r1
    1758:	71 2c       	mov	r7, r1
{
	/* ADC channel configuration structure */
	struct adc_channel_config adcch_conf;
	struct adc_config adc_conf;
	
	adc_disable(&ADCA);	
    175a:	a1 2c       	mov	r10, r1
    175c:	68 94       	set
    175e:	bb 24       	eor	r11, r11
    1760:	b1 f8       	bld	r11, 1
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1762:	68 94       	set
    1764:	22 24       	eor	r2, r2
    1766:	22 f8       	bld	r2, 2
	ADC_REF_AREFA);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN, 1, 0);	
	adc_write_configuration(&ADCA, &adc_conf);	
	
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    1768:	4e 01       	movw	r8, r28
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	89 0e       	add	r8, r25
    176e:	99 1e       	adc	r9, r25
		rshift = 2;
	} else {
		rshift = 1;
	}

	ch_conf->avgctrl = sample | (rshift << ADC_CH_RIGHTSHIFT_gp);
    1770:	0f 2e       	mov	r0, r31
    1772:	f7 e4       	ldi	r31, 0x47	; 71
    1774:	3f 2e       	mov	r3, r31
    1776:	f0 2d       	mov	r31, r0
		if (i==256)i=0;
		nvm_write_char(INT_FLASH, 0x4000+i, i);
		nvm_write_char(INT_FLASH, 0x4100+i, i);
		nvm_write_char(INT_FLASH, 0x4200+i, i);
		nvm_write_char(INT_FLASH, 0x4300+i, i);
		printf("i Value: %4u\n", i);
    1778:	0f 2e       	mov	r0, r31
    177a:	f7 e5       	ldi	r31, 0x57	; 87
    177c:	4f 2e       	mov	r4, r31
    177e:	f0 e2       	ldi	r31, 0x20	; 32
    1780:	5f 2e       	mov	r5, r31
    1782:	f0 2d       	mov	r31, r0
		nvm_read(INT_FLASH, 0x4000, tx_buf,256);
		for (int16_t j = 0; j < sizeof(tx_buf); j++) {
		printf("%d", tx_buf[j])	;
    1784:	0f 2e       	mov	r0, r31
    1786:	f5 e6       	ldi	r31, 0x65	; 101
    1788:	cf 2e       	mov	r12, r31
    178a:	f0 e2       	ldi	r31, 0x20	; 32
    178c:	df 2e       	mov	r13, r31
    178e:	f0 2d       	mov	r31, r0
{
	/* ADC channel configuration structure */
	struct adc_channel_config adcch_conf;
	struct adc_config adc_conf;
	
	adc_disable(&ADCA);	
    1790:	c5 01       	movw	r24, r10
    1792:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <adc_disable>
	
	adc_read_configuration(&ADCA, &adc_conf);
    1796:	be 01       	movw	r22, r28
    1798:	65 5f       	subi	r22, 0xF5	; 245
    179a:	7e 4f       	sbci	r23, 0xFE	; 254
    179c:	c5 01       	movw	r24, r10
    179e:	0e 94 99 02 	call	0x532	; 0x532 <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    17a2:	c5 5f       	subi	r28, 0xF5	; 245
    17a4:	de 4f       	sbci	r29, 0xFE	; 254
    17a6:	88 81       	ld	r24, Y
    17a8:	cb 50       	subi	r28, 0x0B	; 11
    17aa:	d1 40       	sbci	r29, 0x01	; 1
    17ac:	89 7e       	andi	r24, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    17ae:	c4 5f       	subi	r28, 0xF4	; 244
    17b0:	de 4f       	sbci	r29, 0xFE	; 254
    17b2:	98 81       	ld	r25, Y
    17b4:	cc 50       	subi	r28, 0x0C	; 12
    17b6:	d1 40       	sbci	r29, 0x01	; 1
    17b8:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    17ba:	90 62       	ori	r25, 0x20	; 32
    17bc:	c4 5f       	subi	r28, 0xF4	; 244
    17be:	de 4f       	sbci	r29, 0xFE	; 254
    17c0:	98 83       	st	Y, r25
    17c2:	cc 50       	subi	r28, 0x0C	; 12
    17c4:	d1 40       	sbci	r29, 0x01	; 1
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    17c6:	c2 5f       	subi	r28, 0xF2	; 242
    17c8:	de 4f       	sbci	r29, 0xFE	; 254
    17ca:	28 82       	st	Y, r2
    17cc:	ce 50       	subi	r28, 0x0E	; 14
    17ce:	d1 40       	sbci	r29, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
				(nr_of_ch << ADC_EVACT_gp);
		break;

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    17d0:	88 60       	ori	r24, 0x08	; 8
    17d2:	c5 5f       	subi	r28, 0xF5	; 245
    17d4:	de 4f       	sbci	r29, 0xFE	; 254
    17d6:	88 83       	st	Y, r24
    17d8:	cb 50       	subi	r28, 0x0B	; 11
    17da:	d1 40       	sbci	r29, 0x01	; 1
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
	ADC_REF_AREFA);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN, 1, 0);	
	adc_write_configuration(&ADCA, &adc_conf);	
    17dc:	be 01       	movw	r22, r28
    17de:	65 5f       	subi	r22, 0xF5	; 245
    17e0:	7e 4f       	sbci	r23, 0xFE	; 254
    17e2:	c5 01       	movw	r24, r10
    17e4:	0e 94 47 02 	call	0x48e	; 0x48e <adc_write_configuration>
	
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    17e8:	a4 01       	movw	r20, r8
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	c5 01       	movw	r24, r10
    17ee:	0e 94 17 03 	call	0x62e	; 0x62e <adcch_read_configuration>
		rshift = 2;
	} else {
		rshift = 1;
	}

	ch_conf->avgctrl = sample | (rshift << ADC_CH_RIGHTSHIFT_gp);
    17f2:	f4 01       	movw	r30, r8
    17f4:	31 86       	std	Z+9, r3	; 0x09
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 83       	st	Z, r24
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    17fa:	88 e1       	ldi	r24, 0x18	; 24
    17fc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_disable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	80 7f       	andi	r24, 0xF0	; 240
    1802:	82 83       	std	Z+2, r24	; 0x02
	adcch_enable_averaging(&adcch_conf, ADC_SAMPNUM_128X);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN3, ADCCH_NEG_NONE, 1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_disable_interrupt(&adcch_conf);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    1804:	a4 01       	movw	r20, r8
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	c5 01       	movw	r24, r10
    180a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <adcch_write_configuration>
	
	/* Enable ADC which starts the freerun conversion.*/
	adc_enable(&ADCA);
    180e:	c5 01       	movw	r24, r10
    1810:	0e 94 c9 01 	call	0x392	; 0x392 <adc_enable>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1814:	f5 01       	movw	r30, r10
    1816:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1818:	80 ff       	sbrs	r24, 0
    181a:	fc cf       	rjmp	.-8      	; 0x1814 <main+0x50a>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	86 83       	std	Z+6, r24	; 0x06
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1820:	f5 01       	movw	r30, r10
    1822:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1824:	80 ff       	sbrs	r24, 0
    1826:	fc cf       	rjmp	.-8      	; 0x1820 <main+0x516>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	86 83       	std	Z+6, r24	; 0x06
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    182c:	f5 01       	movw	r30, r10
    182e:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1830:	80 ff       	sbrs	r24, 0
    1832:	fc cf       	rjmp	.-8      	; 0x182c <main+0x522>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1834:	11 e0       	ldi	r17, 0x01	; 1
    1836:	16 83       	std	Z+6, r17	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1838:	8f b7       	in	r24, 0x3f	; 63
    183a:	c5 5e       	subi	r28, 0xE5	; 229
    183c:	de 4f       	sbci	r29, 0xFE	; 254
    183e:	88 83       	st	Y, r24
    1840:	cb 51       	subi	r28, 0x1B	; 27
    1842:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    1844:	f8 94       	cli
	return flags;
    1846:	c5 5e       	subi	r28, 0xE5	; 229
    1848:	de 4f       	sbci	r29, 0xFE	; 254
    184a:	88 81       	ld	r24, Y
    184c:	cb 51       	subi	r28, 0x1B	; 27
    184e:	d1 40       	sbci	r29, 0x01	; 1
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
    1850:	24 a1       	ldd	r18, Z+36	; 0x24
    1852:	35 a1       	ldd	r19, Z+37	; 0x25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1854:	8f bf       	out	0x3f, r24	; 63
{
	/* ADC channel configuration structure */
	struct adc_channel_config adcch_conf;
	struct adc_config adc_conf;
	
	adc_disable(&ADCA);
    1856:	c5 01       	movw	r24, r10
    1858:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <adc_disable>
	
	adc_read_configuration(&ADCA, &adc_conf);
    185c:	be 01       	movw	r22, r28
    185e:	65 5f       	subi	r22, 0xF5	; 245
    1860:	7e 4f       	sbci	r23, 0xFE	; 254
    1862:	c5 01       	movw	r24, r10
    1864:	0e 94 99 02 	call	0x532	; 0x532 <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1868:	c5 5f       	subi	r28, 0xF5	; 245
    186a:	de 4f       	sbci	r29, 0xFE	; 254
    186c:	88 81       	ld	r24, Y
    186e:	cb 50       	subi	r28, 0x0B	; 11
    1870:	d1 40       	sbci	r29, 0x01	; 1
    1872:	89 7e       	andi	r24, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    1874:	c4 5f       	subi	r28, 0xF4	; 244
    1876:	de 4f       	sbci	r29, 0xFE	; 254
    1878:	98 81       	ld	r25, Y
    187a:	cc 50       	subi	r28, 0x0C	; 12
    187c:	d1 40       	sbci	r29, 0x01	; 1
    187e:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    1880:	90 62       	ori	r25, 0x20	; 32
    1882:	c4 5f       	subi	r28, 0xF4	; 244
    1884:	de 4f       	sbci	r29, 0xFE	; 254
    1886:	98 83       	st	Y, r25
    1888:	cc 50       	subi	r28, 0x0C	; 12
    188a:	d1 40       	sbci	r29, 0x01	; 1
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    188c:	c2 5f       	subi	r28, 0xF2	; 242
    188e:	de 4f       	sbci	r29, 0xFE	; 254
    1890:	28 82       	st	Y, r2
    1892:	ce 50       	subi	r28, 0x0E	; 14
    1894:	d1 40       	sbci	r29, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
				(nr_of_ch << ADC_EVACT_gp);
		break;

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1896:	88 60       	ori	r24, 0x08	; 8
    1898:	c5 5f       	subi	r28, 0xF5	; 245
    189a:	de 4f       	sbci	r29, 0xFE	; 254
    189c:	88 83       	st	Y, r24
    189e:	cb 50       	subi	r28, 0x0B	; 11
    18a0:	d1 40       	sbci	r29, 0x01	; 1
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
	ADC_REF_AREFA);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN, 1, 0);	
	adc_write_configuration(&ADCA, &adc_conf);
    18a2:	be 01       	movw	r22, r28
    18a4:	65 5f       	subi	r22, 0xF5	; 245
    18a6:	7e 4f       	sbci	r23, 0xFE	; 254
    18a8:	c5 01       	movw	r24, r10
    18aa:	0e 94 47 02 	call	0x48e	; 0x48e <adc_write_configuration>
	
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    18ae:	a4 01       	movw	r20, r8
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	c5 01       	movw	r24, r10
    18b4:	0e 94 17 03 	call	0x62e	; 0x62e <adcch_read_configuration>
		rshift = 2;
	} else {
		rshift = 1;
	}

	ch_conf->avgctrl = sample | (rshift << ADC_CH_RIGHTSHIFT_gp);
    18b8:	f4 01       	movw	r30, r8
    18ba:	31 86       	std	Z+9, r3	; 0x09
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    18bc:	10 83       	st	Z, r17
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    18be:	88 e2       	ldi	r24, 0x28	; 40
    18c0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_disable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	80 7f       	andi	r24, 0xF0	; 240
    18c6:	82 83       	std	Z+2, r24	; 0x02
	adcch_enable_averaging(&adcch_conf, ADC_SAMPNUM_128X);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN5, ADCCH_NEG_NONE, 1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_disable_interrupt(&adcch_conf);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    18c8:	a4 01       	movw	r20, r8
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	c5 01       	movw	r24, r10
    18ce:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <adcch_write_configuration>
	
	/* Enable ADC which starts the freerun conversion.*/
	adc_enable(&ADCA);
    18d2:	c5 01       	movw	r24, r10
    18d4:	0e 94 c9 01 	call	0x392	; 0x392 <adc_enable>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    18d8:	f5 01       	movw	r30, r10
    18da:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    18dc:	80 ff       	sbrs	r24, 0
    18de:	fc cf       	rjmp	.-8      	; 0x18d8 <main+0x5ce>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	86 83       	std	Z+6, r24	; 0x06
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    18e4:	f5 01       	movw	r30, r10
    18e6:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    18e8:	80 ff       	sbrs	r24, 0
    18ea:	fc cf       	rjmp	.-8      	; 0x18e4 <main+0x5da>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	86 83       	std	Z+6, r24	; 0x06
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    18f0:	f5 01       	movw	r30, r10
    18f2:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    18f4:	80 ff       	sbrs	r24, 0
    18f6:	fc cf       	rjmp	.-8      	; 0x18f0 <main+0x5e6>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	86 83       	std	Z+6, r24	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18fc:	8f b7       	in	r24, 0x3f	; 63
    18fe:	c6 5e       	subi	r28, 0xE6	; 230
    1900:	de 4f       	sbci	r29, 0xFE	; 254
    1902:	88 83       	st	Y, r24
    1904:	ca 51       	subi	r28, 0x1A	; 26
    1906:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    1908:	f8 94       	cli
	return flags;
    190a:	c6 5e       	subi	r28, 0xE6	; 230
    190c:	de 4f       	sbci	r29, 0xFE	; 254
    190e:	88 81       	ld	r24, Y
    1910:	ca 51       	subi	r28, 0x1A	; 26
    1912:	d1 40       	sbci	r29, 0x01	; 1
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
    1914:	24 a1       	ldd	r18, Z+36	; 0x24
    1916:	35 a1       	ldd	r19, Z+37	; 0x25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1918:	8f bf       	out	0x3f, r24	; 63
	/* Configure ADC channel 0:
	 * - single-ended measurement from temperature sensor
	 * - interrupt flag set on completed conversion
	 */
	
	adc_disable(&ADCA);
    191a:	c5 01       	movw	r24, r10
    191c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <adc_disable>
	 * - VCC /2 voltage reference
	 * - 200 kHz maximum clock rate
	 * - freerun conversion triggering
	 * - enabled internal temperature sensor
	 */
	adc_read_configuration(&ADCA, &adc_conf);
    1920:	be 01       	movw	r22, r28
    1922:	65 5f       	subi	r22, 0xF5	; 245
    1924:	7e 4f       	sbci	r23, 0xFE	; 254
    1926:	c5 01       	movw	r24, r10
    1928:	0e 94 99 02 	call	0x532	; 0x532 <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    192c:	c5 5f       	subi	r28, 0xF5	; 245
    192e:	de 4f       	sbci	r29, 0xFE	; 254
    1930:	98 81       	ld	r25, Y
    1932:	cb 50       	subi	r28, 0x0B	; 11
    1934:	d1 40       	sbci	r29, 0x01	; 1
    1936:	99 7e       	andi	r25, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    1938:	c4 5f       	subi	r28, 0xF4	; 244
    193a:	de 4f       	sbci	r29, 0xFE	; 254
    193c:	88 81       	ld	r24, Y
    193e:	cc 50       	subi	r28, 0x0C	; 12
    1940:	d1 40       	sbci	r29, 0x01	; 1
    1942:	8f 78       	andi	r24, 0x8F	; 143
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1944:	c2 5f       	subi	r28, 0xF2	; 242
    1946:	de 4f       	sbci	r29, 0xFE	; 254
    1948:	28 82       	st	Y, r2
    194a:	ce 50       	subi	r28, 0x0E	; 14
    194c:	d1 40       	sbci	r29, 0x01	; 1
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
				(nr_of_ch << ADC_EVACT_gp);
		break;

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    194e:	98 60       	ori	r25, 0x08	; 8
    1950:	c5 5f       	subi	r28, 0xF5	; 245
    1952:	de 4f       	sbci	r29, 0xFE	; 254
    1954:	98 83       	st	Y, r25
    1956:	cb 50       	subi	r28, 0x0B	; 11
    1958:	d1 40       	sbci	r29, 0x01	; 1
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    195a:	81 60       	ori	r24, 0x01	; 1
    195c:	c4 5f       	subi	r28, 0xF4	; 244
    195e:	de 4f       	sbci	r29, 0xFE	; 254
    1960:	88 83       	st	Y, r24
    1962:	cc 50       	subi	r28, 0x0C	; 12
    1964:	d1 40       	sbci	r29, 0x01	; 1
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
			ADC_REF_BANDGAP);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN, 1, 0);
	adc_enable_internal_input(&adc_conf, ADC_INT_TEMPSENSE);
	adc_write_configuration(&ADCA, &adc_conf);
    1966:	be 01       	movw	r22, r28
    1968:	65 5f       	subi	r22, 0xF5	; 245
    196a:	7e 4f       	sbci	r23, 0xFE	; 254
    196c:	c5 01       	movw	r24, r10
    196e:	0e 94 47 02 	call	0x48e	; 0x48e <adc_write_configuration>
	
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    1972:	a4 01       	movw	r20, r8
    1974:	61 e0       	ldi	r22, 0x01	; 1
    1976:	c5 01       	movw	r24, r10
    1978:	0e 94 17 03 	call	0x62e	; 0x62e <adcch_read_configuration>
		rshift = 2;
	} else {
		rshift = 1;
	}

	ch_conf->avgctrl = sample | (rshift << ADC_CH_RIGHTSHIFT_gp);
    197c:	f4 01       	movw	r30, r8
    197e:	31 86       	std	Z+9, r3	; 0x09
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    1980:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    1982:	11 82       	std	Z+1, r1	; 0x01
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_disable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	80 7f       	andi	r24, 0xF0	; 240
    1988:	82 83       	std	Z+2, r24	; 0x02
	adcch_enable_averaging(&adcch_conf, ADC_SAMPNUM_128X);
	adcch_set_input(&adcch_conf, ADCCH_POS_TEMPSENSE, ADCCH_NEG_NONE, 1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_disable_interrupt(&adcch_conf);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    198a:	a4 01       	movw	r20, r8
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	c5 01       	movw	r24, r10
    1990:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <adcch_write_configuration>
	
	/* Enable ADC which starts the freerun conversion.*/
	adc_enable(&ADCA);
    1994:	c5 01       	movw	r24, r10
    1996:	0e 94 c9 01 	call	0x392	; 0x392 <adc_enable>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    199a:	f5 01       	movw	r30, r10
    199c:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    199e:	80 ff       	sbrs	r24, 0
    19a0:	fc cf       	rjmp	.-8      	; 0x199a <main+0x690>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    19a6:	f5 01       	movw	r30, r10
    19a8:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    19aa:	80 ff       	sbrs	r24, 0
    19ac:	fc cf       	rjmp	.-8      	; 0x19a6 <main+0x69c>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	86 83       	std	Z+6, r24	; 0x06
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    19b2:	f5 01       	movw	r30, r10
    19b4:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    19b6:	80 ff       	sbrs	r24, 0
    19b8:	fc cf       	rjmp	.-8      	; 0x19b2 <main+0x6a8>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	86 83       	std	Z+6, r24	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    19be:	8f b7       	in	r24, 0x3f	; 63
    19c0:	c7 5e       	subi	r28, 0xE7	; 231
    19c2:	de 4f       	sbci	r29, 0xFE	; 254
    19c4:	88 83       	st	Y, r24
    19c6:	c9 51       	subi	r28, 0x19	; 25
    19c8:	d1 40       	sbci	r29, 0x01	; 1
	cpu_irq_disable();
    19ca:	f8 94       	cli
	return flags;
    19cc:	c7 5e       	subi	r28, 0xE7	; 231
    19ce:	de 4f       	sbci	r29, 0xFE	; 254
    19d0:	88 81       	ld	r24, Y
    19d2:	c9 51       	subi	r28, 0x19	; 25
    19d4:	d1 40       	sbci	r29, 0x01	; 1
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
    19d6:	24 a1       	ldd	r18, Z+36	; 0x24
    19d8:	35 a1       	ldd	r19, Z+37	; 0x25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19da:	8f bf       	out	0x3f, r24	; 63
		
		adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);
		sample = adc_get_unsigned_result(&ADCA, ADC_CH0);
//		printf("TMP Value: %4u\t", sample);
		
		main_dac_output(i);
    19dc:	c3 01       	movw	r24, r6
    19de:	47 dc       	rcall	.-1906   	; 0x126e <main_dac_output>
		
		i=i+1;
    19e0:	ff ef       	ldi	r31, 0xFF	; 255
    19e2:	6f 1a       	sub	r6, r31
    19e4:	7f 0a       	sbc	r7, r31
		if (i==256)i=0;
    19e6:	61 14       	cp	r6, r1
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	78 06       	cpc	r7, r24
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <main+0x6e8>
    19ee:	61 2c       	mov	r6, r1
    19f0:	71 2c       	mov	r7, r1
		nvm_write_char(INT_FLASH, 0x4000+i, i);
    19f2:	a3 01       	movw	r20, r6
    19f4:	50 5c       	subi	r21, 0xC0	; 192
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	26 2d       	mov	r18, r6
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <nvm_write_char>
		nvm_write_char(INT_FLASH, 0x4100+i, i);
    1a02:	a3 01       	movw	r20, r6
    1a04:	5f 5b       	subi	r21, 0xBF	; 191
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	26 2d       	mov	r18, r6
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	0e 94 7a 00 	call	0xf4	; 0xf4 <nvm_write_char>
		nvm_write_char(INT_FLASH, 0x4200+i, i);
    1a12:	a3 01       	movw	r20, r6
    1a14:	5e 5b       	subi	r21, 0xBE	; 190
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	26 2d       	mov	r18, r6
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e 94 7a 00 	call	0xf4	; 0xf4 <nvm_write_char>
		nvm_write_char(INT_FLASH, 0x4300+i, i);
    1a22:	a3 01       	movw	r20, r6
    1a24:	5d 5b       	subi	r21, 0xBD	; 189
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	26 2d       	mov	r18, r6
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 7a 00 	call	0xf4	; 0xf4 <nvm_write_char>
		printf("i Value: %4u\n", i);
    1a32:	7f 92       	push	r7
    1a34:	6f 92       	push	r6
    1a36:	5f 92       	push	r5
    1a38:	4f 92       	push	r4
    1a3a:	43 d2       	rcall	.+1158   	; 0x1ec2 <printf>
		nvm_read(INT_FLASH, 0x4000, tx_buf,256);
    1a3c:	e1 2c       	mov	r14, r1
    1a3e:	f1 2c       	mov	r15, r1
    1a40:	87 01       	movw	r16, r14
    1a42:	f3 94       	inc	r15
    1a44:	9e 01       	movw	r18, r28
    1a46:	2f 5f       	subi	r18, 0xFF	; 255
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e4       	ldi	r21, 0x40	; 64
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	0e 94 a4 00 	call	0x148	; 0x148 <nvm_read>
    1a58:	8e 01       	movw	r16, r28
    1a5a:	0f 5f       	subi	r16, 0xFF	; 255
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
		for (int16_t j = 0; j < sizeof(tx_buf); j++) {
		printf("%d", tx_buf[j])	;
    1a66:	f8 01       	movw	r30, r16
    1a68:	81 91       	ld	r24, Z+
    1a6a:	8f 01       	movw	r16, r30
    1a6c:	1f 92       	push	r1
    1a6e:	8f 93       	push	r24
    1a70:	df 92       	push	r13
    1a72:	cf 92       	push	r12
    1a74:	26 d2       	rcall	.+1100   	; 0x1ec2 <printf>
		nvm_write_char(INT_FLASH, 0x4100+i, i);
		nvm_write_char(INT_FLASH, 0x4200+i, i);
		nvm_write_char(INT_FLASH, 0x4300+i, i);
		printf("i Value: %4u\n", i);
		nvm_read(INT_FLASH, 0x4000, tx_buf,256);
		for (int16_t j = 0; j < sizeof(tx_buf); j++) {
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	08 15       	cp	r16, r8
    1a80:	19 05       	cpc	r17, r9
    1a82:	89 f7       	brne	.-30     	; 0x1a66 <main+0x75c>
		printf("%d", tx_buf[j])	;
		}
		printf("\n");
    1a84:	8a e0       	ldi	r24, 0x0A	; 10
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	2f d2       	rcall	.+1118   	; 0x1ee8 <putchar>
//		delay_ms(100);
		
	//	sleepmgr_enter_sleep();
	}
    1a8a:	82 ce       	rjmp	.-764    	; 0x1790 <main+0x486>

00001a8c <__divsf3>:
    1a8c:	0c d0       	rcall	.+24     	; 0x1aa6 <__divsf3x>
    1a8e:	eb c0       	rjmp	.+470    	; 0x1c66 <__fp_round>
    1a90:	e3 d0       	rcall	.+454    	; 0x1c58 <__fp_pscB>
    1a92:	40 f0       	brcs	.+16     	; 0x1aa4 <__divsf3+0x18>
    1a94:	da d0       	rcall	.+436    	; 0x1c4a <__fp_pscA>
    1a96:	30 f0       	brcs	.+12     	; 0x1aa4 <__divsf3+0x18>
    1a98:	21 f4       	brne	.+8      	; 0x1aa2 <__divsf3+0x16>
    1a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <__divsf3+0x18>
    1a9e:	cc c0       	rjmp	.+408    	; 0x1c38 <__fp_inf>
    1aa0:	51 11       	cpse	r21, r1
    1aa2:	15 c1       	rjmp	.+554    	; 0x1cce <__fp_szero>
    1aa4:	cf c0       	rjmp	.+414    	; 0x1c44 <__fp_nan>

00001aa6 <__divsf3x>:
    1aa6:	f0 d0       	rcall	.+480    	; 0x1c88 <__fp_split3>
    1aa8:	98 f3       	brcs	.-26     	; 0x1a90 <__divsf3+0x4>

00001aaa <__divsf3_pse>:
    1aaa:	99 23       	and	r25, r25
    1aac:	c9 f3       	breq	.-14     	; 0x1aa0 <__divsf3+0x14>
    1aae:	55 23       	and	r21, r21
    1ab0:	b1 f3       	breq	.-20     	; 0x1a9e <__divsf3+0x12>
    1ab2:	95 1b       	sub	r25, r21
    1ab4:	55 0b       	sbc	r21, r21
    1ab6:	bb 27       	eor	r27, r27
    1ab8:	aa 27       	eor	r26, r26
    1aba:	62 17       	cp	r22, r18
    1abc:	73 07       	cpc	r23, r19
    1abe:	84 07       	cpc	r24, r20
    1ac0:	38 f0       	brcs	.+14     	; 0x1ad0 <__divsf3_pse+0x26>
    1ac2:	9f 5f       	subi	r25, 0xFF	; 255
    1ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac6:	22 0f       	add	r18, r18
    1ac8:	33 1f       	adc	r19, r19
    1aca:	44 1f       	adc	r20, r20
    1acc:	aa 1f       	adc	r26, r26
    1ace:	a9 f3       	breq	.-22     	; 0x1aba <__divsf3_pse+0x10>
    1ad0:	33 d0       	rcall	.+102    	; 0x1b38 <__divsf3_pse+0x8e>
    1ad2:	0e 2e       	mov	r0, r30
    1ad4:	3a f0       	brmi	.+14     	; 0x1ae4 <__divsf3_pse+0x3a>
    1ad6:	e0 e8       	ldi	r30, 0x80	; 128
    1ad8:	30 d0       	rcall	.+96     	; 0x1b3a <__divsf3_pse+0x90>
    1ada:	91 50       	subi	r25, 0x01	; 1
    1adc:	50 40       	sbci	r21, 0x00	; 0
    1ade:	e6 95       	lsr	r30
    1ae0:	00 1c       	adc	r0, r0
    1ae2:	ca f7       	brpl	.-14     	; 0x1ad6 <__divsf3_pse+0x2c>
    1ae4:	29 d0       	rcall	.+82     	; 0x1b38 <__divsf3_pse+0x8e>
    1ae6:	fe 2f       	mov	r31, r30
    1ae8:	27 d0       	rcall	.+78     	; 0x1b38 <__divsf3_pse+0x8e>
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	88 1f       	adc	r24, r24
    1af0:	bb 1f       	adc	r27, r27
    1af2:	26 17       	cp	r18, r22
    1af4:	37 07       	cpc	r19, r23
    1af6:	48 07       	cpc	r20, r24
    1af8:	ab 07       	cpc	r26, r27
    1afa:	b0 e8       	ldi	r27, 0x80	; 128
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__divsf3_pse+0x56>
    1afe:	bb 0b       	sbc	r27, r27
    1b00:	80 2d       	mov	r24, r0
    1b02:	bf 01       	movw	r22, r30
    1b04:	ff 27       	eor	r31, r31
    1b06:	93 58       	subi	r25, 0x83	; 131
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	2a f0       	brmi	.+10     	; 0x1b16 <__divsf3_pse+0x6c>
    1b0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0e:	51 05       	cpc	r21, r1
    1b10:	68 f0       	brcs	.+26     	; 0x1b2c <__divsf3_pse+0x82>
    1b12:	92 c0       	rjmp	.+292    	; 0x1c38 <__fp_inf>
    1b14:	dc c0       	rjmp	.+440    	; 0x1cce <__fp_szero>
    1b16:	5f 3f       	cpi	r21, 0xFF	; 255
    1b18:	ec f3       	brlt	.-6      	; 0x1b14 <__divsf3_pse+0x6a>
    1b1a:	98 3e       	cpi	r25, 0xE8	; 232
    1b1c:	dc f3       	brlt	.-10     	; 0x1b14 <__divsf3_pse+0x6a>
    1b1e:	86 95       	lsr	r24
    1b20:	77 95       	ror	r23
    1b22:	67 95       	ror	r22
    1b24:	b7 95       	ror	r27
    1b26:	f7 95       	ror	r31
    1b28:	9f 5f       	subi	r25, 0xFF	; 255
    1b2a:	c9 f7       	brne	.-14     	; 0x1b1e <__divsf3_pse+0x74>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	91 1d       	adc	r25, r1
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret
    1b38:	e1 e0       	ldi	r30, 0x01	; 1
    1b3a:	66 0f       	add	r22, r22
    1b3c:	77 1f       	adc	r23, r23
    1b3e:	88 1f       	adc	r24, r24
    1b40:	bb 1f       	adc	r27, r27
    1b42:	62 17       	cp	r22, r18
    1b44:	73 07       	cpc	r23, r19
    1b46:	84 07       	cpc	r24, r20
    1b48:	ba 07       	cpc	r27, r26
    1b4a:	20 f0       	brcs	.+8      	; 0x1b54 <__divsf3_pse+0xaa>
    1b4c:	62 1b       	sub	r22, r18
    1b4e:	73 0b       	sbc	r23, r19
    1b50:	84 0b       	sbc	r24, r20
    1b52:	ba 0b       	sbc	r27, r26
    1b54:	ee 1f       	adc	r30, r30
    1b56:	88 f7       	brcc	.-30     	; 0x1b3a <__divsf3_pse+0x90>
    1b58:	e0 95       	com	r30
    1b5a:	08 95       	ret

00001b5c <__fixsfsi>:
    1b5c:	04 d0       	rcall	.+8      	; 0x1b66 <__fixunssfsi>
    1b5e:	68 94       	set
    1b60:	b1 11       	cpse	r27, r1
    1b62:	b5 c0       	rjmp	.+362    	; 0x1cce <__fp_szero>
    1b64:	08 95       	ret

00001b66 <__fixunssfsi>:
    1b66:	98 d0       	rcall	.+304    	; 0x1c98 <__fp_splitA>
    1b68:	88 f0       	brcs	.+34     	; 0x1b8c <__fixunssfsi+0x26>
    1b6a:	9f 57       	subi	r25, 0x7F	; 127
    1b6c:	90 f0       	brcs	.+36     	; 0x1b92 <__fixunssfsi+0x2c>
    1b6e:	b9 2f       	mov	r27, r25
    1b70:	99 27       	eor	r25, r25
    1b72:	b7 51       	subi	r27, 0x17	; 23
    1b74:	a0 f0       	brcs	.+40     	; 0x1b9e <__fixunssfsi+0x38>
    1b76:	d1 f0       	breq	.+52     	; 0x1bac <__fixunssfsi+0x46>
    1b78:	66 0f       	add	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	88 1f       	adc	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	1a f0       	brmi	.+6      	; 0x1b88 <__fixunssfsi+0x22>
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__fixunssfsi+0x12>
    1b86:	12 c0       	rjmp	.+36     	; 0x1bac <__fixunssfsi+0x46>
    1b88:	b1 30       	cpi	r27, 0x01	; 1
    1b8a:	81 f0       	breq	.+32     	; 0x1bac <__fixunssfsi+0x46>
    1b8c:	9f d0       	rcall	.+318    	; 0x1ccc <__fp_zero>
    1b8e:	b1 e0       	ldi	r27, 0x01	; 1
    1b90:	08 95       	ret
    1b92:	9c c0       	rjmp	.+312    	; 0x1ccc <__fp_zero>
    1b94:	67 2f       	mov	r22, r23
    1b96:	78 2f       	mov	r23, r24
    1b98:	88 27       	eor	r24, r24
    1b9a:	b8 5f       	subi	r27, 0xF8	; 248
    1b9c:	39 f0       	breq	.+14     	; 0x1bac <__fixunssfsi+0x46>
    1b9e:	b9 3f       	cpi	r27, 0xF9	; 249
    1ba0:	cc f3       	brlt	.-14     	; 0x1b94 <__fixunssfsi+0x2e>
    1ba2:	86 95       	lsr	r24
    1ba4:	77 95       	ror	r23
    1ba6:	67 95       	ror	r22
    1ba8:	b3 95       	inc	r27
    1baa:	d9 f7       	brne	.-10     	; 0x1ba2 <__fixunssfsi+0x3c>
    1bac:	3e f4       	brtc	.+14     	; 0x1bbc <__fixunssfsi+0x56>
    1bae:	90 95       	com	r25
    1bb0:	80 95       	com	r24
    1bb2:	70 95       	com	r23
    1bb4:	61 95       	neg	r22
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	08 95       	ret

00001bbe <__floatunsisf>:
    1bbe:	e8 94       	clt
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <__floatsisf+0x12>

00001bc2 <__floatsisf>:
    1bc2:	97 fb       	bst	r25, 7
    1bc4:	3e f4       	brtc	.+14     	; 0x1bd4 <__floatsisf+0x12>
    1bc6:	90 95       	com	r25
    1bc8:	80 95       	com	r24
    1bca:	70 95       	com	r23
    1bcc:	61 95       	neg	r22
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	99 23       	and	r25, r25
    1bd6:	a9 f0       	breq	.+42     	; 0x1c02 <__floatsisf+0x40>
    1bd8:	f9 2f       	mov	r31, r25
    1bda:	96 e9       	ldi	r25, 0x96	; 150
    1bdc:	bb 27       	eor	r27, r27
    1bde:	93 95       	inc	r25
    1be0:	f6 95       	lsr	r31
    1be2:	87 95       	ror	r24
    1be4:	77 95       	ror	r23
    1be6:	67 95       	ror	r22
    1be8:	b7 95       	ror	r27
    1bea:	f1 11       	cpse	r31, r1
    1bec:	f8 cf       	rjmp	.-16     	; 0x1bde <__floatsisf+0x1c>
    1bee:	fa f4       	brpl	.+62     	; 0x1c2e <__floatsisf+0x6c>
    1bf0:	bb 0f       	add	r27, r27
    1bf2:	11 f4       	brne	.+4      	; 0x1bf8 <__floatsisf+0x36>
    1bf4:	60 ff       	sbrs	r22, 0
    1bf6:	1b c0       	rjmp	.+54     	; 0x1c2e <__floatsisf+0x6c>
    1bf8:	6f 5f       	subi	r22, 0xFF	; 255
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	16 c0       	rjmp	.+44     	; 0x1c2e <__floatsisf+0x6c>
    1c02:	88 23       	and	r24, r24
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <__floatsisf+0x48>
    1c06:	96 e9       	ldi	r25, 0x96	; 150
    1c08:	11 c0       	rjmp	.+34     	; 0x1c2c <__floatsisf+0x6a>
    1c0a:	77 23       	and	r23, r23
    1c0c:	21 f0       	breq	.+8      	; 0x1c16 <__floatsisf+0x54>
    1c0e:	9e e8       	ldi	r25, 0x8E	; 142
    1c10:	87 2f       	mov	r24, r23
    1c12:	76 2f       	mov	r23, r22
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <__floatsisf+0x5e>
    1c16:	66 23       	and	r22, r22
    1c18:	71 f0       	breq	.+28     	; 0x1c36 <__floatsisf+0x74>
    1c1a:	96 e8       	ldi	r25, 0x86	; 134
    1c1c:	86 2f       	mov	r24, r22
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	2a f0       	brmi	.+10     	; 0x1c2e <__floatsisf+0x6c>
    1c24:	9a 95       	dec	r25
    1c26:	66 0f       	add	r22, r22
    1c28:	77 1f       	adc	r23, r23
    1c2a:	88 1f       	adc	r24, r24
    1c2c:	da f7       	brpl	.-10     	; 0x1c24 <__floatsisf+0x62>
    1c2e:	88 0f       	add	r24, r24
    1c30:	96 95       	lsr	r25
    1c32:	87 95       	ror	r24
    1c34:	97 f9       	bld	r25, 7
    1c36:	08 95       	ret

00001c38 <__fp_inf>:
    1c38:	97 f9       	bld	r25, 7
    1c3a:	9f 67       	ori	r25, 0x7F	; 127
    1c3c:	80 e8       	ldi	r24, 0x80	; 128
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	08 95       	ret

00001c44 <__fp_nan>:
    1c44:	9f ef       	ldi	r25, 0xFF	; 255
    1c46:	80 ec       	ldi	r24, 0xC0	; 192
    1c48:	08 95       	ret

00001c4a <__fp_pscA>:
    1c4a:	00 24       	eor	r0, r0
    1c4c:	0a 94       	dec	r0
    1c4e:	16 16       	cp	r1, r22
    1c50:	17 06       	cpc	r1, r23
    1c52:	18 06       	cpc	r1, r24
    1c54:	09 06       	cpc	r0, r25
    1c56:	08 95       	ret

00001c58 <__fp_pscB>:
    1c58:	00 24       	eor	r0, r0
    1c5a:	0a 94       	dec	r0
    1c5c:	12 16       	cp	r1, r18
    1c5e:	13 06       	cpc	r1, r19
    1c60:	14 06       	cpc	r1, r20
    1c62:	05 06       	cpc	r0, r21
    1c64:	08 95       	ret

00001c66 <__fp_round>:
    1c66:	09 2e       	mov	r0, r25
    1c68:	03 94       	inc	r0
    1c6a:	00 0c       	add	r0, r0
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <__fp_round+0xc>
    1c6e:	88 23       	and	r24, r24
    1c70:	52 f0       	brmi	.+20     	; 0x1c86 <__fp_round+0x20>
    1c72:	bb 0f       	add	r27, r27
    1c74:	40 f4       	brcc	.+16     	; 0x1c86 <__fp_round+0x20>
    1c76:	bf 2b       	or	r27, r31
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <__fp_round+0x18>
    1c7a:	60 ff       	sbrs	r22, 0
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <__fp_round+0x20>
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__fp_split3>:
    1c88:	57 fd       	sbrc	r21, 7
    1c8a:	90 58       	subi	r25, 0x80	; 128
    1c8c:	44 0f       	add	r20, r20
    1c8e:	55 1f       	adc	r21, r21
    1c90:	59 f0       	breq	.+22     	; 0x1ca8 <__fp_splitA+0x10>
    1c92:	5f 3f       	cpi	r21, 0xFF	; 255
    1c94:	71 f0       	breq	.+28     	; 0x1cb2 <__fp_splitA+0x1a>
    1c96:	47 95       	ror	r20

00001c98 <__fp_splitA>:
    1c98:	88 0f       	add	r24, r24
    1c9a:	97 fb       	bst	r25, 7
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	61 f0       	breq	.+24     	; 0x1cb8 <__fp_splitA+0x20>
    1ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca2:	79 f0       	breq	.+30     	; 0x1cc2 <__fp_splitA+0x2a>
    1ca4:	87 95       	ror	r24
    1ca6:	08 95       	ret
    1ca8:	12 16       	cp	r1, r18
    1caa:	13 06       	cpc	r1, r19
    1cac:	14 06       	cpc	r1, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	f2 cf       	rjmp	.-28     	; 0x1c96 <__fp_split3+0xe>
    1cb2:	46 95       	lsr	r20
    1cb4:	f1 df       	rcall	.-30     	; 0x1c98 <__fp_splitA>
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <__fp_splitA+0x30>
    1cb8:	16 16       	cp	r1, r22
    1cba:	17 06       	cpc	r1, r23
    1cbc:	18 06       	cpc	r1, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	f1 cf       	rjmp	.-30     	; 0x1ca4 <__fp_splitA+0xc>
    1cc2:	86 95       	lsr	r24
    1cc4:	71 05       	cpc	r23, r1
    1cc6:	61 05       	cpc	r22, r1
    1cc8:	08 94       	sec
    1cca:	08 95       	ret

00001ccc <__fp_zero>:
    1ccc:	e8 94       	clt

00001cce <__fp_szero>:
    1cce:	bb 27       	eor	r27, r27
    1cd0:	66 27       	eor	r22, r22
    1cd2:	77 27       	eor	r23, r23
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	97 f9       	bld	r25, 7
    1cd8:	08 95       	ret

00001cda <__mulsf3>:
    1cda:	0b d0       	rcall	.+22     	; 0x1cf2 <__mulsf3x>
    1cdc:	c4 cf       	rjmp	.-120    	; 0x1c66 <__fp_round>
    1cde:	b5 df       	rcall	.-150    	; 0x1c4a <__fp_pscA>
    1ce0:	28 f0       	brcs	.+10     	; 0x1cec <__mulsf3+0x12>
    1ce2:	ba df       	rcall	.-140    	; 0x1c58 <__fp_pscB>
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <__mulsf3+0x12>
    1ce6:	95 23       	and	r25, r21
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <__mulsf3+0x12>
    1cea:	a6 cf       	rjmp	.-180    	; 0x1c38 <__fp_inf>
    1cec:	ab cf       	rjmp	.-170    	; 0x1c44 <__fp_nan>
    1cee:	11 24       	eor	r1, r1
    1cf0:	ee cf       	rjmp	.-36     	; 0x1cce <__fp_szero>

00001cf2 <__mulsf3x>:
    1cf2:	ca df       	rcall	.-108    	; 0x1c88 <__fp_split3>
    1cf4:	a0 f3       	brcs	.-24     	; 0x1cde <__mulsf3+0x4>

00001cf6 <__mulsf3_pse>:
    1cf6:	95 9f       	mul	r25, r21
    1cf8:	d1 f3       	breq	.-12     	; 0x1cee <__mulsf3+0x14>
    1cfa:	95 0f       	add	r25, r21
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	55 1f       	adc	r21, r21
    1d00:	62 9f       	mul	r22, r18
    1d02:	f0 01       	movw	r30, r0
    1d04:	72 9f       	mul	r23, r18
    1d06:	bb 27       	eor	r27, r27
    1d08:	f0 0d       	add	r31, r0
    1d0a:	b1 1d       	adc	r27, r1
    1d0c:	63 9f       	mul	r22, r19
    1d0e:	aa 27       	eor	r26, r26
    1d10:	f0 0d       	add	r31, r0
    1d12:	b1 1d       	adc	r27, r1
    1d14:	aa 1f       	adc	r26, r26
    1d16:	64 9f       	mul	r22, r20
    1d18:	66 27       	eor	r22, r22
    1d1a:	b0 0d       	add	r27, r0
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	66 1f       	adc	r22, r22
    1d20:	82 9f       	mul	r24, r18
    1d22:	22 27       	eor	r18, r18
    1d24:	b0 0d       	add	r27, r0
    1d26:	a1 1d       	adc	r26, r1
    1d28:	62 1f       	adc	r22, r18
    1d2a:	73 9f       	mul	r23, r19
    1d2c:	b0 0d       	add	r27, r0
    1d2e:	a1 1d       	adc	r26, r1
    1d30:	62 1f       	adc	r22, r18
    1d32:	83 9f       	mul	r24, r19
    1d34:	a0 0d       	add	r26, r0
    1d36:	61 1d       	adc	r22, r1
    1d38:	22 1f       	adc	r18, r18
    1d3a:	74 9f       	mul	r23, r20
    1d3c:	33 27       	eor	r19, r19
    1d3e:	a0 0d       	add	r26, r0
    1d40:	61 1d       	adc	r22, r1
    1d42:	23 1f       	adc	r18, r19
    1d44:	84 9f       	mul	r24, r20
    1d46:	60 0d       	add	r22, r0
    1d48:	21 1d       	adc	r18, r1
    1d4a:	82 2f       	mov	r24, r18
    1d4c:	76 2f       	mov	r23, r22
    1d4e:	6a 2f       	mov	r22, r26
    1d50:	11 24       	eor	r1, r1
    1d52:	9f 57       	subi	r25, 0x7F	; 127
    1d54:	50 40       	sbci	r21, 0x00	; 0
    1d56:	8a f0       	brmi	.+34     	; 0x1d7a <__mulsf3_pse+0x84>
    1d58:	e1 f0       	breq	.+56     	; 0x1d92 <__mulsf3_pse+0x9c>
    1d5a:	88 23       	and	r24, r24
    1d5c:	4a f0       	brmi	.+18     	; 0x1d70 <__mulsf3_pse+0x7a>
    1d5e:	ee 0f       	add	r30, r30
    1d60:	ff 1f       	adc	r31, r31
    1d62:	bb 1f       	adc	r27, r27
    1d64:	66 1f       	adc	r22, r22
    1d66:	77 1f       	adc	r23, r23
    1d68:	88 1f       	adc	r24, r24
    1d6a:	91 50       	subi	r25, 0x01	; 1
    1d6c:	50 40       	sbci	r21, 0x00	; 0
    1d6e:	a9 f7       	brne	.-22     	; 0x1d5a <__mulsf3_pse+0x64>
    1d70:	9e 3f       	cpi	r25, 0xFE	; 254
    1d72:	51 05       	cpc	r21, r1
    1d74:	70 f0       	brcs	.+28     	; 0x1d92 <__mulsf3_pse+0x9c>
    1d76:	60 cf       	rjmp	.-320    	; 0x1c38 <__fp_inf>
    1d78:	aa cf       	rjmp	.-172    	; 0x1cce <__fp_szero>
    1d7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7c:	ec f3       	brlt	.-6      	; 0x1d78 <__mulsf3_pse+0x82>
    1d7e:	98 3e       	cpi	r25, 0xE8	; 232
    1d80:	dc f3       	brlt	.-10     	; 0x1d78 <__mulsf3_pse+0x82>
    1d82:	86 95       	lsr	r24
    1d84:	77 95       	ror	r23
    1d86:	67 95       	ror	r22
    1d88:	b7 95       	ror	r27
    1d8a:	f7 95       	ror	r31
    1d8c:	e7 95       	ror	r30
    1d8e:	9f 5f       	subi	r25, 0xFF	; 255
    1d90:	c1 f7       	brne	.-16     	; 0x1d82 <__mulsf3_pse+0x8c>
    1d92:	fe 2b       	or	r31, r30
    1d94:	88 0f       	add	r24, r24
    1d96:	91 1d       	adc	r25, r1
    1d98:	96 95       	lsr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	97 f9       	bld	r25, 7
    1d9e:	08 95       	ret

00001da0 <__udivmodsi4>:
    1da0:	a1 e2       	ldi	r26, 0x21	; 33
    1da2:	1a 2e       	mov	r1, r26
    1da4:	aa 1b       	sub	r26, r26
    1da6:	bb 1b       	sub	r27, r27
    1da8:	fd 01       	movw	r30, r26
    1daa:	0d c0       	rjmp	.+26     	; 0x1dc6 <__udivmodsi4_ep>

00001dac <__udivmodsi4_loop>:
    1dac:	aa 1f       	adc	r26, r26
    1dae:	bb 1f       	adc	r27, r27
    1db0:	ee 1f       	adc	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	a2 17       	cp	r26, r18
    1db6:	b3 07       	cpc	r27, r19
    1db8:	e4 07       	cpc	r30, r20
    1dba:	f5 07       	cpc	r31, r21
    1dbc:	20 f0       	brcs	.+8      	; 0x1dc6 <__udivmodsi4_ep>
    1dbe:	a2 1b       	sub	r26, r18
    1dc0:	b3 0b       	sbc	r27, r19
    1dc2:	e4 0b       	sbc	r30, r20
    1dc4:	f5 0b       	sbc	r31, r21

00001dc6 <__udivmodsi4_ep>:
    1dc6:	66 1f       	adc	r22, r22
    1dc8:	77 1f       	adc	r23, r23
    1dca:	88 1f       	adc	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	1a 94       	dec	r1
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <__udivmodsi4_loop>
    1dd2:	60 95       	com	r22
    1dd4:	70 95       	com	r23
    1dd6:	80 95       	com	r24
    1dd8:	90 95       	com	r25
    1dda:	9b 01       	movw	r18, r22
    1ddc:	ac 01       	movw	r20, r24
    1dde:	bd 01       	movw	r22, r26
    1de0:	cf 01       	movw	r24, r30
    1de2:	08 95       	ret

00001de4 <__divmodsi4>:
    1de4:	05 2e       	mov	r0, r21
    1de6:	97 fb       	bst	r25, 7
    1de8:	16 f4       	brtc	.+4      	; 0x1dee <__divmodsi4+0xa>
    1dea:	00 94       	com	r0
    1dec:	0f d0       	rcall	.+30     	; 0x1e0c <__negsi2>
    1dee:	57 fd       	sbrc	r21, 7
    1df0:	05 d0       	rcall	.+10     	; 0x1dfc <__divmodsi4_neg2>
    1df2:	d6 df       	rcall	.-84     	; 0x1da0 <__udivmodsi4>
    1df4:	07 fc       	sbrc	r0, 7
    1df6:	02 d0       	rcall	.+4      	; 0x1dfc <__divmodsi4_neg2>
    1df8:	46 f4       	brtc	.+16     	; 0x1e0a <__divmodsi4_exit>
    1dfa:	08 c0       	rjmp	.+16     	; 0x1e0c <__negsi2>

00001dfc <__divmodsi4_neg2>:
    1dfc:	50 95       	com	r21
    1dfe:	40 95       	com	r20
    1e00:	30 95       	com	r19
    1e02:	21 95       	neg	r18
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	4f 4f       	sbci	r20, 0xFF	; 255
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255

00001e0a <__divmodsi4_exit>:
    1e0a:	08 95       	ret

00001e0c <__negsi2>:
    1e0c:	90 95       	com	r25
    1e0e:	80 95       	com	r24
    1e10:	70 95       	com	r23
    1e12:	61 95       	neg	r22
    1e14:	7f 4f       	sbci	r23, 0xFF	; 255
    1e16:	8f 4f       	sbci	r24, 0xFF	; 255
    1e18:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1a:	08 95       	ret

00001e1c <memcpy>:
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	dc 01       	movw	r26, r24
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <memcpy+0xa>
    1e22:	01 90       	ld	r0, Z+
    1e24:	0d 92       	st	X+, r0
    1e26:	41 50       	subi	r20, 0x01	; 1
    1e28:	50 40       	sbci	r21, 0x00	; 0
    1e2a:	d8 f7       	brcc	.-10     	; 0x1e22 <memcpy+0x6>
    1e2c:	08 95       	ret

00001e2e <fdevopen>:
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	31 f4       	brne	.+12     	; 0x1e46 <fdevopen+0x18>
    1e3a:	61 15       	cp	r22, r1
    1e3c:	71 05       	cpc	r23, r1
    1e3e:	19 f4       	brne	.+6      	; 0x1e46 <fdevopen+0x18>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	39 c0       	rjmp	.+114    	; 0x1eb8 <fdevopen+0x8a>
    1e46:	8b 01       	movw	r16, r22
    1e48:	ec 01       	movw	r28, r24
    1e4a:	6e e0       	ldi	r22, 0x0E	; 14
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	12 d2       	rcall	.+1060   	; 0x2278 <calloc>
    1e54:	fc 01       	movw	r30, r24
    1e56:	89 2b       	or	r24, r25
    1e58:	99 f3       	breq	.-26     	; 0x1e40 <fdevopen+0x12>
    1e5a:	80 e8       	ldi	r24, 0x80	; 128
    1e5c:	83 83       	std	Z+3, r24	; 0x03
    1e5e:	01 15       	cp	r16, r1
    1e60:	11 05       	cpc	r17, r1
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <fdevopen+0x52>
    1e64:	02 87       	std	Z+10, r16	; 0x0a
    1e66:	13 87       	std	Z+11, r17	; 0x0b
    1e68:	81 e8       	ldi	r24, 0x81	; 129
    1e6a:	83 83       	std	Z+3, r24	; 0x03
    1e6c:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <__iob>
    1e70:	90 91 86 20 	lds	r25, 0x2086	; 0x802086 <__iob+0x1>
    1e74:	89 2b       	or	r24, r25
    1e76:	21 f4       	brne	.+8      	; 0x1e80 <fdevopen+0x52>
    1e78:	e0 93 85 20 	sts	0x2085, r30	; 0x802085 <__iob>
    1e7c:	f0 93 86 20 	sts	0x2086, r31	; 0x802086 <__iob+0x1>
    1e80:	20 97       	sbiw	r28, 0x00	; 0
    1e82:	c9 f0       	breq	.+50     	; 0x1eb6 <fdevopen+0x88>
    1e84:	c0 87       	std	Z+8, r28	; 0x08
    1e86:	d1 87       	std	Z+9, r29	; 0x09
    1e88:	83 81       	ldd	r24, Z+3	; 0x03
    1e8a:	82 60       	ori	r24, 0x02	; 2
    1e8c:	83 83       	std	Z+3, r24	; 0x03
    1e8e:	80 91 87 20 	lds	r24, 0x2087	; 0x802087 <__iob+0x2>
    1e92:	90 91 88 20 	lds	r25, 0x2088	; 0x802088 <__iob+0x3>
    1e96:	89 2b       	or	r24, r25
    1e98:	71 f4       	brne	.+28     	; 0x1eb6 <fdevopen+0x88>
    1e9a:	e0 93 87 20 	sts	0x2087, r30	; 0x802087 <__iob+0x2>
    1e9e:	f0 93 88 20 	sts	0x2088, r31	; 0x802088 <__iob+0x3>
    1ea2:	80 91 89 20 	lds	r24, 0x2089	; 0x802089 <__iob+0x4>
    1ea6:	90 91 8a 20 	lds	r25, 0x208A	; 0x80208a <__iob+0x5>
    1eaa:	89 2b       	or	r24, r25
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <fdevopen+0x88>
    1eae:	e0 93 89 20 	sts	0x2089, r30	; 0x802089 <__iob+0x4>
    1eb2:	f0 93 8a 20 	sts	0x208A, r31	; 0x80208a <__iob+0x5>
    1eb6:	cf 01       	movw	r24, r30
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	08 95       	ret

00001ec2 <printf>:
    1ec2:	a0 e0       	ldi	r26, 0x00	; 0
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e6 e6       	ldi	r30, 0x66	; 102
    1ec8:	ff e0       	ldi	r31, 0x0F	; 15
    1eca:	e0 c3       	rjmp	.+1984   	; 0x268c <__prologue_saves__+0x20>
    1ecc:	ae 01       	movw	r20, r28
    1ece:	4b 5f       	subi	r20, 0xFB	; 251
    1ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed2:	fa 01       	movw	r30, r20
    1ed4:	61 91       	ld	r22, Z+
    1ed6:	71 91       	ld	r23, Z+
    1ed8:	af 01       	movw	r20, r30
    1eda:	80 91 87 20 	lds	r24, 0x2087	; 0x802087 <__iob+0x2>
    1ede:	90 91 88 20 	lds	r25, 0x2088	; 0x802088 <__iob+0x3>
    1ee2:	07 d0       	rcall	.+14     	; 0x1ef2 <vfprintf>
    1ee4:	e2 e0       	ldi	r30, 0x02	; 2
    1ee6:	eb c3       	rjmp	.+2006   	; 0x26be <__epilogue_restores__+0x20>

00001ee8 <putchar>:
    1ee8:	60 91 87 20 	lds	r22, 0x2087	; 0x802087 <__iob+0x2>
    1eec:	70 91 88 20 	lds	r23, 0x2088	; 0x802088 <__iob+0x3>
    1ef0:	27 c3       	rjmp	.+1614   	; 0x2540 <fputc>

00001ef2 <vfprintf>:
    1ef2:	ac e0       	ldi	r26, 0x0C	; 12
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ee e7       	ldi	r30, 0x7E	; 126
    1ef8:	ff e0       	ldi	r31, 0x0F	; 15
    1efa:	b8 c3       	rjmp	.+1904   	; 0x266c <__prologue_saves__>
    1efc:	7c 01       	movw	r14, r24
    1efe:	6b 01       	movw	r12, r22
    1f00:	8a 01       	movw	r16, r20
    1f02:	fc 01       	movw	r30, r24
    1f04:	16 82       	std	Z+6, r1	; 0x06
    1f06:	17 82       	std	Z+7, r1	; 0x07
    1f08:	83 81       	ldd	r24, Z+3	; 0x03
    1f0a:	81 ff       	sbrs	r24, 1
    1f0c:	b0 c1       	rjmp	.+864    	; 0x226e <vfprintf+0x37c>
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	4c 01       	movw	r8, r24
    1f14:	f7 01       	movw	r30, r14
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	f6 01       	movw	r30, r12
    1f1a:	93 fd       	sbrc	r25, 3
    1f1c:	85 91       	lpm	r24, Z+
    1f1e:	93 ff       	sbrs	r25, 3
    1f20:	81 91       	ld	r24, Z+
    1f22:	6f 01       	movw	r12, r30
    1f24:	88 23       	and	r24, r24
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <vfprintf+0x38>
    1f28:	9e c1       	rjmp	.+828    	; 0x2266 <vfprintf+0x374>
    1f2a:	85 32       	cpi	r24, 0x25	; 37
    1f2c:	39 f4       	brne	.+14     	; 0x1f3c <vfprintf+0x4a>
    1f2e:	93 fd       	sbrc	r25, 3
    1f30:	85 91       	lpm	r24, Z+
    1f32:	93 ff       	sbrs	r25, 3
    1f34:	81 91       	ld	r24, Z+
    1f36:	6f 01       	movw	r12, r30
    1f38:	85 32       	cpi	r24, 0x25	; 37
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <vfprintf+0x52>
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	ff d2       	rcall	.+1534   	; 0x2540 <fputc>
    1f42:	e8 cf       	rjmp	.-48     	; 0x1f14 <vfprintf+0x22>
    1f44:	51 2c       	mov	r5, r1
    1f46:	31 2c       	mov	r3, r1
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	20 32       	cpi	r18, 0x20	; 32
    1f4c:	a0 f4       	brcc	.+40     	; 0x1f76 <vfprintf+0x84>
    1f4e:	8b 32       	cpi	r24, 0x2B	; 43
    1f50:	69 f0       	breq	.+26     	; 0x1f6c <vfprintf+0x7a>
    1f52:	30 f4       	brcc	.+12     	; 0x1f60 <vfprintf+0x6e>
    1f54:	80 32       	cpi	r24, 0x20	; 32
    1f56:	59 f0       	breq	.+22     	; 0x1f6e <vfprintf+0x7c>
    1f58:	83 32       	cpi	r24, 0x23	; 35
    1f5a:	69 f4       	brne	.+26     	; 0x1f76 <vfprintf+0x84>
    1f5c:	20 61       	ori	r18, 0x10	; 16
    1f5e:	2c c0       	rjmp	.+88     	; 0x1fb8 <vfprintf+0xc6>
    1f60:	8d 32       	cpi	r24, 0x2D	; 45
    1f62:	39 f0       	breq	.+14     	; 0x1f72 <vfprintf+0x80>
    1f64:	80 33       	cpi	r24, 0x30	; 48
    1f66:	39 f4       	brne	.+14     	; 0x1f76 <vfprintf+0x84>
    1f68:	21 60       	ori	r18, 0x01	; 1
    1f6a:	26 c0       	rjmp	.+76     	; 0x1fb8 <vfprintf+0xc6>
    1f6c:	22 60       	ori	r18, 0x02	; 2
    1f6e:	24 60       	ori	r18, 0x04	; 4
    1f70:	23 c0       	rjmp	.+70     	; 0x1fb8 <vfprintf+0xc6>
    1f72:	28 60       	ori	r18, 0x08	; 8
    1f74:	21 c0       	rjmp	.+66     	; 0x1fb8 <vfprintf+0xc6>
    1f76:	27 fd       	sbrc	r18, 7
    1f78:	27 c0       	rjmp	.+78     	; 0x1fc8 <vfprintf+0xd6>
    1f7a:	30 ed       	ldi	r19, 0xD0	; 208
    1f7c:	38 0f       	add	r19, r24
    1f7e:	3a 30       	cpi	r19, 0x0A	; 10
    1f80:	78 f4       	brcc	.+30     	; 0x1fa0 <vfprintf+0xae>
    1f82:	26 ff       	sbrs	r18, 6
    1f84:	06 c0       	rjmp	.+12     	; 0x1f92 <vfprintf+0xa0>
    1f86:	fa e0       	ldi	r31, 0x0A	; 10
    1f88:	5f 9e       	mul	r5, r31
    1f8a:	30 0d       	add	r19, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	53 2e       	mov	r5, r19
    1f90:	13 c0       	rjmp	.+38     	; 0x1fb8 <vfprintf+0xc6>
    1f92:	8a e0       	ldi	r24, 0x0A	; 10
    1f94:	38 9e       	mul	r3, r24
    1f96:	30 0d       	add	r19, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	33 2e       	mov	r3, r19
    1f9c:	20 62       	ori	r18, 0x20	; 32
    1f9e:	0c c0       	rjmp	.+24     	; 0x1fb8 <vfprintf+0xc6>
    1fa0:	8e 32       	cpi	r24, 0x2E	; 46
    1fa2:	21 f4       	brne	.+8      	; 0x1fac <vfprintf+0xba>
    1fa4:	26 fd       	sbrc	r18, 6
    1fa6:	5f c1       	rjmp	.+702    	; 0x2266 <vfprintf+0x374>
    1fa8:	20 64       	ori	r18, 0x40	; 64
    1faa:	06 c0       	rjmp	.+12     	; 0x1fb8 <vfprintf+0xc6>
    1fac:	8c 36       	cpi	r24, 0x6C	; 108
    1fae:	11 f4       	brne	.+4      	; 0x1fb4 <vfprintf+0xc2>
    1fb0:	20 68       	ori	r18, 0x80	; 128
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <vfprintf+0xc6>
    1fb4:	88 36       	cpi	r24, 0x68	; 104
    1fb6:	41 f4       	brne	.+16     	; 0x1fc8 <vfprintf+0xd6>
    1fb8:	f6 01       	movw	r30, r12
    1fba:	93 fd       	sbrc	r25, 3
    1fbc:	85 91       	lpm	r24, Z+
    1fbe:	93 ff       	sbrs	r25, 3
    1fc0:	81 91       	ld	r24, Z+
    1fc2:	6f 01       	movw	r12, r30
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	c1 cf       	rjmp	.-126    	; 0x1f4a <vfprintf+0x58>
    1fc8:	98 2f       	mov	r25, r24
    1fca:	9f 7d       	andi	r25, 0xDF	; 223
    1fcc:	95 54       	subi	r25, 0x45	; 69
    1fce:	93 30       	cpi	r25, 0x03	; 3
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <vfprintf+0xea>
    1fd2:	0c 5f       	subi	r16, 0xFC	; 252
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	ff e3       	ldi	r31, 0x3F	; 63
    1fd8:	f9 83       	std	Y+1, r31	; 0x01
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <vfprintf+0x104>
    1fdc:	83 36       	cpi	r24, 0x63	; 99
    1fde:	31 f0       	breq	.+12     	; 0x1fec <vfprintf+0xfa>
    1fe0:	83 37       	cpi	r24, 0x73	; 115
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <vfprintf+0x10e>
    1fe4:	83 35       	cpi	r24, 0x53	; 83
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <vfprintf+0xf8>
    1fe8:	57 c0       	rjmp	.+174    	; 0x2098 <vfprintf+0x1a6>
    1fea:	21 c0       	rjmp	.+66     	; 0x202e <vfprintf+0x13c>
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 81       	ld	r24, Z
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	0e 5f       	subi	r16, 0xFE	; 254
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	44 24       	eor	r4, r4
    1ff8:	43 94       	inc	r4
    1ffa:	51 2c       	mov	r5, r1
    1ffc:	54 01       	movw	r10, r8
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <vfprintf+0x136>
    2000:	38 01       	movw	r6, r16
    2002:	f2 e0       	ldi	r31, 0x02	; 2
    2004:	6f 0e       	add	r6, r31
    2006:	71 1c       	adc	r7, r1
    2008:	f8 01       	movw	r30, r16
    200a:	a0 80       	ld	r10, Z
    200c:	b1 80       	ldd	r11, Z+1	; 0x01
    200e:	26 ff       	sbrs	r18, 6
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <vfprintf+0x126>
    2012:	65 2d       	mov	r22, r5
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	02 c0       	rjmp	.+4      	; 0x201c <vfprintf+0x12a>
    2018:	6f ef       	ldi	r22, 0xFF	; 255
    201a:	7f ef       	ldi	r23, 0xFF	; 255
    201c:	c5 01       	movw	r24, r10
    201e:	2c 87       	std	Y+12, r18	; 0x0c
    2020:	84 d2       	rcall	.+1288   	; 0x252a <strnlen>
    2022:	2c 01       	movw	r4, r24
    2024:	83 01       	movw	r16, r6
    2026:	2c 85       	ldd	r18, Y+12	; 0x0c
    2028:	2f 77       	andi	r18, 0x7F	; 127
    202a:	22 2e       	mov	r2, r18
    202c:	16 c0       	rjmp	.+44     	; 0x205a <vfprintf+0x168>
    202e:	38 01       	movw	r6, r16
    2030:	f2 e0       	ldi	r31, 0x02	; 2
    2032:	6f 0e       	add	r6, r31
    2034:	71 1c       	adc	r7, r1
    2036:	f8 01       	movw	r30, r16
    2038:	a0 80       	ld	r10, Z
    203a:	b1 80       	ldd	r11, Z+1	; 0x01
    203c:	26 ff       	sbrs	r18, 6
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <vfprintf+0x154>
    2040:	65 2d       	mov	r22, r5
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfprintf+0x158>
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	7f ef       	ldi	r23, 0xFF	; 255
    204a:	c5 01       	movw	r24, r10
    204c:	2c 87       	std	Y+12, r18	; 0x0c
    204e:	5b d2       	rcall	.+1206   	; 0x2506 <strnlen_P>
    2050:	2c 01       	movw	r4, r24
    2052:	2c 85       	ldd	r18, Y+12	; 0x0c
    2054:	20 68       	ori	r18, 0x80	; 128
    2056:	22 2e       	mov	r2, r18
    2058:	83 01       	movw	r16, r6
    205a:	23 fc       	sbrc	r2, 3
    205c:	19 c0       	rjmp	.+50     	; 0x2090 <vfprintf+0x19e>
    205e:	83 2d       	mov	r24, r3
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	48 16       	cp	r4, r24
    2064:	59 06       	cpc	r5, r25
    2066:	a0 f4       	brcc	.+40     	; 0x2090 <vfprintf+0x19e>
    2068:	b7 01       	movw	r22, r14
    206a:	80 e2       	ldi	r24, 0x20	; 32
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	68 d2       	rcall	.+1232   	; 0x2540 <fputc>
    2070:	3a 94       	dec	r3
    2072:	f5 cf       	rjmp	.-22     	; 0x205e <vfprintf+0x16c>
    2074:	f5 01       	movw	r30, r10
    2076:	27 fc       	sbrc	r2, 7
    2078:	85 91       	lpm	r24, Z+
    207a:	27 fe       	sbrs	r2, 7
    207c:	81 91       	ld	r24, Z+
    207e:	5f 01       	movw	r10, r30
    2080:	b7 01       	movw	r22, r14
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	5d d2       	rcall	.+1210   	; 0x2540 <fputc>
    2086:	31 10       	cpse	r3, r1
    2088:	3a 94       	dec	r3
    208a:	f1 e0       	ldi	r31, 0x01	; 1
    208c:	4f 1a       	sub	r4, r31
    208e:	51 08       	sbc	r5, r1
    2090:	41 14       	cp	r4, r1
    2092:	51 04       	cpc	r5, r1
    2094:	79 f7       	brne	.-34     	; 0x2074 <vfprintf+0x182>
    2096:	de c0       	rjmp	.+444    	; 0x2254 <vfprintf+0x362>
    2098:	84 36       	cpi	r24, 0x64	; 100
    209a:	11 f0       	breq	.+4      	; 0x20a0 <vfprintf+0x1ae>
    209c:	89 36       	cpi	r24, 0x69	; 105
    209e:	31 f5       	brne	.+76     	; 0x20ec <vfprintf+0x1fa>
    20a0:	f8 01       	movw	r30, r16
    20a2:	27 ff       	sbrs	r18, 7
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <vfprintf+0x1c2>
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	0c 5f       	subi	r16, 0xFC	; 252
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
    20b2:	08 c0       	rjmp	.+16     	; 0x20c4 <vfprintf+0x1d2>
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	07 2e       	mov	r0, r23
    20ba:	00 0c       	add	r0, r0
    20bc:	88 0b       	sbc	r24, r24
    20be:	99 0b       	sbc	r25, r25
    20c0:	0e 5f       	subi	r16, 0xFE	; 254
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	2f 76       	andi	r18, 0x6F	; 111
    20c6:	72 2e       	mov	r7, r18
    20c8:	97 ff       	sbrs	r25, 7
    20ca:	09 c0       	rjmp	.+18     	; 0x20de <vfprintf+0x1ec>
    20cc:	90 95       	com	r25
    20ce:	80 95       	com	r24
    20d0:	70 95       	com	r23
    20d2:	61 95       	neg	r22
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255
    20d6:	8f 4f       	sbci	r24, 0xFF	; 255
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	20 68       	ori	r18, 0x80	; 128
    20dc:	72 2e       	mov	r7, r18
    20de:	2a e0       	ldi	r18, 0x0A	; 10
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	a4 01       	movw	r20, r8
    20e4:	65 d2       	rcall	.+1226   	; 0x25b0 <__ultoa_invert>
    20e6:	a8 2e       	mov	r10, r24
    20e8:	a8 18       	sub	r10, r8
    20ea:	43 c0       	rjmp	.+134    	; 0x2172 <vfprintf+0x280>
    20ec:	85 37       	cpi	r24, 0x75	; 117
    20ee:	29 f4       	brne	.+10     	; 0x20fa <vfprintf+0x208>
    20f0:	2f 7e       	andi	r18, 0xEF	; 239
    20f2:	b2 2e       	mov	r11, r18
    20f4:	2a e0       	ldi	r18, 0x0A	; 10
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	25 c0       	rjmp	.+74     	; 0x2144 <vfprintf+0x252>
    20fa:	f2 2f       	mov	r31, r18
    20fc:	f9 7f       	andi	r31, 0xF9	; 249
    20fe:	bf 2e       	mov	r11, r31
    2100:	8f 36       	cpi	r24, 0x6F	; 111
    2102:	c1 f0       	breq	.+48     	; 0x2134 <vfprintf+0x242>
    2104:	18 f4       	brcc	.+6      	; 0x210c <vfprintf+0x21a>
    2106:	88 35       	cpi	r24, 0x58	; 88
    2108:	79 f0       	breq	.+30     	; 0x2128 <vfprintf+0x236>
    210a:	ad c0       	rjmp	.+346    	; 0x2266 <vfprintf+0x374>
    210c:	80 37       	cpi	r24, 0x70	; 112
    210e:	19 f0       	breq	.+6      	; 0x2116 <vfprintf+0x224>
    2110:	88 37       	cpi	r24, 0x78	; 120
    2112:	21 f0       	breq	.+8      	; 0x211c <vfprintf+0x22a>
    2114:	a8 c0       	rjmp	.+336    	; 0x2266 <vfprintf+0x374>
    2116:	2f 2f       	mov	r18, r31
    2118:	20 61       	ori	r18, 0x10	; 16
    211a:	b2 2e       	mov	r11, r18
    211c:	b4 fe       	sbrs	r11, 4
    211e:	0d c0       	rjmp	.+26     	; 0x213a <vfprintf+0x248>
    2120:	8b 2d       	mov	r24, r11
    2122:	84 60       	ori	r24, 0x04	; 4
    2124:	b8 2e       	mov	r11, r24
    2126:	09 c0       	rjmp	.+18     	; 0x213a <vfprintf+0x248>
    2128:	24 ff       	sbrs	r18, 4
    212a:	0a c0       	rjmp	.+20     	; 0x2140 <vfprintf+0x24e>
    212c:	9f 2f       	mov	r25, r31
    212e:	96 60       	ori	r25, 0x06	; 6
    2130:	b9 2e       	mov	r11, r25
    2132:	06 c0       	rjmp	.+12     	; 0x2140 <vfprintf+0x24e>
    2134:	28 e0       	ldi	r18, 0x08	; 8
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <vfprintf+0x252>
    213a:	20 e1       	ldi	r18, 0x10	; 16
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <vfprintf+0x252>
    2140:	20 e1       	ldi	r18, 0x10	; 16
    2142:	32 e0       	ldi	r19, 0x02	; 2
    2144:	f8 01       	movw	r30, r16
    2146:	b7 fe       	sbrs	r11, 7
    2148:	07 c0       	rjmp	.+14     	; 0x2158 <vfprintf+0x266>
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	0c 5f       	subi	r16, 0xFC	; 252
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	06 c0       	rjmp	.+12     	; 0x2164 <vfprintf+0x272>
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 5f       	subi	r16, 0xFE	; 254
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	a4 01       	movw	r20, r8
    2166:	24 d2       	rcall	.+1096   	; 0x25b0 <__ultoa_invert>
    2168:	a8 2e       	mov	r10, r24
    216a:	a8 18       	sub	r10, r8
    216c:	fb 2d       	mov	r31, r11
    216e:	ff 77       	andi	r31, 0x7F	; 127
    2170:	7f 2e       	mov	r7, r31
    2172:	76 fe       	sbrs	r7, 6
    2174:	0b c0       	rjmp	.+22     	; 0x218c <vfprintf+0x29a>
    2176:	37 2d       	mov	r19, r7
    2178:	3e 7f       	andi	r19, 0xFE	; 254
    217a:	a5 14       	cp	r10, r5
    217c:	50 f4       	brcc	.+20     	; 0x2192 <vfprintf+0x2a0>
    217e:	74 fe       	sbrs	r7, 4
    2180:	0a c0       	rjmp	.+20     	; 0x2196 <vfprintf+0x2a4>
    2182:	72 fc       	sbrc	r7, 2
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <vfprintf+0x2a4>
    2186:	37 2d       	mov	r19, r7
    2188:	3e 7e       	andi	r19, 0xEE	; 238
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <vfprintf+0x2a4>
    218c:	ba 2c       	mov	r11, r10
    218e:	37 2d       	mov	r19, r7
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <vfprintf+0x2a6>
    2192:	ba 2c       	mov	r11, r10
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <vfprintf+0x2a6>
    2196:	b5 2c       	mov	r11, r5
    2198:	34 ff       	sbrs	r19, 4
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <vfprintf+0x2c4>
    219c:	fe 01       	movw	r30, r28
    219e:	ea 0d       	add	r30, r10
    21a0:	f1 1d       	adc	r31, r1
    21a2:	80 81       	ld	r24, Z
    21a4:	80 33       	cpi	r24, 0x30	; 48
    21a6:	11 f4       	brne	.+4      	; 0x21ac <vfprintf+0x2ba>
    21a8:	39 7e       	andi	r19, 0xE9	; 233
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <vfprintf+0x2cc>
    21ac:	32 ff       	sbrs	r19, 2
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <vfprintf+0x2ca>
    21b0:	b3 94       	inc	r11
    21b2:	b3 94       	inc	r11
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <vfprintf+0x2cc>
    21b6:	83 2f       	mov	r24, r19
    21b8:	86 78       	andi	r24, 0x86	; 134
    21ba:	09 f0       	breq	.+2      	; 0x21be <vfprintf+0x2cc>
    21bc:	b3 94       	inc	r11
    21be:	33 fd       	sbrc	r19, 3
    21c0:	12 c0       	rjmp	.+36     	; 0x21e6 <vfprintf+0x2f4>
    21c2:	30 ff       	sbrs	r19, 0
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <vfprintf+0x2e0>
    21c6:	5a 2c       	mov	r5, r10
    21c8:	b3 14       	cp	r11, r3
    21ca:	18 f4       	brcc	.+6      	; 0x21d2 <vfprintf+0x2e0>
    21cc:	53 0c       	add	r5, r3
    21ce:	5b 18       	sub	r5, r11
    21d0:	b3 2c       	mov	r11, r3
    21d2:	b3 14       	cp	r11, r3
    21d4:	60 f4       	brcc	.+24     	; 0x21ee <vfprintf+0x2fc>
    21d6:	b7 01       	movw	r22, r14
    21d8:	80 e2       	ldi	r24, 0x20	; 32
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	3c 87       	std	Y+12, r19	; 0x0c
    21de:	b0 d1       	rcall	.+864    	; 0x2540 <fputc>
    21e0:	b3 94       	inc	r11
    21e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    21e4:	f6 cf       	rjmp	.-20     	; 0x21d2 <vfprintf+0x2e0>
    21e6:	b3 14       	cp	r11, r3
    21e8:	10 f4       	brcc	.+4      	; 0x21ee <vfprintf+0x2fc>
    21ea:	3b 18       	sub	r3, r11
    21ec:	01 c0       	rjmp	.+2      	; 0x21f0 <vfprintf+0x2fe>
    21ee:	31 2c       	mov	r3, r1
    21f0:	34 ff       	sbrs	r19, 4
    21f2:	11 c0       	rjmp	.+34     	; 0x2216 <vfprintf+0x324>
    21f4:	b7 01       	movw	r22, r14
    21f6:	80 e3       	ldi	r24, 0x30	; 48
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	3c 87       	std	Y+12, r19	; 0x0c
    21fc:	a1 d1       	rcall	.+834    	; 0x2540 <fputc>
    21fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2200:	32 ff       	sbrs	r19, 2
    2202:	16 c0       	rjmp	.+44     	; 0x2230 <vfprintf+0x33e>
    2204:	31 fd       	sbrc	r19, 1
    2206:	03 c0       	rjmp	.+6      	; 0x220e <vfprintf+0x31c>
    2208:	88 e7       	ldi	r24, 0x78	; 120
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <vfprintf+0x320>
    220e:	88 e5       	ldi	r24, 0x58	; 88
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	b7 01       	movw	r22, r14
    2214:	0c c0       	rjmp	.+24     	; 0x222e <vfprintf+0x33c>
    2216:	83 2f       	mov	r24, r19
    2218:	86 78       	andi	r24, 0x86	; 134
    221a:	51 f0       	breq	.+20     	; 0x2230 <vfprintf+0x33e>
    221c:	31 ff       	sbrs	r19, 1
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <vfprintf+0x332>
    2220:	8b e2       	ldi	r24, 0x2B	; 43
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <vfprintf+0x334>
    2224:	80 e2       	ldi	r24, 0x20	; 32
    2226:	37 fd       	sbrc	r19, 7
    2228:	8d e2       	ldi	r24, 0x2D	; 45
    222a:	b7 01       	movw	r22, r14
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	88 d1       	rcall	.+784    	; 0x2540 <fputc>
    2230:	a5 14       	cp	r10, r5
    2232:	30 f4       	brcc	.+12     	; 0x2240 <vfprintf+0x34e>
    2234:	b7 01       	movw	r22, r14
    2236:	80 e3       	ldi	r24, 0x30	; 48
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	82 d1       	rcall	.+772    	; 0x2540 <fputc>
    223c:	5a 94       	dec	r5
    223e:	f8 cf       	rjmp	.-16     	; 0x2230 <vfprintf+0x33e>
    2240:	aa 94       	dec	r10
    2242:	f4 01       	movw	r30, r8
    2244:	ea 0d       	add	r30, r10
    2246:	f1 1d       	adc	r31, r1
    2248:	80 81       	ld	r24, Z
    224a:	b7 01       	movw	r22, r14
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	78 d1       	rcall	.+752    	; 0x2540 <fputc>
    2250:	a1 10       	cpse	r10, r1
    2252:	f6 cf       	rjmp	.-20     	; 0x2240 <vfprintf+0x34e>
    2254:	33 20       	and	r3, r3
    2256:	09 f4       	brne	.+2      	; 0x225a <vfprintf+0x368>
    2258:	5d ce       	rjmp	.-838    	; 0x1f14 <vfprintf+0x22>
    225a:	b7 01       	movw	r22, r14
    225c:	80 e2       	ldi	r24, 0x20	; 32
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	6f d1       	rcall	.+734    	; 0x2540 <fputc>
    2262:	3a 94       	dec	r3
    2264:	f7 cf       	rjmp	.-18     	; 0x2254 <vfprintf+0x362>
    2266:	f7 01       	movw	r30, r14
    2268:	86 81       	ldd	r24, Z+6	; 0x06
    226a:	97 81       	ldd	r25, Z+7	; 0x07
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <vfprintf+0x380>
    226e:	8f ef       	ldi	r24, 0xFF	; 255
    2270:	9f ef       	ldi	r25, 0xFF	; 255
    2272:	2c 96       	adiw	r28, 0x0c	; 12
    2274:	e2 e1       	ldi	r30, 0x12	; 18
    2276:	13 c2       	rjmp	.+1062   	; 0x269e <__epilogue_restores__>

00002278 <calloc>:
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	86 9f       	mul	r24, r22
    2282:	80 01       	movw	r16, r0
    2284:	87 9f       	mul	r24, r23
    2286:	10 0d       	add	r17, r0
    2288:	96 9f       	mul	r25, r22
    228a:	10 0d       	add	r17, r0
    228c:	11 24       	eor	r1, r1
    228e:	c8 01       	movw	r24, r16
    2290:	0d d0       	rcall	.+26     	; 0x22ac <malloc>
    2292:	ec 01       	movw	r28, r24
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	21 f0       	breq	.+8      	; 0x22a0 <calloc+0x28>
    2298:	a8 01       	movw	r20, r16
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	3e d1       	rcall	.+636    	; 0x251c <memset>
    22a0:	ce 01       	movw	r24, r28
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	1f 91       	pop	r17
    22a8:	0f 91       	pop	r16
    22aa:	08 95       	ret

000022ac <malloc>:
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	82 30       	cpi	r24, 0x02	; 2
    22b2:	91 05       	cpc	r25, r1
    22b4:	10 f4       	brcc	.+4      	; 0x22ba <malloc+0xe>
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <__flp>
    22be:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <__flp+0x1>
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	c0 e0       	ldi	r28, 0x00	; 0
    22c8:	d0 e0       	ldi	r29, 0x00	; 0
    22ca:	30 97       	sbiw	r30, 0x00	; 0
    22cc:	11 f1       	breq	.+68     	; 0x2312 <malloc+0x66>
    22ce:	40 81       	ld	r20, Z
    22d0:	51 81       	ldd	r21, Z+1	; 0x01
    22d2:	48 17       	cp	r20, r24
    22d4:	59 07       	cpc	r21, r25
    22d6:	c0 f0       	brcs	.+48     	; 0x2308 <malloc+0x5c>
    22d8:	48 17       	cp	r20, r24
    22da:	59 07       	cpc	r21, r25
    22dc:	61 f4       	brne	.+24     	; 0x22f6 <malloc+0x4a>
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 97       	sbiw	r28, 0x00	; 0
    22e4:	19 f0       	breq	.+6      	; 0x22ec <malloc+0x40>
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	9b 83       	std	Y+3, r25	; 0x03
    22ea:	2b c0       	rjmp	.+86     	; 0x2342 <malloc+0x96>
    22ec:	80 93 8d 20 	sts	0x208D, r24	; 0x80208d <__flp>
    22f0:	90 93 8e 20 	sts	0x208E, r25	; 0x80208e <__flp+0x1>
    22f4:	26 c0       	rjmp	.+76     	; 0x2342 <malloc+0x96>
    22f6:	21 15       	cp	r18, r1
    22f8:	31 05       	cpc	r19, r1
    22fa:	19 f0       	breq	.+6      	; 0x2302 <malloc+0x56>
    22fc:	42 17       	cp	r20, r18
    22fe:	53 07       	cpc	r21, r19
    2300:	18 f4       	brcc	.+6      	; 0x2308 <malloc+0x5c>
    2302:	9a 01       	movw	r18, r20
    2304:	be 01       	movw	r22, r28
    2306:	df 01       	movw	r26, r30
    2308:	ef 01       	movw	r28, r30
    230a:	02 80       	ldd	r0, Z+2	; 0x02
    230c:	f3 81       	ldd	r31, Z+3	; 0x03
    230e:	e0 2d       	mov	r30, r0
    2310:	dc cf       	rjmp	.-72     	; 0x22ca <malloc+0x1e>
    2312:	21 15       	cp	r18, r1
    2314:	31 05       	cpc	r19, r1
    2316:	09 f1       	breq	.+66     	; 0x235a <malloc+0xae>
    2318:	28 1b       	sub	r18, r24
    231a:	39 0b       	sbc	r19, r25
    231c:	24 30       	cpi	r18, 0x04	; 4
    231e:	31 05       	cpc	r19, r1
    2320:	90 f4       	brcc	.+36     	; 0x2346 <malloc+0x9a>
    2322:	12 96       	adiw	r26, 0x02	; 2
    2324:	8d 91       	ld	r24, X+
    2326:	9c 91       	ld	r25, X
    2328:	13 97       	sbiw	r26, 0x03	; 3
    232a:	61 15       	cp	r22, r1
    232c:	71 05       	cpc	r23, r1
    232e:	21 f0       	breq	.+8      	; 0x2338 <malloc+0x8c>
    2330:	fb 01       	movw	r30, r22
    2332:	82 83       	std	Z+2, r24	; 0x02
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <malloc+0x94>
    2338:	80 93 8d 20 	sts	0x208D, r24	; 0x80208d <__flp>
    233c:	90 93 8e 20 	sts	0x208E, r25	; 0x80208e <__flp+0x1>
    2340:	fd 01       	movw	r30, r26
    2342:	32 96       	adiw	r30, 0x02	; 2
    2344:	44 c0       	rjmp	.+136    	; 0x23ce <malloc+0x122>
    2346:	fd 01       	movw	r30, r26
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	81 93       	st	Z+, r24
    234e:	91 93       	st	Z+, r25
    2350:	22 50       	subi	r18, 0x02	; 2
    2352:	31 09       	sbc	r19, r1
    2354:	2d 93       	st	X+, r18
    2356:	3c 93       	st	X, r19
    2358:	3a c0       	rjmp	.+116    	; 0x23ce <malloc+0x122>
    235a:	20 91 8b 20 	lds	r18, 0x208B	; 0x80208b <__brkval>
    235e:	30 91 8c 20 	lds	r19, 0x208C	; 0x80208c <__brkval+0x1>
    2362:	23 2b       	or	r18, r19
    2364:	41 f4       	brne	.+16     	; 0x2376 <malloc+0xca>
    2366:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    236a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    236e:	20 93 8b 20 	sts	0x208B, r18	; 0x80208b <__brkval>
    2372:	30 93 8c 20 	sts	0x208C, r19	; 0x80208c <__brkval+0x1>
    2376:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    237a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    237e:	21 15       	cp	r18, r1
    2380:	31 05       	cpc	r19, r1
    2382:	41 f4       	brne	.+16     	; 0x2394 <malloc+0xe8>
    2384:	2d b7       	in	r18, 0x3d	; 61
    2386:	3e b7       	in	r19, 0x3e	; 62
    2388:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    238c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2390:	24 1b       	sub	r18, r20
    2392:	35 0b       	sbc	r19, r21
    2394:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <__brkval>
    2398:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <__brkval+0x1>
    239c:	e2 17       	cp	r30, r18
    239e:	f3 07       	cpc	r31, r19
    23a0:	a0 f4       	brcc	.+40     	; 0x23ca <malloc+0x11e>
    23a2:	2e 1b       	sub	r18, r30
    23a4:	3f 0b       	sbc	r19, r31
    23a6:	28 17       	cp	r18, r24
    23a8:	39 07       	cpc	r19, r25
    23aa:	78 f0       	brcs	.+30     	; 0x23ca <malloc+0x11e>
    23ac:	ac 01       	movw	r20, r24
    23ae:	4e 5f       	subi	r20, 0xFE	; 254
    23b0:	5f 4f       	sbci	r21, 0xFF	; 255
    23b2:	24 17       	cp	r18, r20
    23b4:	35 07       	cpc	r19, r21
    23b6:	48 f0       	brcs	.+18     	; 0x23ca <malloc+0x11e>
    23b8:	4e 0f       	add	r20, r30
    23ba:	5f 1f       	adc	r21, r31
    23bc:	40 93 8b 20 	sts	0x208B, r20	; 0x80208b <__brkval>
    23c0:	50 93 8c 20 	sts	0x208C, r21	; 0x80208c <__brkval+0x1>
    23c4:	81 93       	st	Z+, r24
    23c6:	91 93       	st	Z+, r25
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <malloc+0x122>
    23ca:	e0 e0       	ldi	r30, 0x00	; 0
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	cf 01       	movw	r24, r30
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <free>:
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <free+0xe>
    23e2:	8c c0       	rjmp	.+280    	; 0x24fc <free+0x126>
    23e4:	fc 01       	movw	r30, r24
    23e6:	32 97       	sbiw	r30, 0x02	; 2
    23e8:	12 82       	std	Z+2, r1	; 0x02
    23ea:	13 82       	std	Z+3, r1	; 0x03
    23ec:	00 91 8d 20 	lds	r16, 0x208D	; 0x80208d <__flp>
    23f0:	10 91 8e 20 	lds	r17, 0x208E	; 0x80208e <__flp+0x1>
    23f4:	01 15       	cp	r16, r1
    23f6:	11 05       	cpc	r17, r1
    23f8:	81 f4       	brne	.+32     	; 0x241a <free+0x44>
    23fa:	20 81       	ld	r18, Z
    23fc:	31 81       	ldd	r19, Z+1	; 0x01
    23fe:	82 0f       	add	r24, r18
    2400:	93 1f       	adc	r25, r19
    2402:	20 91 8b 20 	lds	r18, 0x208B	; 0x80208b <__brkval>
    2406:	30 91 8c 20 	lds	r19, 0x208C	; 0x80208c <__brkval+0x1>
    240a:	28 17       	cp	r18, r24
    240c:	39 07       	cpc	r19, r25
    240e:	79 f5       	brne	.+94     	; 0x246e <free+0x98>
    2410:	e0 93 8b 20 	sts	0x208B, r30	; 0x80208b <__brkval>
    2414:	f0 93 8c 20 	sts	0x208C, r31	; 0x80208c <__brkval+0x1>
    2418:	71 c0       	rjmp	.+226    	; 0x24fc <free+0x126>
    241a:	d8 01       	movw	r26, r16
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	ae 17       	cp	r26, r30
    2422:	bf 07       	cpc	r27, r31
    2424:	50 f4       	brcc	.+20     	; 0x243a <free+0x64>
    2426:	12 96       	adiw	r26, 0x02	; 2
    2428:	2d 91       	ld	r18, X+
    242a:	3c 91       	ld	r19, X
    242c:	13 97       	sbiw	r26, 0x03	; 3
    242e:	ad 01       	movw	r20, r26
    2430:	21 15       	cp	r18, r1
    2432:	31 05       	cpc	r19, r1
    2434:	09 f1       	breq	.+66     	; 0x2478 <free+0xa2>
    2436:	d9 01       	movw	r26, r18
    2438:	f3 cf       	rjmp	.-26     	; 0x2420 <free+0x4a>
    243a:	9d 01       	movw	r18, r26
    243c:	da 01       	movw	r26, r20
    243e:	22 83       	std	Z+2, r18	; 0x02
    2440:	33 83       	std	Z+3, r19	; 0x03
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	86 0f       	add	r24, r22
    2448:	97 1f       	adc	r25, r23
    244a:	82 17       	cp	r24, r18
    244c:	93 07       	cpc	r25, r19
    244e:	69 f4       	brne	.+26     	; 0x246a <free+0x94>
    2450:	ec 01       	movw	r28, r24
    2452:	28 81       	ld	r18, Y
    2454:	39 81       	ldd	r19, Y+1	; 0x01
    2456:	26 0f       	add	r18, r22
    2458:	37 1f       	adc	r19, r23
    245a:	2e 5f       	subi	r18, 0xFE	; 254
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	20 83       	st	Z, r18
    2460:	31 83       	std	Z+1, r19	; 0x01
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	9b 81       	ldd	r25, Y+3	; 0x03
    2466:	82 83       	std	Z+2, r24	; 0x02
    2468:	93 83       	std	Z+3, r25	; 0x03
    246a:	45 2b       	or	r20, r21
    246c:	29 f4       	brne	.+10     	; 0x2478 <free+0xa2>
    246e:	e0 93 8d 20 	sts	0x208D, r30	; 0x80208d <__flp>
    2472:	f0 93 8e 20 	sts	0x208E, r31	; 0x80208e <__flp+0x1>
    2476:	42 c0       	rjmp	.+132    	; 0x24fc <free+0x126>
    2478:	12 96       	adiw	r26, 0x02	; 2
    247a:	ed 93       	st	X+, r30
    247c:	fc 93       	st	X, r31
    247e:	13 97       	sbiw	r26, 0x03	; 3
    2480:	ed 01       	movw	r28, r26
    2482:	49 91       	ld	r20, Y+
    2484:	59 91       	ld	r21, Y+
    2486:	9e 01       	movw	r18, r28
    2488:	24 0f       	add	r18, r20
    248a:	35 1f       	adc	r19, r21
    248c:	e2 17       	cp	r30, r18
    248e:	f3 07       	cpc	r31, r19
    2490:	71 f4       	brne	.+28     	; 0x24ae <free+0xd8>
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	84 0f       	add	r24, r20
    2498:	95 1f       	adc	r25, r21
    249a:	02 96       	adiw	r24, 0x02	; 2
    249c:	8d 93       	st	X+, r24
    249e:	9c 93       	st	X, r25
    24a0:	11 97       	sbiw	r26, 0x01	; 1
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	12 96       	adiw	r26, 0x02	; 2
    24a8:	8d 93       	st	X+, r24
    24aa:	9c 93       	st	X, r25
    24ac:	13 97       	sbiw	r26, 0x03	; 3
    24ae:	e0 e0       	ldi	r30, 0x00	; 0
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	d8 01       	movw	r26, r16
    24b4:	12 96       	adiw	r26, 0x02	; 2
    24b6:	8d 91       	ld	r24, X+
    24b8:	9c 91       	ld	r25, X
    24ba:	13 97       	sbiw	r26, 0x03	; 3
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	19 f0       	breq	.+6      	; 0x24c6 <free+0xf0>
    24c0:	f8 01       	movw	r30, r16
    24c2:	8c 01       	movw	r16, r24
    24c4:	f6 cf       	rjmp	.-20     	; 0x24b2 <free+0xdc>
    24c6:	8d 91       	ld	r24, X+
    24c8:	9c 91       	ld	r25, X
    24ca:	98 01       	movw	r18, r16
    24cc:	2e 5f       	subi	r18, 0xFE	; 254
    24ce:	3f 4f       	sbci	r19, 0xFF	; 255
    24d0:	82 0f       	add	r24, r18
    24d2:	93 1f       	adc	r25, r19
    24d4:	20 91 8b 20 	lds	r18, 0x208B	; 0x80208b <__brkval>
    24d8:	30 91 8c 20 	lds	r19, 0x208C	; 0x80208c <__brkval+0x1>
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	69 f4       	brne	.+26     	; 0x24fc <free+0x126>
    24e2:	30 97       	sbiw	r30, 0x00	; 0
    24e4:	29 f4       	brne	.+10     	; 0x24f0 <free+0x11a>
    24e6:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <__flp>
    24ea:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <__flp+0x1>
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <free+0x11e>
    24f0:	12 82       	std	Z+2, r1	; 0x02
    24f2:	13 82       	std	Z+3, r1	; 0x03
    24f4:	00 93 8b 20 	sts	0x208B, r16	; 0x80208b <__brkval>
    24f8:	10 93 8c 20 	sts	0x208C, r17	; 0x80208c <__brkval+0x1>
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	08 95       	ret

00002506 <strnlen_P>:
    2506:	fc 01       	movw	r30, r24
    2508:	05 90       	lpm	r0, Z+
    250a:	61 50       	subi	r22, 0x01	; 1
    250c:	70 40       	sbci	r23, 0x00	; 0
    250e:	01 10       	cpse	r0, r1
    2510:	d8 f7       	brcc	.-10     	; 0x2508 <strnlen_P+0x2>
    2512:	80 95       	com	r24
    2514:	90 95       	com	r25
    2516:	8e 0f       	add	r24, r30
    2518:	9f 1f       	adc	r25, r31
    251a:	08 95       	ret

0000251c <memset>:
    251c:	dc 01       	movw	r26, r24
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <memset+0x6>
    2520:	6d 93       	st	X+, r22
    2522:	41 50       	subi	r20, 0x01	; 1
    2524:	50 40       	sbci	r21, 0x00	; 0
    2526:	e0 f7       	brcc	.-8      	; 0x2520 <memset+0x4>
    2528:	08 95       	ret

0000252a <strnlen>:
    252a:	fc 01       	movw	r30, r24
    252c:	61 50       	subi	r22, 0x01	; 1
    252e:	70 40       	sbci	r23, 0x00	; 0
    2530:	01 90       	ld	r0, Z+
    2532:	01 10       	cpse	r0, r1
    2534:	d8 f7       	brcc	.-10     	; 0x252c <strnlen+0x2>
    2536:	80 95       	com	r24
    2538:	90 95       	com	r25
    253a:	8e 0f       	add	r24, r30
    253c:	9f 1f       	adc	r25, r31
    253e:	08 95       	ret

00002540 <fputc>:
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	fb 01       	movw	r30, r22
    254a:	23 81       	ldd	r18, Z+3	; 0x03
    254c:	21 fd       	sbrc	r18, 1
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <fputc+0x16>
    2550:	8f ef       	ldi	r24, 0xFF	; 255
    2552:	9f ef       	ldi	r25, 0xFF	; 255
    2554:	28 c0       	rjmp	.+80     	; 0x25a6 <fputc+0x66>
    2556:	22 ff       	sbrs	r18, 2
    2558:	16 c0       	rjmp	.+44     	; 0x2586 <fputc+0x46>
    255a:	46 81       	ldd	r20, Z+6	; 0x06
    255c:	57 81       	ldd	r21, Z+7	; 0x07
    255e:	24 81       	ldd	r18, Z+4	; 0x04
    2560:	35 81       	ldd	r19, Z+5	; 0x05
    2562:	42 17       	cp	r20, r18
    2564:	53 07       	cpc	r21, r19
    2566:	44 f4       	brge	.+16     	; 0x2578 <fputc+0x38>
    2568:	a0 81       	ld	r26, Z
    256a:	b1 81       	ldd	r27, Z+1	; 0x01
    256c:	9d 01       	movw	r18, r26
    256e:	2f 5f       	subi	r18, 0xFF	; 255
    2570:	3f 4f       	sbci	r19, 0xFF	; 255
    2572:	20 83       	st	Z, r18
    2574:	31 83       	std	Z+1, r19	; 0x01
    2576:	8c 93       	st	X, r24
    2578:	26 81       	ldd	r18, Z+6	; 0x06
    257a:	37 81       	ldd	r19, Z+7	; 0x07
    257c:	2f 5f       	subi	r18, 0xFF	; 255
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	26 83       	std	Z+6, r18	; 0x06
    2582:	37 83       	std	Z+7, r19	; 0x07
    2584:	10 c0       	rjmp	.+32     	; 0x25a6 <fputc+0x66>
    2586:	eb 01       	movw	r28, r22
    2588:	09 2f       	mov	r16, r25
    258a:	18 2f       	mov	r17, r24
    258c:	00 84       	ldd	r0, Z+8	; 0x08
    258e:	f1 85       	ldd	r31, Z+9	; 0x09
    2590:	e0 2d       	mov	r30, r0
    2592:	09 95       	icall
    2594:	89 2b       	or	r24, r25
    2596:	e1 f6       	brne	.-72     	; 0x2550 <fputc+0x10>
    2598:	8e 81       	ldd	r24, Y+6	; 0x06
    259a:	9f 81       	ldd	r25, Y+7	; 0x07
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	8e 83       	std	Y+6, r24	; 0x06
    25a0:	9f 83       	std	Y+7, r25	; 0x07
    25a2:	81 2f       	mov	r24, r17
    25a4:	90 2f       	mov	r25, r16
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	08 95       	ret

000025b0 <__ultoa_invert>:
    25b0:	fa 01       	movw	r30, r20
    25b2:	aa 27       	eor	r26, r26
    25b4:	28 30       	cpi	r18, 0x08	; 8
    25b6:	51 f1       	breq	.+84     	; 0x260c <__ultoa_invert+0x5c>
    25b8:	20 31       	cpi	r18, 0x10	; 16
    25ba:	81 f1       	breq	.+96     	; 0x261c <__ultoa_invert+0x6c>
    25bc:	e8 94       	clt
    25be:	6f 93       	push	r22
    25c0:	6e 7f       	andi	r22, 0xFE	; 254
    25c2:	6e 5f       	subi	r22, 0xFE	; 254
    25c4:	7f 4f       	sbci	r23, 0xFF	; 255
    25c6:	8f 4f       	sbci	r24, 0xFF	; 255
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	af 4f       	sbci	r26, 0xFF	; 255
    25cc:	b1 e0       	ldi	r27, 0x01	; 1
    25ce:	3e d0       	rcall	.+124    	; 0x264c <__ultoa_invert+0x9c>
    25d0:	b4 e0       	ldi	r27, 0x04	; 4
    25d2:	3c d0       	rcall	.+120    	; 0x264c <__ultoa_invert+0x9c>
    25d4:	67 0f       	add	r22, r23
    25d6:	78 1f       	adc	r23, r24
    25d8:	89 1f       	adc	r24, r25
    25da:	9a 1f       	adc	r25, r26
    25dc:	a1 1d       	adc	r26, r1
    25de:	68 0f       	add	r22, r24
    25e0:	79 1f       	adc	r23, r25
    25e2:	8a 1f       	adc	r24, r26
    25e4:	91 1d       	adc	r25, r1
    25e6:	a1 1d       	adc	r26, r1
    25e8:	6a 0f       	add	r22, r26
    25ea:	71 1d       	adc	r23, r1
    25ec:	81 1d       	adc	r24, r1
    25ee:	91 1d       	adc	r25, r1
    25f0:	a1 1d       	adc	r26, r1
    25f2:	20 d0       	rcall	.+64     	; 0x2634 <__ultoa_invert+0x84>
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <__ultoa_invert+0x48>
    25f6:	68 94       	set
    25f8:	3f 91       	pop	r19
    25fa:	2a e0       	ldi	r18, 0x0A	; 10
    25fc:	26 9f       	mul	r18, r22
    25fe:	11 24       	eor	r1, r1
    2600:	30 19       	sub	r19, r0
    2602:	30 5d       	subi	r19, 0xD0	; 208
    2604:	31 93       	st	Z+, r19
    2606:	de f6       	brtc	.-74     	; 0x25be <__ultoa_invert+0xe>
    2608:	cf 01       	movw	r24, r30
    260a:	08 95       	ret
    260c:	46 2f       	mov	r20, r22
    260e:	47 70       	andi	r20, 0x07	; 7
    2610:	40 5d       	subi	r20, 0xD0	; 208
    2612:	41 93       	st	Z+, r20
    2614:	b3 e0       	ldi	r27, 0x03	; 3
    2616:	0f d0       	rcall	.+30     	; 0x2636 <__ultoa_invert+0x86>
    2618:	c9 f7       	brne	.-14     	; 0x260c <__ultoa_invert+0x5c>
    261a:	f6 cf       	rjmp	.-20     	; 0x2608 <__ultoa_invert+0x58>
    261c:	46 2f       	mov	r20, r22
    261e:	4f 70       	andi	r20, 0x0F	; 15
    2620:	40 5d       	subi	r20, 0xD0	; 208
    2622:	4a 33       	cpi	r20, 0x3A	; 58
    2624:	18 f0       	brcs	.+6      	; 0x262c <__ultoa_invert+0x7c>
    2626:	49 5d       	subi	r20, 0xD9	; 217
    2628:	31 fd       	sbrc	r19, 1
    262a:	40 52       	subi	r20, 0x20	; 32
    262c:	41 93       	st	Z+, r20
    262e:	02 d0       	rcall	.+4      	; 0x2634 <__ultoa_invert+0x84>
    2630:	a9 f7       	brne	.-22     	; 0x261c <__ultoa_invert+0x6c>
    2632:	ea cf       	rjmp	.-44     	; 0x2608 <__ultoa_invert+0x58>
    2634:	b4 e0       	ldi	r27, 0x04	; 4
    2636:	a6 95       	lsr	r26
    2638:	97 95       	ror	r25
    263a:	87 95       	ror	r24
    263c:	77 95       	ror	r23
    263e:	67 95       	ror	r22
    2640:	ba 95       	dec	r27
    2642:	c9 f7       	brne	.-14     	; 0x2636 <__ultoa_invert+0x86>
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	61 05       	cpc	r22, r1
    2648:	71 05       	cpc	r23, r1
    264a:	08 95       	ret
    264c:	9b 01       	movw	r18, r22
    264e:	ac 01       	movw	r20, r24
    2650:	0a 2e       	mov	r0, r26
    2652:	06 94       	lsr	r0
    2654:	57 95       	ror	r21
    2656:	47 95       	ror	r20
    2658:	37 95       	ror	r19
    265a:	27 95       	ror	r18
    265c:	ba 95       	dec	r27
    265e:	c9 f7       	brne	.-14     	; 0x2652 <__ultoa_invert+0xa2>
    2660:	62 0f       	add	r22, r18
    2662:	73 1f       	adc	r23, r19
    2664:	84 1f       	adc	r24, r20
    2666:	95 1f       	adc	r25, r21
    2668:	a0 1d       	adc	r26, r0
    266a:	08 95       	ret

0000266c <__prologue_saves__>:
    266c:	2f 92       	push	r2
    266e:	3f 92       	push	r3
    2670:	4f 92       	push	r4
    2672:	5f 92       	push	r5
    2674:	6f 92       	push	r6
    2676:	7f 92       	push	r7
    2678:	8f 92       	push	r8
    267a:	9f 92       	push	r9
    267c:	af 92       	push	r10
    267e:	bf 92       	push	r11
    2680:	cf 92       	push	r12
    2682:	df 92       	push	r13
    2684:	ef 92       	push	r14
    2686:	ff 92       	push	r15
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	ca 1b       	sub	r28, r26
    2696:	db 0b       	sbc	r29, r27
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	09 94       	ijmp

0000269e <__epilogue_restores__>:
    269e:	2a 88       	ldd	r2, Y+18	; 0x12
    26a0:	39 88       	ldd	r3, Y+17	; 0x11
    26a2:	48 88       	ldd	r4, Y+16	; 0x10
    26a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    26ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    26ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    26b0:	b9 84       	ldd	r11, Y+9	; 0x09
    26b2:	c8 84       	ldd	r12, Y+8	; 0x08
    26b4:	df 80       	ldd	r13, Y+7	; 0x07
    26b6:	ee 80       	ldd	r14, Y+6	; 0x06
    26b8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ba:	0c 81       	ldd	r16, Y+4	; 0x04
    26bc:	1b 81       	ldd	r17, Y+3	; 0x03
    26be:	aa 81       	ldd	r26, Y+2	; 0x02
    26c0:	b9 81       	ldd	r27, Y+1	; 0x01
    26c2:	ce 0f       	add	r28, r30
    26c4:	d1 1d       	adc	r29, r1
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	ed 01       	movw	r28, r26
    26cc:	08 95       	ret

000026ce <_exit>:
    26ce:	f8 94       	cli

000026d0 <__stop_program>:
    26d0:	ff cf       	rjmp	.-2      	; 0x26d0 <__stop_program>
